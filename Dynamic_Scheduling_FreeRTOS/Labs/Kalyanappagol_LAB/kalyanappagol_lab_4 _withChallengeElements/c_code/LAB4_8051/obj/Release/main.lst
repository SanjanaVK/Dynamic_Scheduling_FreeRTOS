                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Thu Apr 20 12:51:26 2017
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _string_search
                             13 	.globl _timer2_isr
                             14 	.globl _external_isr
                             15 	.globl _timer_isr
                             16 	.globl _lcd_displaycustom
                             17 	.globl _lcdcreate_custom
                             18 	.globl _main
                             19 	.globl __sdcc_external_startup
                             20 	.globl _TF1
                             21 	.globl _TR1
                             22 	.globl _TF0
                             23 	.globl _TR0
                             24 	.globl _IE1
                             25 	.globl _IT1
                             26 	.globl _IE0
                             27 	.globl _IT0
                             28 	.globl _SM0
                             29 	.globl _SM1
                             30 	.globl _SM2
                             31 	.globl _REN
                             32 	.globl _TB8
                             33 	.globl _RB8
                             34 	.globl _TI
                             35 	.globl _RI
                             36 	.globl _CY
                             37 	.globl _AC
                             38 	.globl _F0
                             39 	.globl _RS1
                             40 	.globl _RS0
                             41 	.globl _OV
                             42 	.globl _F1
                             43 	.globl _P
                             44 	.globl _RD
                             45 	.globl _WR
                             46 	.globl _T1
                             47 	.globl _T0
                             48 	.globl _INT1
                             49 	.globl _INT0
                             50 	.globl _TXD0
                             51 	.globl _TXD
                             52 	.globl _RXD0
                             53 	.globl _RXD
                             54 	.globl _P3_7
                             55 	.globl _P3_6
                             56 	.globl _P3_5
                             57 	.globl _P3_4
                             58 	.globl _P3_3
                             59 	.globl _P3_2
                             60 	.globl _P3_1
                             61 	.globl _P3_0
                             62 	.globl _P2_7
                             63 	.globl _P2_6
                             64 	.globl _P2_5
                             65 	.globl _P2_4
                             66 	.globl _P2_3
                             67 	.globl _P2_2
                             68 	.globl _P2_1
                             69 	.globl _P2_0
                             70 	.globl _P1_7
                             71 	.globl _P1_6
                             72 	.globl _P1_5
                             73 	.globl _P1_4
                             74 	.globl _P1_3
                             75 	.globl _P1_2
                             76 	.globl _P1_1
                             77 	.globl _P1_0
                             78 	.globl _P0_7
                             79 	.globl _P0_6
                             80 	.globl _P0_5
                             81 	.globl _P0_4
                             82 	.globl _P0_3
                             83 	.globl _P0_2
                             84 	.globl _P0_1
                             85 	.globl _P0_0
                             86 	.globl _PS
                             87 	.globl _PT1
                             88 	.globl _PX1
                             89 	.globl _PT0
                             90 	.globl _PX0
                             91 	.globl _EA
                             92 	.globl _ES
                             93 	.globl _ET1
                             94 	.globl _EX1
                             95 	.globl _ET0
                             96 	.globl _EX0
                             97 	.globl _BREG_F7
                             98 	.globl _BREG_F6
                             99 	.globl _BREG_F5
                            100 	.globl _BREG_F4
                            101 	.globl _BREG_F3
                            102 	.globl _BREG_F2
                            103 	.globl _BREG_F1
                            104 	.globl _BREG_F0
                            105 	.globl _P5_7
                            106 	.globl _P5_6
                            107 	.globl _P5_5
                            108 	.globl _P5_4
                            109 	.globl _P5_3
                            110 	.globl _P5_2
                            111 	.globl _P5_1
                            112 	.globl _P5_0
                            113 	.globl _P4_7
                            114 	.globl _P4_6
                            115 	.globl _P4_5
                            116 	.globl _P4_4
                            117 	.globl _P4_3
                            118 	.globl _P4_2
                            119 	.globl _P4_1
                            120 	.globl _P4_0
                            121 	.globl _PX0L
                            122 	.globl _PT0L
                            123 	.globl _PX1L
                            124 	.globl _PT1L
                            125 	.globl _PLS
                            126 	.globl _PT2L
                            127 	.globl _PPCL
                            128 	.globl _EC
                            129 	.globl _CCF0
                            130 	.globl _CCF1
                            131 	.globl _CCF2
                            132 	.globl _CCF3
                            133 	.globl _CCF4
                            134 	.globl _CR
                            135 	.globl _CF
                            136 	.globl _TF2
                            137 	.globl _EXF2
                            138 	.globl _RCLK
                            139 	.globl _TCLK
                            140 	.globl _EXEN2
                            141 	.globl _TR2
                            142 	.globl _C_T2
                            143 	.globl _CP_RL2
                            144 	.globl _T2CON_7
                            145 	.globl _T2CON_6
                            146 	.globl _T2CON_5
                            147 	.globl _T2CON_4
                            148 	.globl _T2CON_3
                            149 	.globl _T2CON_2
                            150 	.globl _T2CON_1
                            151 	.globl _T2CON_0
                            152 	.globl _PT2
                            153 	.globl _ET2
                            154 	.globl _TMOD
                            155 	.globl _TL1
                            156 	.globl _TL0
                            157 	.globl _TH1
                            158 	.globl _TH0
                            159 	.globl _TCON
                            160 	.globl _SP
                            161 	.globl _SCON
                            162 	.globl _SBUF0
                            163 	.globl _SBUF
                            164 	.globl _PSW
                            165 	.globl _PCON
                            166 	.globl _P3
                            167 	.globl _P2
                            168 	.globl _P1
                            169 	.globl _P0
                            170 	.globl _IP
                            171 	.globl _IE
                            172 	.globl _DP0L
                            173 	.globl _DPL
                            174 	.globl _DP0H
                            175 	.globl _DPH
                            176 	.globl _B
                            177 	.globl _ACC
                            178 	.globl _EECON
                            179 	.globl _KBF
                            180 	.globl _KBE
                            181 	.globl _KBLS
                            182 	.globl _BRL
                            183 	.globl _BDRCON
                            184 	.globl _T2MOD
                            185 	.globl _SPDAT
                            186 	.globl _SPSTA
                            187 	.globl _SPCON
                            188 	.globl _SADEN
                            189 	.globl _SADDR
                            190 	.globl _WDTPRG
                            191 	.globl _WDTRST
                            192 	.globl _P5
                            193 	.globl _P4
                            194 	.globl _IPH1
                            195 	.globl _IPL1
                            196 	.globl _IPH0
                            197 	.globl _IPL0
                            198 	.globl _IEN1
                            199 	.globl _IEN0
                            200 	.globl _CMOD
                            201 	.globl _CL
                            202 	.globl _CH
                            203 	.globl _CCON
                            204 	.globl _CCAPM4
                            205 	.globl _CCAPM3
                            206 	.globl _CCAPM2
                            207 	.globl _CCAPM1
                            208 	.globl _CCAPM0
                            209 	.globl _CCAP4L
                            210 	.globl _CCAP3L
                            211 	.globl _CCAP2L
                            212 	.globl _CCAP1L
                            213 	.globl _CCAP0L
                            214 	.globl _CCAP4H
                            215 	.globl _CCAP3H
                            216 	.globl _CCAP2H
                            217 	.globl _CCAP1H
                            218 	.globl _CCAP0H
                            219 	.globl _CKCKON1
                            220 	.globl _CKCKON0
                            221 	.globl _CKRL
                            222 	.globl _AUXR1
                            223 	.globl _AUXR
                            224 	.globl _TH2
                            225 	.globl _TL2
                            226 	.globl _RCAP2H
                            227 	.globl _RCAP2L
                            228 	.globl _T2CON
                            229 	.globl _io_counter
                            230 	.globl _timers
                            231 	.globl _time
                            232 	.globl _str
                            233 	.globl _name
                            234 	.globl _time_value
                            235 	.globl _t2flag
                            236 	.globl _pinstatus
                            237 	.globl _nmi
                            238 	.globl _nsec
                            239 	.globl _nms
                            240 	.globl _disp
                            241 	.globl _ccode
                            242 	.globl _row_val
                            243 	.globl _dataread
                            244 	.globl _iow_status
                            245 	.globl _initialstatus
                            246 	.globl _cursor_position
                            247 	.globl _dir1
                            248 	.globl _pin1
                            249 	.globl _iord
                            250 	.globl _icmd
                            251 	.globl _ccmd
                            252 	.globl _lcmd
                            253 	.globl _ecmd
                            254 	.globl _cmd
                            255 	.globl _seq_data
                            256 	.globl _templcdread
                            257 	.globl _num
                            258 	.globl _lcdcount
                            259 	.globl _tflag
                            260 	.globl _dir1_int
                            261 	.globl _pin1_int
                            262 	.globl _iodatastore_int
                            263 	.globl _flag3
                            264 	.globl _flag2
                            265 	.globl _flag1
                            266 	.globl _flag
                            267 	.globl _bytelen
                            268 	.globl _bytesize
                            269 	.globl _endadd_int
                            270 	.globl _startadd_int
                            271 	.globl _datastore_int
                            272 	.globl _wordadd_int
                            273 	.globl _b
                            274 	.globl _d
                            275 	.globl _c
                            276 	.globl _store
                            277 	.globl _cnt
                            278 	.globl _io_datastore
                            279 	.globl _rd
                            280 	.globl _end_address
                            281 	.globl _start_address
                            282 	.globl _datastore
                            283 	.globl _wordaddress
                            284 	.globl _mi
                            285 	.globl _sec
                            286 	.globl _ms
                            287 	.globl _ewrite
                            288 	.globl _eread
                            289 	.globl _eseqread
                            290 	.globl _statusreport
                            291 	.globl _displaystatus
                            292 	.globl _displaydata
                            293 	.globl _searchtimer_init
                            294 ;--------------------------------------------------------
                            295 ; special function registers
                            296 ;--------------------------------------------------------
                            297 	.area RSEG    (DATA)
                    00C8    298 _T2CON	=	0x00c8
                    00CA    299 _RCAP2L	=	0x00ca
                    00CB    300 _RCAP2H	=	0x00cb
                    00CC    301 _TL2	=	0x00cc
                    00CD    302 _TH2	=	0x00cd
                    008E    303 _AUXR	=	0x008e
                    00A2    304 _AUXR1	=	0x00a2
                    0097    305 _CKRL	=	0x0097
                    008F    306 _CKCKON0	=	0x008f
                    008F    307 _CKCKON1	=	0x008f
                    00FA    308 _CCAP0H	=	0x00fa
                    00FB    309 _CCAP1H	=	0x00fb
                    00FC    310 _CCAP2H	=	0x00fc
                    00FD    311 _CCAP3H	=	0x00fd
                    00FE    312 _CCAP4H	=	0x00fe
                    00EA    313 _CCAP0L	=	0x00ea
                    00EB    314 _CCAP1L	=	0x00eb
                    00EC    315 _CCAP2L	=	0x00ec
                    00ED    316 _CCAP3L	=	0x00ed
                    00EE    317 _CCAP4L	=	0x00ee
                    00DA    318 _CCAPM0	=	0x00da
                    00DB    319 _CCAPM1	=	0x00db
                    00DC    320 _CCAPM2	=	0x00dc
                    00DD    321 _CCAPM3	=	0x00dd
                    00DE    322 _CCAPM4	=	0x00de
                    00D8    323 _CCON	=	0x00d8
                    00F9    324 _CH	=	0x00f9
                    00E9    325 _CL	=	0x00e9
                    00D9    326 _CMOD	=	0x00d9
                    00A8    327 _IEN0	=	0x00a8
                    00B1    328 _IEN1	=	0x00b1
                    00B8    329 _IPL0	=	0x00b8
                    00B7    330 _IPH0	=	0x00b7
                    00B2    331 _IPL1	=	0x00b2
                    00B3    332 _IPH1	=	0x00b3
                    00C0    333 _P4	=	0x00c0
                    00D8    334 _P5	=	0x00d8
                    00A6    335 _WDTRST	=	0x00a6
                    00A7    336 _WDTPRG	=	0x00a7
                    00A9    337 _SADDR	=	0x00a9
                    00B9    338 _SADEN	=	0x00b9
                    00C3    339 _SPCON	=	0x00c3
                    00C4    340 _SPSTA	=	0x00c4
                    00C5    341 _SPDAT	=	0x00c5
                    00C9    342 _T2MOD	=	0x00c9
                    009B    343 _BDRCON	=	0x009b
                    009A    344 _BRL	=	0x009a
                    009C    345 _KBLS	=	0x009c
                    009D    346 _KBE	=	0x009d
                    009E    347 _KBF	=	0x009e
                    00D2    348 _EECON	=	0x00d2
                    00E0    349 _ACC	=	0x00e0
                    00F0    350 _B	=	0x00f0
                    0083    351 _DPH	=	0x0083
                    0083    352 _DP0H	=	0x0083
                    0082    353 _DPL	=	0x0082
                    0082    354 _DP0L	=	0x0082
                    00A8    355 _IE	=	0x00a8
                    00B8    356 _IP	=	0x00b8
                    0080    357 _P0	=	0x0080
                    0090    358 _P1	=	0x0090
                    00A0    359 _P2	=	0x00a0
                    00B0    360 _P3	=	0x00b0
                    0087    361 _PCON	=	0x0087
                    00D0    362 _PSW	=	0x00d0
                    0099    363 _SBUF	=	0x0099
                    0099    364 _SBUF0	=	0x0099
                    0098    365 _SCON	=	0x0098
                    0081    366 _SP	=	0x0081
                    0088    367 _TCON	=	0x0088
                    008C    368 _TH0	=	0x008c
                    008D    369 _TH1	=	0x008d
                    008A    370 _TL0	=	0x008a
                    008B    371 _TL1	=	0x008b
                    0089    372 _TMOD	=	0x0089
                            373 ;--------------------------------------------------------
                            374 ; special function bits
                            375 ;--------------------------------------------------------
                            376 	.area RSEG    (DATA)
                    00AD    377 _ET2	=	0x00ad
                    00BD    378 _PT2	=	0x00bd
                    00C8    379 _T2CON_0	=	0x00c8
                    00C9    380 _T2CON_1	=	0x00c9
                    00CA    381 _T2CON_2	=	0x00ca
                    00CB    382 _T2CON_3	=	0x00cb
                    00CC    383 _T2CON_4	=	0x00cc
                    00CD    384 _T2CON_5	=	0x00cd
                    00CE    385 _T2CON_6	=	0x00ce
                    00CF    386 _T2CON_7	=	0x00cf
                    00C8    387 _CP_RL2	=	0x00c8
                    00C9    388 _C_T2	=	0x00c9
                    00CA    389 _TR2	=	0x00ca
                    00CB    390 _EXEN2	=	0x00cb
                    00CC    391 _TCLK	=	0x00cc
                    00CD    392 _RCLK	=	0x00cd
                    00CE    393 _EXF2	=	0x00ce
                    00CF    394 _TF2	=	0x00cf
                    00DF    395 _CF	=	0x00df
                    00DE    396 _CR	=	0x00de
                    00DC    397 _CCF4	=	0x00dc
                    00DB    398 _CCF3	=	0x00db
                    00DA    399 _CCF2	=	0x00da
                    00D9    400 _CCF1	=	0x00d9
                    00D8    401 _CCF0	=	0x00d8
                    00AE    402 _EC	=	0x00ae
                    00BE    403 _PPCL	=	0x00be
                    00BD    404 _PT2L	=	0x00bd
                    00BC    405 _PLS	=	0x00bc
                    00BB    406 _PT1L	=	0x00bb
                    00BA    407 _PX1L	=	0x00ba
                    00B9    408 _PT0L	=	0x00b9
                    00B8    409 _PX0L	=	0x00b8
                    00C0    410 _P4_0	=	0x00c0
                    00C1    411 _P4_1	=	0x00c1
                    00C2    412 _P4_2	=	0x00c2
                    00C3    413 _P4_3	=	0x00c3
                    00C4    414 _P4_4	=	0x00c4
                    00C5    415 _P4_5	=	0x00c5
                    00C6    416 _P4_6	=	0x00c6
                    00C7    417 _P4_7	=	0x00c7
                    00D8    418 _P5_0	=	0x00d8
                    00D9    419 _P5_1	=	0x00d9
                    00DA    420 _P5_2	=	0x00da
                    00DB    421 _P5_3	=	0x00db
                    00DC    422 _P5_4	=	0x00dc
                    00DD    423 _P5_5	=	0x00dd
                    00DE    424 _P5_6	=	0x00de
                    00DF    425 _P5_7	=	0x00df
                    00F0    426 _BREG_F0	=	0x00f0
                    00F1    427 _BREG_F1	=	0x00f1
                    00F2    428 _BREG_F2	=	0x00f2
                    00F3    429 _BREG_F3	=	0x00f3
                    00F4    430 _BREG_F4	=	0x00f4
                    00F5    431 _BREG_F5	=	0x00f5
                    00F6    432 _BREG_F6	=	0x00f6
                    00F7    433 _BREG_F7	=	0x00f7
                    00A8    434 _EX0	=	0x00a8
                    00A9    435 _ET0	=	0x00a9
                    00AA    436 _EX1	=	0x00aa
                    00AB    437 _ET1	=	0x00ab
                    00AC    438 _ES	=	0x00ac
                    00AF    439 _EA	=	0x00af
                    00B8    440 _PX0	=	0x00b8
                    00B9    441 _PT0	=	0x00b9
                    00BA    442 _PX1	=	0x00ba
                    00BB    443 _PT1	=	0x00bb
                    00BC    444 _PS	=	0x00bc
                    0080    445 _P0_0	=	0x0080
                    0081    446 _P0_1	=	0x0081
                    0082    447 _P0_2	=	0x0082
                    0083    448 _P0_3	=	0x0083
                    0084    449 _P0_4	=	0x0084
                    0085    450 _P0_5	=	0x0085
                    0086    451 _P0_6	=	0x0086
                    0087    452 _P0_7	=	0x0087
                    0090    453 _P1_0	=	0x0090
                    0091    454 _P1_1	=	0x0091
                    0092    455 _P1_2	=	0x0092
                    0093    456 _P1_3	=	0x0093
                    0094    457 _P1_4	=	0x0094
                    0095    458 _P1_5	=	0x0095
                    0096    459 _P1_6	=	0x0096
                    0097    460 _P1_7	=	0x0097
                    00A0    461 _P2_0	=	0x00a0
                    00A1    462 _P2_1	=	0x00a1
                    00A2    463 _P2_2	=	0x00a2
                    00A3    464 _P2_3	=	0x00a3
                    00A4    465 _P2_4	=	0x00a4
                    00A5    466 _P2_5	=	0x00a5
                    00A6    467 _P2_6	=	0x00a6
                    00A7    468 _P2_7	=	0x00a7
                    00B0    469 _P3_0	=	0x00b0
                    00B1    470 _P3_1	=	0x00b1
                    00B2    471 _P3_2	=	0x00b2
                    00B3    472 _P3_3	=	0x00b3
                    00B4    473 _P3_4	=	0x00b4
                    00B5    474 _P3_5	=	0x00b5
                    00B6    475 _P3_6	=	0x00b6
                    00B7    476 _P3_7	=	0x00b7
                    00B0    477 _RXD	=	0x00b0
                    00B0    478 _RXD0	=	0x00b0
                    00B1    479 _TXD	=	0x00b1
                    00B1    480 _TXD0	=	0x00b1
                    00B2    481 _INT0	=	0x00b2
                    00B3    482 _INT1	=	0x00b3
                    00B4    483 _T0	=	0x00b4
                    00B5    484 _T1	=	0x00b5
                    00B6    485 _WR	=	0x00b6
                    00B7    486 _RD	=	0x00b7
                    00D0    487 _P	=	0x00d0
                    00D1    488 _F1	=	0x00d1
                    00D2    489 _OV	=	0x00d2
                    00D3    490 _RS0	=	0x00d3
                    00D4    491 _RS1	=	0x00d4
                    00D5    492 _F0	=	0x00d5
                    00D6    493 _AC	=	0x00d6
                    00D7    494 _CY	=	0x00d7
                    0098    495 _RI	=	0x0098
                    0099    496 _TI	=	0x0099
                    009A    497 _RB8	=	0x009a
                    009B    498 _TB8	=	0x009b
                    009C    499 _REN	=	0x009c
                    009D    500 _SM2	=	0x009d
                    009E    501 _SM1	=	0x009e
                    009F    502 _SM0	=	0x009f
                    0088    503 _IT0	=	0x0088
                    0089    504 _IE0	=	0x0089
                    008A    505 _IT1	=	0x008a
                    008B    506 _IE1	=	0x008b
                    008C    507 _TR0	=	0x008c
                    008D    508 _TF0	=	0x008d
                    008E    509 _TR1	=	0x008e
                    008F    510 _TF1	=	0x008f
                            511 ;--------------------------------------------------------
                            512 ; overlayable register banks
                            513 ;--------------------------------------------------------
                            514 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     515 	.ds 8
                            516 ;--------------------------------------------------------
                            517 ; internal ram data
                            518 ;--------------------------------------------------------
                            519 	.area DSEG    (DATA)
   0000                     520 _string_search_sloc0_1_0:
   0000                     521 	.ds 3
   0003                     522 _string_search_sloc1_1_0:
   0003                     523 	.ds 1
                            524 ;--------------------------------------------------------
                            525 ; overlayable items in internal ram 
                            526 ;--------------------------------------------------------
                            527 	.area OSEG    (OVR,DATA)
                            528 ;--------------------------------------------------------
                            529 ; Stack segment in internal ram 
                            530 ;--------------------------------------------------------
                            531 	.area	SSEG	(DATA)
   0000                     532 __start__stack:
   0000                     533 	.ds	1
                            534 
                            535 ;--------------------------------------------------------
                            536 ; indirectly addressable internal ram data
                            537 ;--------------------------------------------------------
                            538 	.area ISEG    (DATA)
                            539 ;--------------------------------------------------------
                            540 ; bit data
                            541 ;--------------------------------------------------------
                            542 	.area BSEG    (BIT)
                            543 ;--------------------------------------------------------
                            544 ; paged external ram data
                            545 ;--------------------------------------------------------
                            546 	.area PSEG    (PAG,XDATA)
                            547 ;--------------------------------------------------------
                            548 ; external ram data
                            549 ;--------------------------------------------------------
                            550 	.area XSEG    (XDATA)
   0000                     551 _ms::
   0000                     552 	.ds 1
   0001                     553 _sec::
   0001                     554 	.ds 1
   0002                     555 _mi::
   0002                     556 	.ds 1
   0003                     557 _wordaddress::
   0003                     558 	.ds 3
   0006                     559 _datastore::
   0006                     560 	.ds 3
   0009                     561 _start_address::
   0009                     562 	.ds 3
   000C                     563 _end_address::
   000C                     564 	.ds 3
   000F                     565 _rd::
   000F                     566 	.ds 1
   0010                     567 _io_datastore::
   0010                     568 	.ds 3
   0013                     569 _cnt::
   0013                     570 	.ds 3
   0016                     571 _store::
   0016                     572 	.ds 1
   0017                     573 _c::
   0017                     574 	.ds 4
   001B                     575 _d::
   001B                     576 	.ds 5
   0020                     577 _b::
   0020                     578 	.ds 5
   0025                     579 _wordadd_int::
   0025                     580 	.ds 2
   0027                     581 _datastore_int::
   0027                     582 	.ds 2
   0029                     583 _startadd_int::
   0029                     584 	.ds 2
   002B                     585 _endadd_int::
   002B                     586 	.ds 2
   002D                     587 _bytesize::
   002D                     588 	.ds 2
   002F                     589 _bytelen::
   002F                     590 	.ds 2
   0031                     591 _flag::
   0031                     592 	.ds 2
   0033                     593 _flag1::
   0033                     594 	.ds 2
   0035                     595 _flag2::
   0035                     596 	.ds 2
   0037                     597 _flag3::
   0037                     598 	.ds 2
   0039                     599 _iodatastore_int::
   0039                     600 	.ds 2
   003B                     601 _pin1_int::
   003B                     602 	.ds 2
   003D                     603 _dir1_int::
   003D                     604 	.ds 2
   003F                     605 _tflag::
   003F                     606 	.ds 2
   0041                     607 _lcdcount::
   0041                     608 	.ds 2
   0043                     609 _num::
   0043                     610 	.ds 2
   0045                     611 _templcdread::
   0045                     612 	.ds 2
   0047                     613 _seq_data::
   0047                     614 	.ds 10
   0051                     615 _cmd::
   0051                     616 	.ds 1
   0052                     617 _ecmd::
   0052                     618 	.ds 1
   0053                     619 _lcmd::
   0053                     620 	.ds 1
   0054                     621 _ccmd::
   0054                     622 	.ds 1
   0055                     623 _icmd::
   0055                     624 	.ds 1
   0056                     625 _iord::
   0056                     626 	.ds 1
   0057                     627 _pin1::
   0057                     628 	.ds 3
   005A                     629 _dir1::
   005A                     630 	.ds 3
   005D                     631 _cursor_position::
   005D                     632 	.ds 1
   005E                     633 _initialstatus::
   005E                     634 	.ds 1
   005F                     635 _iow_status::
   005F                     636 	.ds 1
   0060                     637 _dataread::
   0060                     638 	.ds 1
   0061                     639 _row_val::
   0061                     640 	.ds 8
   0069                     641 _ccode::
   0069                     642 	.ds 1
   006A                     643 _disp::
   006A                     644 	.ds 8
   0072                     645 _nms::
   0072                     646 	.ds 6
   0078                     647 _nsec::
   0078                     648 	.ds 6
   007E                     649 _nmi::
   007E                     650 	.ds 6
   0084                     651 _pinstatus::
   0084                     652 	.ds 9
   008D                     653 _t2flag::
   008D                     654 	.ds 2
   008F                     655 _time_value::
   008F                     656 	.ds 2
   0091                     657 _statusreport_status_1_1:
   0091                     658 	.ds 1
   0092                     659 _string_search_str_temp_1_1:
   0092                     660 	.ds 3
   0095                     661 _string_search_tempadd_1_1:
   0095                     662 	.ds 50
   00C7                     663 _string_search_permadd_1_1:
   00C7                     664 	.ds 50
   00F9                     665 _string_search_tempsearchadd_1_1:
   00F9                     666 	.ds 1
   00FA                     667 _string_search_searchadd_1_1:
   00FA                     668 	.ds 1
   00FB                     669 _string_search_counti_1_1:
   00FB                     670 	.ds 2
   00FD                     671 _string_search_count_index_1_1:
   00FD                     672 	.ds 2
   00FF                     673 _string_search_countsearch_1_1:
   00FF                     674 	.ds 2
   0101                     675 _string_search_j_1_1:
   0101                     676 	.ds 2
   0103                     677 _string_search_k_1_1:
   0103                     678 	.ds 2
   0105                     679 _string_search_m_1_1:
   0105                     680 	.ds 2
   0107                     681 _string_search_r_1_1:
   0107                     682 	.ds 2
   0109                     683 _string_search_i_1_1:
   0109                     684 	.ds 2
                            685 ;--------------------------------------------------------
                            686 ; external initialized ram data
                            687 ;--------------------------------------------------------
                            688 	.area XISEG   (XDATA)
   0000                     689 _name::
   0000                     690 	.ds 3
   0003                     691 _str::
   0003                     692 	.ds 50
   0035                     693 _time::
   0035                     694 	.ds 1
   0036                     695 _timers::
   0036                     696 	.ds 2
   0038                     697 _io_counter::
   0038                     698 	.ds 2
                            699 	.area HOME    (CODE)
                            700 	.area GSINIT0 (CODE)
                            701 	.area GSINIT1 (CODE)
                            702 	.area GSINIT2 (CODE)
                            703 	.area GSINIT3 (CODE)
                            704 	.area GSINIT4 (CODE)
                            705 	.area GSINIT5 (CODE)
                            706 	.area GSINIT  (CODE)
                            707 	.area GSFINAL (CODE)
                            708 	.area CSEG    (CODE)
                            709 ;--------------------------------------------------------
                            710 ; interrupt vector 
                            711 ;--------------------------------------------------------
                            712 	.area HOME    (CODE)
   0000                     713 __interrupt_vect:
   0000 02s00r00            714 	ljmp	__sdcc_gsinit_startup
   0003 02s14r48            715 	ljmp	_external_isr
   0006                     716 	.ds	5
   000B 02s13rDF            717 	ljmp	_timer_isr
   000E                     718 	.ds	5
   0013 32                  719 	reti
   0014                     720 	.ds	7
   001B 32                  721 	reti
   001C                     722 	.ds	7
   0023 32                  723 	reti
   0024                     724 	.ds	7
   002B 02s14rB7            725 	ljmp	_timer2_isr
                            726 ;--------------------------------------------------------
                            727 ; global & static initialisations
                            728 ;--------------------------------------------------------
                            729 	.area HOME    (CODE)
                            730 	.area GSINIT  (CODE)
                            731 	.area GSFINAL (CODE)
                            732 	.area GSINIT  (CODE)
                            733 	.globl __sdcc_gsinit_startup
                            734 	.globl __sdcc_program_startup
                            735 	.globl __start__stack
                            736 	.globl __mcs51_genXINIT
                            737 	.globl __mcs51_genXRAMCLEAR
                            738 	.globl __mcs51_genRAMCLEAR
                            739 	.area GSFINAL (CODE)
   0000 02s00r00            740 	ljmp	__sdcc_program_startup
                            741 ;--------------------------------------------------------
                            742 ; Home
                            743 ;--------------------------------------------------------
                            744 	.area HOME    (CODE)
                            745 	.area CSEG    (CODE)
   0000                     746 __sdcc_program_startup:
   0000 12s00r0C            747 	lcall	_main
                            748 ;	return from main will lock up
   0003 80 FE               749 	sjmp .
                            750 ;--------------------------------------------------------
                            751 ; code
                            752 ;--------------------------------------------------------
                            753 	.area CSEG    (CODE)
                            754 ;------------------------------------------------------------
                            755 ;Allocation info for local variables in function '_sdcc_external_startup'
                            756 ;------------------------------------------------------------
                            757 ;------------------------------------------------------------
                            758 ;	main.c:53: _sdcc_external_startup()  //This function changes the size of Internal RAM to 1KB
                            759 ;	-----------------------------------------
                            760 ;	 function _sdcc_external_startup
                            761 ;	-----------------------------------------
   0005                     762 __sdcc_external_startup:
                    0002    763 	ar2 = 0x02
                    0003    764 	ar3 = 0x03
                    0004    765 	ar4 = 0x04
                    0005    766 	ar5 = 0x05
                    0006    767 	ar6 = 0x06
                    0007    768 	ar7 = 0x07
                    0000    769 	ar0 = 0x00
                    0001    770 	ar1 = 0x01
                            771 ;	main.c:55: AUXR |= 0x0C;
                            772 ;	genOr
   0005 43 8E 0C            773 	orl	_AUXR,#0x0C
                            774 ;	main.c:56: return 0;
                            775 ;	genRet
                            776 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            777 	mov	dptr,#0x0000
                            778 ;	Peephole 300	removed redundant label 00101$
   000B 22                  779 	ret
                            780 ;------------------------------------------------------------
                            781 ;Allocation info for local variables in function 'main'
                            782 ;------------------------------------------------------------
                            783 ;i                         Allocated with name '_main_i_1_1'
                            784 ;------------------------------------------------------------
                            785 ;	main.c:63: void main()
                            786 ;	-----------------------------------------
                            787 ;	 function main
                            788 ;	-----------------------------------------
   000C                     789 _main:
                            790 ;	main.c:67: tflag=0;
                            791 ;	genAssign
   000C 90s00r3F            792 	mov	dptr,#_tflag
   000F E4                  793 	clr	a
   0010 F0                  794 	movx	@dptr,a
   0011 A3                  795 	inc	dptr
   0012 F0                  796 	movx	@dptr,a
                            797 ;	main.c:68: io_counter=0;
                            798 ;	genAssign
   0013 90s00r38            799 	mov	dptr,#_io_counter
   0016 E4                  800 	clr	a
   0017 F0                  801 	movx	@dptr,a
   0018 A3                  802 	inc	dptr
   0019 F0                  803 	movx	@dptr,a
                            804 ;	main.c:69: lcdcount=0;
                            805 ;	genAssign
   001A 90s00r41            806 	mov	dptr,#_lcdcount
   001D E4                  807 	clr	a
   001E F0                  808 	movx	@dptr,a
   001F A3                  809 	inc	dptr
   0020 F0                  810 	movx	@dptr,a
                            811 ;	main.c:70: t2flag=0;
                            812 ;	genAssign
   0021 90s00r8D            813 	mov	dptr,#_t2flag
   0024 E4                  814 	clr	a
   0025 F0                  815 	movx	@dptr,a
   0026 A3                  816 	inc	dptr
   0027 F0                  817 	movx	@dptr,a
                            818 ;	main.c:71: time_value=0;
                            819 ;	genAssign
   0028 90s00r8F            820 	mov	dptr,#_time_value
   002B E4                  821 	clr	a
   002C F0                  822 	movx	@dptr,a
   002D A3                  823 	inc	dptr
   002E F0                  824 	movx	@dptr,a
                            825 ;	main.c:72: cursor_position=0x80;
                            826 ;	genAssign
   002F 90s00r5D            827 	mov	dptr,#_cursor_position
   0032 74 80               828 	mov	a,#0x80
   0034 F0                  829 	movx	@dptr,a
                            830 ;	main.c:73: initialstatus=0x01; //initial status of port pins of the IO expander
                            831 ;	genAssign
   0035 90s00r5E            832 	mov	dptr,#_initialstatus
   0038 74 01               833 	mov	a,#0x01
   003A F0                  834 	movx	@dptr,a
                            835 ;	main.c:75: init_hardware();   //Function to Initialise the hardware for Serial Communication
                            836 ;	genCall
   003B 12s00r00            837 	lcall	_init_hardware
                            838 ;	main.c:76: printf_tiny("\r\n****************WELCOME***************\r\n");
                            839 ;	genIpush
   003E 74r00               840 	mov	a,#__str_0
   0040 C0 E0               841 	push	acc
   0042 74s00               842 	mov	a,#(__str_0 >> 8)
   0044 C0 E0               843 	push	acc
                            844 ;	genCall
   0046 12s00r00            845 	lcall	_printf_tiny
   0049 15 81               846 	dec	sp
   004B 15 81               847 	dec	sp
                            848 ;	main.c:77: timer_init();                                   // Initialize the Timer
                            849 ;	genCall
   004D 12s00r00            850 	lcall	_timer_init
                            851 ;	main.c:78: eereset();                                       // EEPROM is reset at every powerup
                            852 ;	genCall
   0050 12s00r00            853 	lcall	_eereset
                            854 ;	main.c:79: lcd_init();                                    //LCD initialisation
                            855 ;	genCall
   0053 12s00r00            856 	lcall	_lcd_init
                            857 ;	main.c:80: lcd_setup();                                   //LCD initial setup
                            858 ;	genCall
   0056 12s00r00            859 	lcall	_lcd_setup
                            860 ;	main.c:81: clock_reset();
                            861 ;	genCall
   0059 12s00r00            862 	lcall	_clock_reset
                            863 ;	main.c:83: statusreport(initialstatus);
                            864 ;	genAssign
   005C 90s00r5E            865 	mov	dptr,#_initialstatus
   005F E0                  866 	movx	a,@dptr
                            867 ;	genCall
   0060 FA                  868 	mov	r2,a
                            869 ;	Peephole 244.c	loading dpl from a instead of r2
   0061 F5 82               870 	mov	dpl,a
   0063 12s12r65            871 	lcall	_statusreport
                            872 ;	main.c:84: IOEX_Write(initialstatus);
                            873 ;	genAssign
   0066 90s00r5E            874 	mov	dptr,#_initialstatus
   0069 E0                  875 	movx	a,@dptr
                            876 ;	genCall
   006A FA                  877 	mov	r2,a
                            878 ;	Peephole 244.c	loading dpl from a instead of r2
   006B F5 82               879 	mov	dpl,a
   006D 12s00r00            880 	lcall	_IOEX_Write
                            881 ;	main.c:88: do{
   0070                     882 00218$:
                            883 ;	main.c:89: printf_tiny("\r\n");
                            884 ;	genIpush
   0070 74r2B               885 	mov	a,#__str_1
   0072 C0 E0               886 	push	acc
   0074 74s00               887 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               888 	push	acc
                            889 ;	genCall
   0078 12s00r00            890 	lcall	_printf_tiny
   007B 15 81               891 	dec	sp
   007D 15 81               892 	dec	sp
                            893 ;	main.c:90: printf_tiny("\r\n******** MENU ********\r\n");
                            894 ;	genIpush
   007F 74r2E               895 	mov	a,#__str_2
   0081 C0 E0               896 	push	acc
   0083 74s00               897 	mov	a,#(__str_2 >> 8)
   0085 C0 E0               898 	push	acc
                            899 ;	genCall
   0087 12s00r00            900 	lcall	_printf_tiny
   008A 15 81               901 	dec	sp
   008C 15 81               902 	dec	sp
                            903 ;	main.c:91: printf_tiny("******** SELECT 'L' FOR LCD    ***********\r\n");
                            904 ;	genIpush
   008E 74r49               905 	mov	a,#__str_3
   0090 C0 E0               906 	push	acc
   0092 74s00               907 	mov	a,#(__str_3 >> 8)
   0094 C0 E0               908 	push	acc
                            909 ;	genCall
   0096 12s00r00            910 	lcall	_printf_tiny
   0099 15 81               911 	dec	sp
   009B 15 81               912 	dec	sp
                            913 ;	main.c:92: printf_tiny("******** SELECT 'E' FOR EEPROM ***********\r\n");
                            914 ;	genIpush
   009D 74r76               915 	mov	a,#__str_4
   009F C0 E0               916 	push	acc
   00A1 74s00               917 	mov	a,#(__str_4 >> 8)
   00A3 C0 E0               918 	push	acc
                            919 ;	genCall
   00A5 12s00r00            920 	lcall	_printf_tiny
   00A8 15 81               921 	dec	sp
   00AA 15 81               922 	dec	sp
                            923 ;	main.c:93: printf_tiny("******** SELECT 'C' FOR CLOCK   ***********\r\n");
                            924 ;	genIpush
   00AC 74rA3               925 	mov	a,#__str_5
   00AE C0 E0               926 	push	acc
   00B0 74s00               927 	mov	a,#(__str_5 >> 8)
   00B2 C0 E0               928 	push	acc
                            929 ;	genCall
   00B4 12s00r00            930 	lcall	_printf_tiny
   00B7 15 81               931 	dec	sp
   00B9 15 81               932 	dec	sp
                            933 ;	main.c:94: printf_tiny("******** SELECT 'I' FOR I\O EXPANDER   ***********\r\n");
                            934 ;	genIpush
   00BB 74rD1               935 	mov	a,#__str_6
   00BD C0 E0               936 	push	acc
   00BF 74s00               937 	mov	a,#(__str_6 >> 8)
   00C1 C0 E0               938 	push	acc
                            939 ;	genCall
   00C3 12s00r00            940 	lcall	_printf_tiny
   00C6 15 81               941 	dec	sp
   00C8 15 81               942 	dec	sp
                            943 ;	main.c:95: cmd=getchar();    // Obtain the command character
                            944 ;	genCall
   00CA 12s00r00            945 	lcall	_getchar
   00CD E5 82               946 	mov	a,dpl
                            947 ;	genAssign
   00CF 90s00r51            948 	mov	dptr,#_cmd
   00D2 F0                  949 	movx	@dptr,a
                            950 ;	main.c:96: printf_tiny("The command you entered is\t");
                            951 ;	genIpush
   00D3 74r05               952 	mov	a,#__str_7
   00D5 C0 E0               953 	push	acc
   00D7 74s01               954 	mov	a,#(__str_7 >> 8)
   00D9 C0 E0               955 	push	acc
                            956 ;	genCall
   00DB 12s00r00            957 	lcall	_printf_tiny
   00DE 15 81               958 	dec	sp
   00E0 15 81               959 	dec	sp
                            960 ;	main.c:97: putchar(cmd);
                            961 ;	genAssign
   00E2 90s00r51            962 	mov	dptr,#_cmd
   00E5 E0                  963 	movx	a,@dptr
                            964 ;	genCall
   00E6 FA                  965 	mov	r2,a
                            966 ;	Peephole 244.c	loading dpl from a instead of r2
   00E7 F5 82               967 	mov	dpl,a
   00E9 12s00r00            968 	lcall	_putchar
                            969 ;	main.c:98: printf_tiny("\r\n");
                            970 ;	genIpush
   00EC 74r2B               971 	mov	a,#__str_1
   00EE C0 E0               972 	push	acc
   00F0 74s00               973 	mov	a,#(__str_1 >> 8)
   00F2 C0 E0               974 	push	acc
                            975 ;	genCall
   00F4 12s00r00            976 	lcall	_printf_tiny
   00F7 15 81               977 	dec	sp
   00F9 15 81               978 	dec	sp
                            979 ;	main.c:99: if(cmd=='L')
                            980 ;	genAssign
   00FB 90s00r51            981 	mov	dptr,#_cmd
   00FE E0                  982 	movx	a,@dptr
   00FF FA                  983 	mov	r2,a
                            984 ;	genCmpEq
                            985 ;	gencjneshort
   0100 BA 4C 02            986 	cjne	r2,#0x4C,00269$
   0103 80 03               987 	sjmp	00270$
   0105                     988 00269$:
   0105 02s04r16            989 	ljmp	00216$
   0108                     990 00270$:
                            991 ;	main.c:101: do{
                            992 ;	genAssign
   0108 90s00r33            993 	mov	dptr,#_flag1
   010B E4                  994 	clr	a
   010C F0                  995 	movx	@dptr,a
   010D A3                  996 	inc	dptr
   010E F0                  997 	movx	@dptr,a
   010F                     998 00131$:
                            999 ;	main.c:102: printf_tiny("************ LCD MENU **********\r\n");
                           1000 ;	genIpush
   010F 74r21              1001 	mov	a,#__str_8
   0111 C0 E0              1002 	push	acc
   0113 74s01              1003 	mov	a,#(__str_8 >> 8)
   0115 C0 E0              1004 	push	acc
                           1005 ;	genCall
   0117 12s00r00           1006 	lcall	_printf_tiny
   011A 15 81              1007 	dec	sp
   011C 15 81              1008 	dec	sp
                           1009 ;	main.c:103: printf_tiny("********* SELECT 'C' for CGRAM DUMP ***********\r\n");
                           1010 ;	genIpush
   011E 74r44              1011 	mov	a,#__str_9
   0120 C0 E0              1012 	push	acc
   0122 74s01              1013 	mov	a,#(__str_9 >> 8)
   0124 C0 E0              1014 	push	acc
                           1015 ;	genCall
   0126 12s00r00           1016 	lcall	_printf_tiny
   0129 15 81              1017 	dec	sp
   012B 15 81              1018 	dec	sp
                           1019 ;	main.c:104: printf_tiny("********* SELECT 'D' for DDRAM DUMP ***********\r\n");
                           1020 ;	genIpush
   012D 74r76              1021 	mov	a,#__str_10
   012F C0 E0              1022 	push	acc
   0131 74s01              1023 	mov	a,#(__str_10 >> 8)
   0133 C0 E0              1024 	push	acc
                           1025 ;	genCall
   0135 12s00r00           1026 	lcall	_printf_tiny
   0138 15 81              1027 	dec	sp
   013A 15 81              1028 	dec	sp
                           1029 ;	main.c:105: printf_tiny("********* SELECT 'P' for LCD PUT STRING  ***********\r\n");
                           1030 ;	genIpush
   013C 74rA8              1031 	mov	a,#__str_11
   013E C0 E0              1032 	push	acc
   0140 74s01              1033 	mov	a,#(__str_11 >> 8)
   0142 C0 E0              1034 	push	acc
                           1035 ;	genCall
   0144 12s00r00           1036 	lcall	_printf_tiny
   0147 15 81              1037 	dec	sp
   0149 15 81              1038 	dec	sp
                           1039 ;	main.c:106: printf_tiny("********* SELECT 'L' for LCD CLEAR  ***********\r\n");
                           1040 ;	genIpush
   014B 74rDF              1041 	mov	a,#__str_12
   014D C0 E0              1042 	push	acc
   014F 74s01              1043 	mov	a,#(__str_12 >> 8)
   0151 C0 E0              1044 	push	acc
                           1045 ;	genCall
   0153 12s00r00           1046 	lcall	_printf_tiny
   0156 15 81              1047 	dec	sp
   0158 15 81              1048 	dec	sp
                           1049 ;	main.c:107: printf_tiny("********* SELECT 'R' for CUSTOM CHARACTER CREATE ***********\r\n");
                           1050 ;	genIpush
   015A 74r11              1051 	mov	a,#__str_13
   015C C0 E0              1052 	push	acc
   015E 74s02              1053 	mov	a,#(__str_13 >> 8)
   0160 C0 E0              1054 	push	acc
                           1055 ;	genCall
   0162 12s00r00           1056 	lcall	_printf_tiny
   0165 15 81              1057 	dec	sp
   0167 15 81              1058 	dec	sp
                           1059 ;	main.c:108: printf_tiny("********* SELECT 'H' for CUSTOM CHARACTER DISPLAY ***********\r\n");
                           1060 ;	genIpush
   0169 74r50              1061 	mov	a,#__str_14
   016B C0 E0              1062 	push	acc
   016D 74s02              1063 	mov	a,#(__str_14 >> 8)
   016F C0 E0              1064 	push	acc
                           1065 ;	genCall
   0171 12s00r00           1066 	lcall	_printf_tiny
   0174 15 81              1067 	dec	sp
   0176 15 81              1068 	dec	sp
                           1069 ;	main.c:109: printf_tiny("********* SELECT 'F' for LCD FUN LOGO DISPLAY ***********\r\n");
                           1070 ;	genIpush
   0178 74r90              1071 	mov	a,#__str_15
   017A C0 E0              1072 	push	acc
   017C 74s02              1073 	mov	a,#(__str_15 >> 8)
   017E C0 E0              1074 	push	acc
                           1075 ;	genCall
   0180 12s00r00           1076 	lcall	_printf_tiny
   0183 15 81              1077 	dec	sp
   0185 15 81              1078 	dec	sp
                           1079 ;	main.c:110: printf_tiny("********* SELECT 'S' for STRING SEARCH  ***********\r\n");
                           1080 ;	genIpush
   0187 74rCC              1081 	mov	a,#__str_16
   0189 C0 E0              1082 	push	acc
   018B 74s02              1083 	mov	a,#(__str_16 >> 8)
   018D C0 E0              1084 	push	acc
                           1085 ;	genCall
   018F 12s00r00           1086 	lcall	_printf_tiny
   0192 15 81              1087 	dec	sp
   0194 15 81              1088 	dec	sp
                           1089 ;	main.c:111: printf_tiny("********* SELECT 'A' for LCD READ ***********\r\n");
                           1090 ;	genIpush
   0196 74r02              1091 	mov	a,#__str_17
   0198 C0 E0              1092 	push	acc
   019A 74s03              1093 	mov	a,#(__str_17 >> 8)
   019C C0 E0              1094 	push	acc
                           1095 ;	genCall
   019E 12s00r00           1096 	lcall	_printf_tiny
   01A1 15 81              1097 	dec	sp
   01A3 15 81              1098 	dec	sp
                           1099 ;	main.c:112: printf_tiny("********* SELECT 'M' for MAIN MENU  ***********\r\n");
                           1100 ;	genIpush
   01A5 74r32              1101 	mov	a,#__str_18
   01A7 C0 E0              1102 	push	acc
   01A9 74s03              1103 	mov	a,#(__str_18 >> 8)
   01AB C0 E0              1104 	push	acc
                           1105 ;	genCall
   01AD 12s00r00           1106 	lcall	_printf_tiny
   01B0 15 81              1107 	dec	sp
   01B2 15 81              1108 	dec	sp
                           1109 ;	main.c:114: lcmd=getchar(); //Obtain the command character for LCD
                           1110 ;	genCall
   01B4 12s00r00           1111 	lcall	_getchar
   01B7 E5 82              1112 	mov	a,dpl
                           1113 ;	genAssign
   01B9 90s00r53           1114 	mov	dptr,#_lcmd
   01BC F0                 1115 	movx	@dptr,a
                           1116 ;	main.c:115: printf_tiny("The command you entered is\t");
                           1117 ;	genIpush
   01BD 74r05              1118 	mov	a,#__str_7
   01BF C0 E0              1119 	push	acc
   01C1 74s01              1120 	mov	a,#(__str_7 >> 8)
   01C3 C0 E0              1121 	push	acc
                           1122 ;	genCall
   01C5 12s00r00           1123 	lcall	_printf_tiny
   01C8 15 81              1124 	dec	sp
   01CA 15 81              1125 	dec	sp
                           1126 ;	main.c:116: putchar(lcmd);
                           1127 ;	genAssign
   01CC 90s00r53           1128 	mov	dptr,#_lcmd
   01CF E0                 1129 	movx	a,@dptr
                           1130 ;	genCall
   01D0 FB                 1131 	mov	r3,a
                           1132 ;	Peephole 244.c	loading dpl from a instead of r3
   01D1 F5 82              1133 	mov	dpl,a
   01D3 12s00r00           1134 	lcall	_putchar
                           1135 ;	main.c:117: printf_tiny("\r\n");
                           1136 ;	genIpush
   01D6 74r2B              1137 	mov	a,#__str_1
   01D8 C0 E0              1138 	push	acc
   01DA 74s00              1139 	mov	a,#(__str_1 >> 8)
   01DC C0 E0              1140 	push	acc
                           1141 ;	genCall
   01DE 12s00r00           1142 	lcall	_printf_tiny
   01E1 15 81              1143 	dec	sp
   01E3 15 81              1144 	dec	sp
                           1145 ;	main.c:118: if(lcmd=='C')
                           1146 ;	genAssign
   01E5 90s00r53           1147 	mov	dptr,#_lcmd
   01E8 E0                 1148 	movx	a,@dptr
   01E9 FB                 1149 	mov	r3,a
                           1150 ;	genCmpEq
                           1151 ;	gencjneshort
                           1152 ;	Peephole 112.b	changed ljmp to sjmp
                           1153 ;	Peephole 198.b	optimized misc jump sequence
   01EA BB 43 1C           1154 	cjne	r3,#0x43,00129$
                           1155 ;	Peephole 200.b	removed redundant sjmp
                           1156 ;	Peephole 300	removed redundant label 00271$
                           1157 ;	Peephole 300	removed redundant label 00272$
                           1158 ;	main.c:120: printf_tiny("************CGRAM DUMP MODE IN LCD*************\r\n");
                           1159 ;	genIpush
   01ED 74r64              1160 	mov	a,#__str_19
   01EF C0 E0              1161 	push	acc
   01F1 74s03              1162 	mov	a,#(__str_19 >> 8)
   01F3 C0 E0              1163 	push	acc
                           1164 ;	genCall
   01F5 12s00r00           1165 	lcall	_printf_tiny
   01F8 15 81              1166 	dec	sp
   01FA 15 81              1167 	dec	sp
                           1168 ;	main.c:121: CGRAM_dump(); //Function call for CGRAM dump
                           1169 ;	genCall
   01FC 12s00r00           1170 	lcall	_CGRAM_dump
                           1171 ;	main.c:122: flag3=0;
                           1172 ;	genAssign
   01FF 90s00r37           1173 	mov	dptr,#_flag3
   0202 E4                 1174 	clr	a
   0203 F0                 1175 	movx	@dptr,a
   0204 A3                 1176 	inc	dptr
   0205 F0                 1177 	movx	@dptr,a
   0206 02s04r02           1178 	ljmp	00130$
   0209                    1179 00129$:
                           1180 ;	main.c:124: else if(lcmd=='D')
                           1181 ;	genCmpEq
                           1182 ;	gencjneshort
                           1183 ;	Peephole 112.b	changed ljmp to sjmp
                           1184 ;	Peephole 198.b	optimized misc jump sequence
   0209 BB 44 1C           1185 	cjne	r3,#0x44,00126$
                           1186 ;	Peephole 200.b	removed redundant sjmp
                           1187 ;	Peephole 300	removed redundant label 00273$
                           1188 ;	Peephole 300	removed redundant label 00274$
                           1189 ;	main.c:126: printf_tiny("************DDRAM DUMP MODE IN LCD*************\r\n");
                           1190 ;	genIpush
   020C 74r96              1191 	mov	a,#__str_20
   020E C0 E0              1192 	push	acc
   0210 74s03              1193 	mov	a,#(__str_20 >> 8)
   0212 C0 E0              1194 	push	acc
                           1195 ;	genCall
   0214 12s00r00           1196 	lcall	_printf_tiny
   0217 15 81              1197 	dec	sp
   0219 15 81              1198 	dec	sp
                           1199 ;	main.c:127: DDRAM_dump(); //Function call for DDRAM dump
                           1200 ;	genCall
   021B 12s00r00           1201 	lcall	_DDRAM_dump
                           1202 ;	main.c:128: flag3=0;
                           1203 ;	genAssign
   021E 90s00r37           1204 	mov	dptr,#_flag3
   0221 E4                 1205 	clr	a
   0222 F0                 1206 	movx	@dptr,a
   0223 A3                 1207 	inc	dptr
   0224 F0                 1208 	movx	@dptr,a
   0225 02s04r02           1209 	ljmp	00130$
   0228                    1210 00126$:
                           1211 ;	main.c:130: else if(lcmd=='P')
                           1212 ;	genCmpEq
                           1213 ;	gencjneshort
                           1214 ;	Peephole 112.b	changed ljmp to sjmp
                           1215 ;	Peephole 198.b	optimized misc jump sequence
   0228 BB 50 22           1216 	cjne	r3,#0x50,00123$
                           1217 ;	Peephole 200.b	removed redundant sjmp
                           1218 ;	Peephole 300	removed redundant label 00275$
                           1219 ;	Peephole 300	removed redundant label 00276$
                           1220 ;	main.c:132: printf_tiny("************LCD PUT STRING*************\r\n");
                           1221 ;	genIpush
   022B 74rC8              1222 	mov	a,#__str_21
   022D C0 E0              1223 	push	acc
   022F 74s03              1224 	mov	a,#(__str_21 >> 8)
   0231 C0 E0              1225 	push	acc
                           1226 ;	genCall
   0233 12s00r00           1227 	lcall	_printf_tiny
   0236 15 81              1228 	dec	sp
   0238 15 81              1229 	dec	sp
                           1230 ;	main.c:133: lcdputstr("BCBCBCED"); //Function call to put string on the LCD
                           1231 ;	genCall
                           1232 ;	Peephole 182.a	used 16 bit load of DPTR
   023A 90s03rF2           1233 	mov	dptr,#__str_22
   023D 75 F0 80           1234 	mov	b,#0x80
   0240 12s00r00           1235 	lcall	_lcdputstr
                           1236 ;	main.c:134: flag3=0;
                           1237 ;	genAssign
   0243 90s00r37           1238 	mov	dptr,#_flag3
   0246 E4                 1239 	clr	a
   0247 F0                 1240 	movx	@dptr,a
   0248 A3                 1241 	inc	dptr
   0249 F0                 1242 	movx	@dptr,a
   024A 02s04r02           1243 	ljmp	00130$
   024D                    1244 00123$:
                           1245 ;	main.c:136: else if(lcmd=='M')
                           1246 ;	genCmpEq
                           1247 ;	gencjneshort
                           1248 ;	Peephole 112.b	changed ljmp to sjmp
                           1249 ;	Peephole 198.b	optimized misc jump sequence
   024D BB 4D 19           1250 	cjne	r3,#0x4D,00120$
                           1251 ;	Peephole 200.b	removed redundant sjmp
                           1252 ;	Peephole 300	removed redundant label 00277$
                           1253 ;	Peephole 300	removed redundant label 00278$
                           1254 ;	main.c:138: printf_tiny("********Back to  Main Menu**********");
                           1255 ;	genIpush
   0250 74rFB              1256 	mov	a,#__str_23
   0252 C0 E0              1257 	push	acc
   0254 74s03              1258 	mov	a,#(__str_23 >> 8)
   0256 C0 E0              1259 	push	acc
                           1260 ;	genCall
   0258 12s00r00           1261 	lcall	_printf_tiny
   025B 15 81              1262 	dec	sp
   025D 15 81              1263 	dec	sp
                           1264 ;	main.c:139: flag3=0;
                           1265 ;	genAssign
   025F 90s00r37           1266 	mov	dptr,#_flag3
   0262 E4                 1267 	clr	a
   0263 F0                 1268 	movx	@dptr,a
   0264 A3                 1269 	inc	dptr
   0265 F0                 1270 	movx	@dptr,a
   0266 02s04r02           1271 	ljmp	00130$
   0269                    1272 00120$:
                           1273 ;	main.c:141: else if(lcmd=='L')
                           1274 ;	genCmpEq
                           1275 ;	gencjneshort
                           1276 ;	Peephole 112.b	changed ljmp to sjmp
                           1277 ;	Peephole 198.b	optimized misc jump sequence
   0269 BB 4C 1C           1278 	cjne	r3,#0x4C,00117$
                           1279 ;	Peephole 200.b	removed redundant sjmp
                           1280 ;	Peephole 300	removed redundant label 00279$
                           1281 ;	Peephole 300	removed redundant label 00280$
                           1282 ;	main.c:143: printf_tiny("************CLEAR LCD MODE IN LCD*************\r\n");
                           1283 ;	genIpush
   026C 74r20              1284 	mov	a,#__str_24
   026E C0 E0              1285 	push	acc
   0270 74s04              1286 	mov	a,#(__str_24 >> 8)
   0272 C0 E0              1287 	push	acc
                           1288 ;	genCall
   0274 12s00r00           1289 	lcall	_printf_tiny
   0277 15 81              1290 	dec	sp
   0279 15 81              1291 	dec	sp
                           1292 ;	main.c:144: lcdclear();  //Function Call for LCD Clear
                           1293 ;	genCall
   027B 12s00r00           1294 	lcall	_lcdclear
                           1295 ;	main.c:145: flag3=0;
                           1296 ;	genAssign
   027E 90s00r37           1297 	mov	dptr,#_flag3
   0281 E4                 1298 	clr	a
   0282 F0                 1299 	movx	@dptr,a
   0283 A3                 1300 	inc	dptr
   0284 F0                 1301 	movx	@dptr,a
   0285 02s04r02           1302 	ljmp	00130$
   0288                    1303 00117$:
                           1304 ;	main.c:147: else if(lcmd=='H')
                           1305 ;	genCmpEq
                           1306 ;	gencjneshort
                           1307 ;	Peephole 112.b	changed ljmp to sjmp
                           1308 ;	Peephole 198.b	optimized misc jump sequence
   0288 BB 48 1C           1309 	cjne	r3,#0x48,00114$
                           1310 ;	Peephole 200.b	removed redundant sjmp
                           1311 ;	Peephole 300	removed redundant label 00281$
                           1312 ;	Peephole 300	removed redundant label 00282$
                           1313 ;	main.c:149: printf_tiny("******** CUSTOM CHARACTER DISPLAY MODE *********");
                           1314 ;	genIpush
   028B 74r51              1315 	mov	a,#__str_25
   028D C0 E0              1316 	push	acc
   028F 74s04              1317 	mov	a,#(__str_25 >> 8)
   0291 C0 E0              1318 	push	acc
                           1319 ;	genCall
   0293 12s00r00           1320 	lcall	_printf_tiny
   0296 15 81              1321 	dec	sp
   0298 15 81              1322 	dec	sp
                           1323 ;	main.c:150: lcd_displaycustom(); //Function call for Custom character display
                           1324 ;	genCall
   029A 12s11rEE           1325 	lcall	_lcd_displaycustom
                           1326 ;	main.c:151: flag3=0;
                           1327 ;	genAssign
   029D 90s00r37           1328 	mov	dptr,#_flag3
   02A0 E4                 1329 	clr	a
   02A1 F0                 1330 	movx	@dptr,a
   02A2 A3                 1331 	inc	dptr
   02A3 F0                 1332 	movx	@dptr,a
   02A4 02s04r02           1333 	ljmp	00130$
   02A7                    1334 00114$:
                           1335 ;	main.c:153: else if(lcmd=='R')
                           1336 ;	genCmpEq
                           1337 ;	gencjneshort
                           1338 ;	Peephole 112.b	changed ljmp to sjmp
                           1339 ;	Peephole 198.b	optimized misc jump sequence
   02A7 BB 52 1C           1340 	cjne	r3,#0x52,00111$
                           1341 ;	Peephole 200.b	removed redundant sjmp
                           1342 ;	Peephole 300	removed redundant label 00283$
                           1343 ;	Peephole 300	removed redundant label 00284$
                           1344 ;	main.c:155: printf_tiny("************ CUSTOM CHARACTER CREATE MODE *************\r\n");
                           1345 ;	genIpush
   02AA 74r82              1346 	mov	a,#__str_26
   02AC C0 E0              1347 	push	acc
   02AE 74s04              1348 	mov	a,#(__str_26 >> 8)
   02B0 C0 E0              1349 	push	acc
                           1350 ;	genCall
   02B2 12s00r00           1351 	lcall	_printf_tiny
   02B5 15 81              1352 	dec	sp
   02B7 15 81              1353 	dec	sp
                           1354 ;	main.c:156: lcdcreate_custom(); //Function call for creating custom characters
                           1355 ;	genCall
   02B9 12s0Fr7B           1356 	lcall	_lcdcreate_custom
                           1357 ;	main.c:157: flag3=0;
                           1358 ;	genAssign
   02BC 90s00r37           1359 	mov	dptr,#_flag3
   02BF E4                 1360 	clr	a
   02C0 F0                 1361 	movx	@dptr,a
   02C1 A3                 1362 	inc	dptr
   02C2 F0                 1363 	movx	@dptr,a
   02C3 02s04r02           1364 	ljmp	00130$
   02C6                    1365 00111$:
                           1366 ;	main.c:159: else if(lcmd=='F')
                           1367 ;	genCmpEq
                           1368 ;	gencjneshort
                           1369 ;	Peephole 112.b	changed ljmp to sjmp
                           1370 ;	Peephole 198.b	optimized misc jump sequence
   02C6 BB 46 1C           1371 	cjne	r3,#0x46,00108$
                           1372 ;	Peephole 200.b	removed redundant sjmp
                           1373 ;	Peephole 300	removed redundant label 00285$
                           1374 ;	Peephole 300	removed redundant label 00286$
                           1375 ;	main.c:161: printf_tiny("************ LCD FUN LOGO DISPLAY *************\r\n");
                           1376 ;	genIpush
   02C9 74rBC              1377 	mov	a,#__str_27
   02CB C0 E0              1378 	push	acc
   02CD 74s04              1379 	mov	a,#(__str_27 >> 8)
   02CF C0 E0              1380 	push	acc
                           1381 ;	genCall
   02D1 12s00r00           1382 	lcall	_printf_tiny
   02D4 15 81              1383 	dec	sp
   02D6 15 81              1384 	dec	sp
                           1385 ;	main.c:162: logo_creator();  //Function call to create a fun logo
                           1386 ;	genCall
   02D8 12s00r00           1387 	lcall	_logo_creator
                           1388 ;	main.c:163: flag3=0;
                           1389 ;	genAssign
   02DB 90s00r37           1390 	mov	dptr,#_flag3
   02DE E4                 1391 	clr	a
   02DF F0                 1392 	movx	@dptr,a
   02E0 A3                 1393 	inc	dptr
   02E1 F0                 1394 	movx	@dptr,a
   02E2 02s04r02           1395 	ljmp	00130$
   02E5                    1396 00108$:
                           1397 ;	main.c:165: else if(lcmd=='S')
                           1398 ;	genCmpEq
                           1399 ;	gencjneshort
                           1400 ;	Peephole 112.b	changed ljmp to sjmp
                           1401 ;	Peephole 198.b	optimized misc jump sequence
   02E5 BB 53 1F           1402 	cjne	r3,#0x53,00105$
                           1403 ;	Peephole 200.b	removed redundant sjmp
                           1404 ;	Peephole 300	removed redundant label 00287$
                           1405 ;	Peephole 300	removed redundant label 00288$
                           1406 ;	main.c:167: printf_tiny("************ STRING SEARCH *************\r\n");
                           1407 ;	genIpush
   02E8 74rEE              1408 	mov	a,#__str_28
   02EA C0 E0              1409 	push	acc
   02EC 74s04              1410 	mov	a,#(__str_28 >> 8)
   02EE C0 E0              1411 	push	acc
                           1412 ;	genCall
   02F0 12s00r00           1413 	lcall	_printf_tiny
   02F3 15 81              1414 	dec	sp
   02F5 15 81              1415 	dec	sp
                           1416 ;	main.c:168: searchtimer_init();
                           1417 ;	genCall
   02F7 12s1ErF3           1418 	lcall	_searchtimer_init
                           1419 ;	main.c:169: string_search();
                           1420 ;	genCall
   02FA 12s14rF4           1421 	lcall	_string_search
                           1422 ;	main.c:170: flag3=0;
                           1423 ;	genAssign
   02FD 90s00r37           1424 	mov	dptr,#_flag3
   0300 E4                 1425 	clr	a
   0301 F0                 1426 	movx	@dptr,a
   0302 A3                 1427 	inc	dptr
   0303 F0                 1428 	movx	@dptr,a
   0304 02s04r02           1429 	ljmp	00130$
   0307                    1430 00105$:
                           1431 ;	main.c:172: else if(lcmd=='A')
                           1432 ;	genCmpEq
                           1433 ;	gencjneshort
   0307 BB 41 02           1434 	cjne	r3,#0x41,00289$
   030A 80 03              1435 	sjmp	00290$
   030C                    1436 00289$:
   030C 02s03rEA           1437 	ljmp	00102$
   030F                    1438 00290$:
                           1439 ;	main.c:174: printf_tiny("************ LCD READ *************\r\n");
                           1440 ;	genIpush
   030F 74r19              1441 	mov	a,#__str_29
   0311 C0 E0              1442 	push	acc
   0313 74s05              1443 	mov	a,#(__str_29 >> 8)
   0315 C0 E0              1444 	push	acc
                           1445 ;	genCall
   0317 12s00r00           1446 	lcall	_printf_tiny
   031A 15 81              1447 	dec	sp
   031C 15 81              1448 	dec	sp
                           1449 ;	main.c:175: lcdputcmd(0X80);
                           1450 ;	genCall
   031E 75 82 80           1451 	mov	dpl,#0x80
   0321 12s00r00           1452 	lcall	_lcdputcmd
                           1453 ;	main.c:176: templcdread=lcdread();
                           1454 ;	genCall
   0324 12s00r00           1455 	lcall	_lcdread
   0327 AB 82              1456 	mov	r3,dpl
                           1457 ;	genCast
   0329 90s00r45           1458 	mov	dptr,#_templcdread
   032C EB                 1459 	mov	a,r3
   032D F0                 1460 	movx	@dptr,a
   032E EB                 1461 	mov	a,r3
   032F 33                 1462 	rlc	a
   0330 95 E0              1463 	subb	a,acc
   0332 A3                 1464 	inc	dptr
   0333 F0                 1465 	movx	@dptr,a
                           1466 ;	main.c:177: printf_tiny("LCD READ IS GIVING:");
                           1467 ;	genIpush
   0334 74r3F              1468 	mov	a,#__str_30
   0336 C0 E0              1469 	push	acc
   0338 74s05              1470 	mov	a,#(__str_30 >> 8)
   033A C0 E0              1471 	push	acc
                           1472 ;	genCall
   033C 12s00r00           1473 	lcall	_printf_tiny
   033F 15 81              1474 	dec	sp
   0341 15 81              1475 	dec	sp
                           1476 ;	main.c:178: putchar(templcdread);
                           1477 ;	genAssign
   0343 90s00r45           1478 	mov	dptr,#_templcdread
   0346 E0                 1479 	movx	a,@dptr
   0347 FB                 1480 	mov	r3,a
   0348 A3                 1481 	inc	dptr
   0349 E0                 1482 	movx	a,@dptr
   034A FC                 1483 	mov	r4,a
                           1484 ;	genCast
                           1485 ;	genCall
   034B 8B 82              1486 	mov	dpl,r3
   034D 12s00r00           1487 	lcall	_putchar
                           1488 ;	main.c:179: printf_tiny("\r\n");
                           1489 ;	genIpush
   0350 74r2B              1490 	mov	a,#__str_1
   0352 C0 E0              1491 	push	acc
   0354 74s00              1492 	mov	a,#(__str_1 >> 8)
   0356 C0 E0              1493 	push	acc
                           1494 ;	genCall
   0358 12s00r00           1495 	lcall	_printf_tiny
   035B 15 81              1496 	dec	sp
   035D 15 81              1497 	dec	sp
                           1498 ;	main.c:180: lcdputcmd(0X80);
                           1499 ;	genCall
   035F 75 82 80           1500 	mov	dpl,#0x80
   0362 12s00r00           1501 	lcall	_lcdputcmd
                           1502 ;	main.c:181: templcdread=lcdread();
                           1503 ;	genCall
   0365 12s00r00           1504 	lcall	_lcdread
   0368 AB 82              1505 	mov	r3,dpl
                           1506 ;	genCast
   036A 90s00r45           1507 	mov	dptr,#_templcdread
   036D EB                 1508 	mov	a,r3
   036E F0                 1509 	movx	@dptr,a
   036F EB                 1510 	mov	a,r3
   0370 33                 1511 	rlc	a
   0371 95 E0              1512 	subb	a,acc
   0373 A3                 1513 	inc	dptr
   0374 F0                 1514 	movx	@dptr,a
                           1515 ;	main.c:182: printf_tiny("LCD READ IS GIVING:");
                           1516 ;	genIpush
   0375 74r3F              1517 	mov	a,#__str_30
   0377 C0 E0              1518 	push	acc
   0379 74s05              1519 	mov	a,#(__str_30 >> 8)
   037B C0 E0              1520 	push	acc
                           1521 ;	genCall
   037D 12s00r00           1522 	lcall	_printf_tiny
   0380 15 81              1523 	dec	sp
   0382 15 81              1524 	dec	sp
                           1525 ;	main.c:183: putchar(templcdread);
                           1526 ;	genAssign
   0384 90s00r45           1527 	mov	dptr,#_templcdread
   0387 E0                 1528 	movx	a,@dptr
   0388 FB                 1529 	mov	r3,a
   0389 A3                 1530 	inc	dptr
   038A E0                 1531 	movx	a,@dptr
   038B FC                 1532 	mov	r4,a
                           1533 ;	genCast
                           1534 ;	genCall
   038C 8B 82              1535 	mov	dpl,r3
   038E 12s00r00           1536 	lcall	_putchar
                           1537 ;	main.c:184: printf_tiny("\r\n");
                           1538 ;	genIpush
   0391 74r2B              1539 	mov	a,#__str_1
   0393 C0 E0              1540 	push	acc
   0395 74s00              1541 	mov	a,#(__str_1 >> 8)
   0397 C0 E0              1542 	push	acc
                           1543 ;	genCall
   0399 12s00r00           1544 	lcall	_printf_tiny
   039C 15 81              1545 	dec	sp
   039E 15 81              1546 	dec	sp
                           1547 ;	main.c:185: lcdputcmd(0X81);
                           1548 ;	genCall
   03A0 75 82 81           1549 	mov	dpl,#0x81
   03A3 12s00r00           1550 	lcall	_lcdputcmd
                           1551 ;	main.c:186: templcdread=lcdread();
                           1552 ;	genCall
   03A6 12s00r00           1553 	lcall	_lcdread
   03A9 AB 82              1554 	mov	r3,dpl
                           1555 ;	genCast
   03AB 90s00r45           1556 	mov	dptr,#_templcdread
   03AE EB                 1557 	mov	a,r3
   03AF F0                 1558 	movx	@dptr,a
   03B0 EB                 1559 	mov	a,r3
   03B1 33                 1560 	rlc	a
   03B2 95 E0              1561 	subb	a,acc
   03B4 A3                 1562 	inc	dptr
   03B5 F0                 1563 	movx	@dptr,a
                           1564 ;	main.c:187: printf_tiny("LCD READ IS GIVING:");
                           1565 ;	genIpush
   03B6 74r3F              1566 	mov	a,#__str_30
   03B8 C0 E0              1567 	push	acc
   03BA 74s05              1568 	mov	a,#(__str_30 >> 8)
   03BC C0 E0              1569 	push	acc
                           1570 ;	genCall
   03BE 12s00r00           1571 	lcall	_printf_tiny
   03C1 15 81              1572 	dec	sp
   03C3 15 81              1573 	dec	sp
                           1574 ;	main.c:188: putchar(templcdread);
                           1575 ;	genAssign
   03C5 90s00r45           1576 	mov	dptr,#_templcdread
   03C8 E0                 1577 	movx	a,@dptr
   03C9 FB                 1578 	mov	r3,a
   03CA A3                 1579 	inc	dptr
   03CB E0                 1580 	movx	a,@dptr
   03CC FC                 1581 	mov	r4,a
                           1582 ;	genCast
                           1583 ;	genCall
   03CD 8B 82              1584 	mov	dpl,r3
   03CF 12s00r00           1585 	lcall	_putchar
                           1586 ;	main.c:189: printf_tiny("\r\n");
                           1587 ;	genIpush
   03D2 74r2B              1588 	mov	a,#__str_1
   03D4 C0 E0              1589 	push	acc
   03D6 74s00              1590 	mov	a,#(__str_1 >> 8)
   03D8 C0 E0              1591 	push	acc
                           1592 ;	genCall
   03DA 12s00r00           1593 	lcall	_printf_tiny
   03DD 15 81              1594 	dec	sp
   03DF 15 81              1595 	dec	sp
                           1596 ;	main.c:190: flag3=0;
                           1597 ;	genAssign
   03E1 90s00r37           1598 	mov	dptr,#_flag3
   03E4 E4                 1599 	clr	a
   03E5 F0                 1600 	movx	@dptr,a
   03E6 A3                 1601 	inc	dptr
   03E7 F0                 1602 	movx	@dptr,a
                           1603 ;	Peephole 112.b	changed ljmp to sjmp
   03E8 80 18              1604 	sjmp	00130$
   03EA                    1605 00102$:
                           1606 ;	main.c:194: printf_tiny("Please enter a valid command\r\n");
                           1607 ;	genIpush
   03EA 74r53              1608 	mov	a,#__str_31
   03EC C0 E0              1609 	push	acc
   03EE 74s05              1610 	mov	a,#(__str_31 >> 8)
   03F0 C0 E0              1611 	push	acc
                           1612 ;	genCall
   03F2 12s00r00           1613 	lcall	_printf_tiny
   03F5 15 81              1614 	dec	sp
   03F7 15 81              1615 	dec	sp
                           1616 ;	main.c:195: flag3=1;
                           1617 ;	genAssign
   03F9 90s00r37           1618 	mov	dptr,#_flag3
   03FC 74 01              1619 	mov	a,#0x01
   03FE F0                 1620 	movx	@dptr,a
   03FF E4                 1621 	clr	a
   0400 A3                 1622 	inc	dptr
   0401 F0                 1623 	movx	@dptr,a
   0402                    1624 00130$:
                           1625 ;	main.c:198: }while(flag3==1);
                           1626 ;	genAssign
   0402 90s00r37           1627 	mov	dptr,#_flag3
   0405 E0                 1628 	movx	a,@dptr
   0406 FB                 1629 	mov	r3,a
   0407 A3                 1630 	inc	dptr
   0408 E0                 1631 	movx	a,@dptr
   0409 FC                 1632 	mov	r4,a
                           1633 ;	genCmpEq
                           1634 ;	gencjneshort
   040A BB 01 06           1635 	cjne	r3,#0x01,00291$
   040D BC 00 03           1636 	cjne	r4,#0x00,00291$
   0410 02s01r0F           1637 	ljmp	00131$
   0413                    1638 00291$:
   0413 02s00r70           1639 	ljmp	00218$
   0416                    1640 00216$:
                           1641 ;	main.c:200: else if(cmd=='E')
                           1642 ;	genCmpEq
                           1643 ;	gencjneshort
   0416 BA 45 02           1644 	cjne	r2,#0x45,00292$
   0419 80 03              1645 	sjmp	00293$
   041B                    1646 00292$:
   041B 02s05r43           1647 	ljmp	00213$
   041E                    1648 00293$:
                           1649 ;	main.c:202: do{
                           1650 ;	genAssign
   041E 90s00r33           1651 	mov	dptr,#_flag1
   0421 E4                 1652 	clr	a
   0422 F0                 1653 	movx	@dptr,a
   0423 A3                 1654 	inc	dptr
   0424 F0                 1655 	movx	@dptr,a
   0425                    1656 00146$:
                           1657 ;	main.c:203: printf_tiny("********* EEPROM MENU *********\r\n");
                           1658 ;	genIpush
   0425 74r72              1659 	mov	a,#__str_32
   0427 C0 E0              1660 	push	acc
   0429 74s05              1661 	mov	a,#(__str_32 >> 8)
   042B C0 E0              1662 	push	acc
                           1663 ;	genCall
   042D 12s00r00           1664 	lcall	_printf_tiny
   0430 15 81              1665 	dec	sp
   0432 15 81              1666 	dec	sp
                           1667 ;	main.c:204: printf_tiny("********* SELECT 'W' for WRITE BYTE ***********\r\n");
                           1668 ;	genIpush
   0434 74r94              1669 	mov	a,#__str_33
   0436 C0 E0              1670 	push	acc
   0438 74s05              1671 	mov	a,#(__str_33 >> 8)
   043A C0 E0              1672 	push	acc
                           1673 ;	genCall
   043C 12s00r00           1674 	lcall	_printf_tiny
   043F 15 81              1675 	dec	sp
   0441 15 81              1676 	dec	sp
                           1677 ;	main.c:205: printf_tiny("********* SELECT 'R' for READ BYTE  ***********\r\n");
                           1678 ;	genIpush
   0443 74rC6              1679 	mov	a,#__str_34
   0445 C0 E0              1680 	push	acc
   0447 74s05              1681 	mov	a,#(__str_34 >> 8)
   0449 C0 E0              1682 	push	acc
                           1683 ;	genCall
   044B 12s00r00           1684 	lcall	_printf_tiny
   044E 15 81              1685 	dec	sp
   0450 15 81              1686 	dec	sp
                           1687 ;	main.c:206: printf_tiny("********* SELECT 'H' for HEXDUMP    ***********\r\n");
                           1688 ;	genIpush
   0452 74rF8              1689 	mov	a,#__str_35
   0454 C0 E0              1690 	push	acc
   0456 74s05              1691 	mov	a,#(__str_35 >> 8)
   0458 C0 E0              1692 	push	acc
                           1693 ;	genCall
   045A 12s00r00           1694 	lcall	_printf_tiny
   045D 15 81              1695 	dec	sp
   045F 15 81              1696 	dec	sp
                           1697 ;	main.c:207: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           1698 ;	genIpush
   0461 74r2A              1699 	mov	a,#__str_36
   0463 C0 E0              1700 	push	acc
   0465 74s06              1701 	mov	a,#(__str_36 >> 8)
   0467 C0 E0              1702 	push	acc
                           1703 ;	genCall
   0469 12s00r00           1704 	lcall	_printf_tiny
   046C 15 81              1705 	dec	sp
   046E 15 81              1706 	dec	sp
                           1707 ;	main.c:208: ecmd=getchar();                        //Enter a command in the EEPROM menu
                           1708 ;	genCall
   0470 12s00r00           1709 	lcall	_getchar
   0473 E5 82              1710 	mov	a,dpl
                           1711 ;	genAssign
   0475 90s00r52           1712 	mov	dptr,#_ecmd
   0478 F0                 1713 	movx	@dptr,a
                           1714 ;	main.c:209: printf_tiny("The command you entered is\t");
                           1715 ;	genIpush
   0479 74r05              1716 	mov	a,#__str_7
   047B C0 E0              1717 	push	acc
   047D 74s01              1718 	mov	a,#(__str_7 >> 8)
   047F C0 E0              1719 	push	acc
                           1720 ;	genCall
   0481 12s00r00           1721 	lcall	_printf_tiny
   0484 15 81              1722 	dec	sp
   0486 15 81              1723 	dec	sp
                           1724 ;	main.c:210: putchar(ecmd);
                           1725 ;	genAssign
   0488 90s00r52           1726 	mov	dptr,#_ecmd
   048B E0                 1727 	movx	a,@dptr
                           1728 ;	genCall
   048C FB                 1729 	mov	r3,a
                           1730 ;	Peephole 244.c	loading dpl from a instead of r3
   048D F5 82              1731 	mov	dpl,a
   048F 12s00r00           1732 	lcall	_putchar
                           1733 ;	main.c:211: printf_tiny("\r\n");
                           1734 ;	genIpush
   0492 74r2B              1735 	mov	a,#__str_1
   0494 C0 E0              1736 	push	acc
   0496 74s00              1737 	mov	a,#(__str_1 >> 8)
   0498 C0 E0              1738 	push	acc
                           1739 ;	genCall
   049A 12s00r00           1740 	lcall	_printf_tiny
   049D 15 81              1741 	dec	sp
   049F 15 81              1742 	dec	sp
                           1743 ;	main.c:212: eereset();
                           1744 ;	genCall
   04A1 12s00r00           1745 	lcall	_eereset
                           1746 ;	main.c:213: if(ecmd=='W')
                           1747 ;	genAssign
   04A4 90s00r52           1748 	mov	dptr,#_ecmd
   04A7 E0                 1749 	movx	a,@dptr
   04A8 FB                 1750 	mov	r3,a
                           1751 ;	genCmpEq
                           1752 ;	gencjneshort
                           1753 ;	Peephole 112.b	changed ljmp to sjmp
                           1754 ;	Peephole 198.b	optimized misc jump sequence
   04A9 BB 57 1B           1755 	cjne	r3,#0x57,00144$
                           1756 ;	Peephole 200.b	removed redundant sjmp
                           1757 ;	Peephole 300	removed redundant label 00294$
                           1758 ;	Peephole 300	removed redundant label 00295$
                           1759 ;	main.c:215: printf_tiny("***********WRITE BYTE MODE IN EEPROM**********\r\n");
                           1760 ;	genIpush
   04AC 74r5A              1761 	mov	a,#__str_37
   04AE C0 E0              1762 	push	acc
   04B0 74s06              1763 	mov	a,#(__str_37 >> 8)
   04B2 C0 E0              1764 	push	acc
                           1765 ;	genCall
   04B4 12s00r00           1766 	lcall	_printf_tiny
   04B7 15 81              1767 	dec	sp
   04B9 15 81              1768 	dec	sp
                           1769 ;	main.c:216: ewrite(); //function call to write to the EEPROM
                           1770 ;	genCall
   04BB 12s0ArFA           1771 	lcall	_ewrite
                           1772 ;	main.c:217: flag2=0;
                           1773 ;	genAssign
   04BE 90s00r35           1774 	mov	dptr,#_flag2
   04C1 E4                 1775 	clr	a
   04C2 F0                 1776 	movx	@dptr,a
   04C3 A3                 1777 	inc	dptr
   04C4 F0                 1778 	movx	@dptr,a
                           1779 ;	Peephole 112.b	changed ljmp to sjmp
   04C5 80 68              1780 	sjmp	00145$
   04C7                    1781 00144$:
                           1782 ;	main.c:219: else if(ecmd=='R')
                           1783 ;	genCmpEq
                           1784 ;	gencjneshort
                           1785 ;	Peephole 112.b	changed ljmp to sjmp
                           1786 ;	Peephole 198.b	optimized misc jump sequence
   04C7 BB 52 1B           1787 	cjne	r3,#0x52,00141$
                           1788 ;	Peephole 200.b	removed redundant sjmp
                           1789 ;	Peephole 300	removed redundant label 00296$
                           1790 ;	Peephole 300	removed redundant label 00297$
                           1791 ;	main.c:221: printf_tiny("***********READ BYTE MODE IN EEPROM**********\r\n");
                           1792 ;	genIpush
   04CA 74r8B              1793 	mov	a,#__str_38
   04CC C0 E0              1794 	push	acc
   04CE 74s06              1795 	mov	a,#(__str_38 >> 8)
   04D0 C0 E0              1796 	push	acc
                           1797 ;	genCall
   04D2 12s00r00           1798 	lcall	_printf_tiny
   04D5 15 81              1799 	dec	sp
   04D7 15 81              1800 	dec	sp
                           1801 ;	main.c:222: eread();//Function call to read from the EEPROM
                           1802 ;	genCall
   04D9 12s0CrA6           1803 	lcall	_eread
                           1804 ;	main.c:223: flag2=0;
                           1805 ;	genAssign
   04DC 90s00r35           1806 	mov	dptr,#_flag2
   04DF E4                 1807 	clr	a
   04E0 F0                 1808 	movx	@dptr,a
   04E1 A3                 1809 	inc	dptr
   04E2 F0                 1810 	movx	@dptr,a
                           1811 ;	Peephole 112.b	changed ljmp to sjmp
   04E3 80 4A              1812 	sjmp	00145$
   04E5                    1813 00141$:
                           1814 ;	main.c:225: else if(ecmd=='H')
                           1815 ;	genCmpEq
                           1816 ;	gencjneshort
                           1817 ;	Peephole 112.b	changed ljmp to sjmp
                           1818 ;	Peephole 198.b	optimized misc jump sequence
   04E5 BB 48 1B           1819 	cjne	r3,#0x48,00138$
                           1820 ;	Peephole 200.b	removed redundant sjmp
                           1821 ;	Peephole 300	removed redundant label 00298$
                           1822 ;	Peephole 300	removed redundant label 00299$
                           1823 ;	main.c:227: printf_tiny("***********HEXDUMP BYTE MODE IN EEPROM**********\r\n");
                           1824 ;	genIpush
   04E8 74rBB              1825 	mov	a,#__str_39
   04EA C0 E0              1826 	push	acc
   04EC 74s06              1827 	mov	a,#(__str_39 >> 8)
   04EE C0 E0              1828 	push	acc
                           1829 ;	genCall
   04F0 12s00r00           1830 	lcall	_printf_tiny
   04F3 15 81              1831 	dec	sp
   04F5 15 81              1832 	dec	sp
                           1833 ;	main.c:228: eseqread(); //Function call for sequential read of the EEPROM
                           1834 ;	genCall
   04F7 12s0Dr98           1835 	lcall	_eseqread
                           1836 ;	main.c:229: flag2=0;
                           1837 ;	genAssign
   04FA 90s00r35           1838 	mov	dptr,#_flag2
   04FD E4                 1839 	clr	a
   04FE F0                 1840 	movx	@dptr,a
   04FF A3                 1841 	inc	dptr
   0500 F0                 1842 	movx	@dptr,a
                           1843 ;	Peephole 112.b	changed ljmp to sjmp
   0501 80 2C              1844 	sjmp	00145$
   0503                    1845 00138$:
                           1846 ;	main.c:231: else if(ecmd=='M')
                           1847 ;	genCmpEq
                           1848 ;	gencjneshort
                           1849 ;	Peephole 112.b	changed ljmp to sjmp
                           1850 ;	Peephole 198.b	optimized misc jump sequence
   0503 BB 4D 11           1851 	cjne	r3,#0x4D,00135$
                           1852 ;	Peephole 200.b	removed redundant sjmp
                           1853 ;	Peephole 300	removed redundant label 00300$
                           1854 ;	Peephole 300	removed redundant label 00301$
                           1855 ;	main.c:233: printf_tiny("********Back to Main Menu**********");
                           1856 ;	genIpush
   0506 74rEE              1857 	mov	a,#__str_40
   0508 C0 E0              1858 	push	acc
   050A 74s06              1859 	mov	a,#(__str_40 >> 8)
   050C C0 E0              1860 	push	acc
                           1861 ;	genCall
   050E 12s00r00           1862 	lcall	_printf_tiny
   0511 15 81              1863 	dec	sp
   0513 15 81              1864 	dec	sp
                           1865 ;	Peephole 112.b	changed ljmp to sjmp
   0515 80 18              1866 	sjmp	00145$
   0517                    1867 00135$:
                           1868 ;	main.c:237: printf_tiny("Please enter a valid command\r\n");
                           1869 ;	genIpush
   0517 74r53              1870 	mov	a,#__str_31
   0519 C0 E0              1871 	push	acc
   051B 74s05              1872 	mov	a,#(__str_31 >> 8)
   051D C0 E0              1873 	push	acc
                           1874 ;	genCall
   051F 12s00r00           1875 	lcall	_printf_tiny
   0522 15 81              1876 	dec	sp
   0524 15 81              1877 	dec	sp
                           1878 ;	main.c:238: flag2=1;
                           1879 ;	genAssign
   0526 90s00r35           1880 	mov	dptr,#_flag2
   0529 74 01              1881 	mov	a,#0x01
   052B F0                 1882 	movx	@dptr,a
   052C E4                 1883 	clr	a
   052D A3                 1884 	inc	dptr
   052E F0                 1885 	movx	@dptr,a
   052F                    1886 00145$:
                           1887 ;	main.c:241: }while(flag2==1);
                           1888 ;	genAssign
   052F 90s00r35           1889 	mov	dptr,#_flag2
   0532 E0                 1890 	movx	a,@dptr
   0533 FB                 1891 	mov	r3,a
   0534 A3                 1892 	inc	dptr
   0535 E0                 1893 	movx	a,@dptr
   0536 FC                 1894 	mov	r4,a
                           1895 ;	genCmpEq
                           1896 ;	gencjneshort
   0537 BB 01 06           1897 	cjne	r3,#0x01,00302$
   053A BC 00 03           1898 	cjne	r4,#0x00,00302$
   053D 02s04r25           1899 	ljmp	00146$
   0540                    1900 00302$:
   0540 02s00r70           1901 	ljmp	00218$
   0543                    1902 00213$:
                           1903 ;	main.c:243: else if(cmd=='C')
                           1904 ;	genCmpEq
                           1905 ;	gencjneshort
   0543 BA 43 02           1906 	cjne	r2,#0x43,00303$
   0546 80 03              1907 	sjmp	00304$
   0548                    1908 00303$:
   0548 02s06r7C           1909 	ljmp	00210$
   054B                    1910 00304$:
                           1911 ;	main.c:245: do{
                           1912 ;	genAssign
   054B 90s00r33           1913 	mov	dptr,#_flag1
   054E E4                 1914 	clr	a
   054F F0                 1915 	movx	@dptr,a
   0550 A3                 1916 	inc	dptr
   0551 F0                 1917 	movx	@dptr,a
   0552                    1918 00161$:
                           1919 ;	main.c:246: printf_tiny("********* CLOCK MENU *********\r\n");
                           1920 ;	genIpush
   0552 74r12              1921 	mov	a,#__str_41
   0554 C0 E0              1922 	push	acc
   0556 74s07              1923 	mov	a,#(__str_41 >> 8)
   0558 C0 E0              1924 	push	acc
                           1925 ;	genCall
   055A 12s00r00           1926 	lcall	_printf_tiny
   055D 15 81              1927 	dec	sp
   055F 15 81              1928 	dec	sp
                           1929 ;	main.c:247: printf_tiny("********* SELECT 'R' for CLOCK RESET ***********\r\n");
                           1930 ;	genIpush
   0561 74r33              1931 	mov	a,#__str_42
   0563 C0 E0              1932 	push	acc
   0565 74s07              1933 	mov	a,#(__str_42 >> 8)
   0567 C0 E0              1934 	push	acc
                           1935 ;	genCall
   0569 12s00r00           1936 	lcall	_printf_tiny
   056C 15 81              1937 	dec	sp
   056E 15 81              1938 	dec	sp
                           1939 ;	main.c:248: printf_tiny("********* SELECT 'S' for CLOCK STOP  ***********\r\n");
                           1940 ;	genIpush
   0570 74r66              1941 	mov	a,#__str_43
   0572 C0 E0              1942 	push	acc
   0574 74s07              1943 	mov	a,#(__str_43 >> 8)
   0576 C0 E0              1944 	push	acc
                           1945 ;	genCall
   0578 12s00r00           1946 	lcall	_printf_tiny
   057B 15 81              1947 	dec	sp
   057D 15 81              1948 	dec	sp
                           1949 ;	main.c:249: printf_tiny("********* SELECT 'T' for CLOCK RESTART   ***********\r\n");
                           1950 ;	genIpush
   057F 74r99              1951 	mov	a,#__str_44
   0581 C0 E0              1952 	push	acc
   0583 74s07              1953 	mov	a,#(__str_44 >> 8)
   0585 C0 E0              1954 	push	acc
                           1955 ;	genCall
   0587 12s00r00           1956 	lcall	_printf_tiny
   058A 15 81              1957 	dec	sp
   058C 15 81              1958 	dec	sp
                           1959 ;	main.c:250: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           1960 ;	genIpush
   058E 74r2A              1961 	mov	a,#__str_36
   0590 C0 E0              1962 	push	acc
   0592 74s06              1963 	mov	a,#(__str_36 >> 8)
   0594 C0 E0              1964 	push	acc
                           1965 ;	genCall
   0596 12s00r00           1966 	lcall	_printf_tiny
   0599 15 81              1967 	dec	sp
   059B 15 81              1968 	dec	sp
                           1969 ;	main.c:251: flag2=0;
                           1970 ;	genAssign
   059D 90s00r35           1971 	mov	dptr,#_flag2
   05A0 E4                 1972 	clr	a
   05A1 F0                 1973 	movx	@dptr,a
   05A2 A3                 1974 	inc	dptr
   05A3 F0                 1975 	movx	@dptr,a
                           1976 ;	main.c:252: ccmd=getchar(); //Enter a command in the Clock menu
                           1977 ;	genCall
   05A4 12s00r00           1978 	lcall	_getchar
   05A7 E5 82              1979 	mov	a,dpl
                           1980 ;	genAssign
   05A9 90s00r54           1981 	mov	dptr,#_ccmd
   05AC F0                 1982 	movx	@dptr,a
                           1983 ;	main.c:253: printf_tiny("The command you entered is\t");
                           1984 ;	genIpush
   05AD 74r05              1985 	mov	a,#__str_7
   05AF C0 E0              1986 	push	acc
   05B1 74s01              1987 	mov	a,#(__str_7 >> 8)
   05B3 C0 E0              1988 	push	acc
                           1989 ;	genCall
   05B5 12s00r00           1990 	lcall	_printf_tiny
   05B8 15 81              1991 	dec	sp
   05BA 15 81              1992 	dec	sp
                           1993 ;	main.c:254: putchar(ccmd);
                           1994 ;	genAssign
   05BC 90s00r54           1995 	mov	dptr,#_ccmd
   05BF E0                 1996 	movx	a,@dptr
                           1997 ;	genCall
   05C0 FB                 1998 	mov	r3,a
                           1999 ;	Peephole 244.c	loading dpl from a instead of r3
   05C1 F5 82              2000 	mov	dpl,a
   05C3 12s00r00           2001 	lcall	_putchar
                           2002 ;	main.c:255: printf_tiny("\r\n");
                           2003 ;	genIpush
   05C6 74r2B              2004 	mov	a,#__str_1
   05C8 C0 E0              2005 	push	acc
   05CA 74s00              2006 	mov	a,#(__str_1 >> 8)
   05CC C0 E0              2007 	push	acc
                           2008 ;	genCall
   05CE 12s00r00           2009 	lcall	_printf_tiny
   05D1 15 81              2010 	dec	sp
   05D3 15 81              2011 	dec	sp
                           2012 ;	main.c:256: if(ccmd=='R')
                           2013 ;	genAssign
   05D5 90s00r54           2014 	mov	dptr,#_ccmd
   05D8 E0                 2015 	movx	a,@dptr
   05D9 FB                 2016 	mov	r3,a
                           2017 ;	genCmpEq
                           2018 ;	gencjneshort
                           2019 ;	Peephole 112.b	changed ljmp to sjmp
                           2020 ;	Peephole 198.b	optimized misc jump sequence
   05DA BB 52 1B           2021 	cjne	r3,#0x52,00159$
                           2022 ;	Peephole 200.b	removed redundant sjmp
                           2023 ;	Peephole 300	removed redundant label 00305$
                           2024 ;	Peephole 300	removed redundant label 00306$
                           2025 ;	main.c:258: printf_tiny("*********** CLOCK RESET **********\r\n");
                           2026 ;	genIpush
   05DD 74rD0              2027 	mov	a,#__str_45
   05DF C0 E0              2028 	push	acc
   05E1 74s07              2029 	mov	a,#(__str_45 >> 8)
   05E3 C0 E0              2030 	push	acc
                           2031 ;	genCall
   05E5 12s00r00           2032 	lcall	_printf_tiny
   05E8 15 81              2033 	dec	sp
   05EA 15 81              2034 	dec	sp
                           2035 ;	main.c:259: clock_reset(); //Function call for clock reset and to start from 00:00.0
                           2036 ;	genCall
   05EC 12s00r00           2037 	lcall	_clock_reset
                           2038 ;	main.c:260: flag2=0;
                           2039 ;	genAssign
   05EF 90s00r35           2040 	mov	dptr,#_flag2
   05F2 E4                 2041 	clr	a
   05F3 F0                 2042 	movx	@dptr,a
   05F4 A3                 2043 	inc	dptr
   05F5 F0                 2044 	movx	@dptr,a
                           2045 ;	Peephole 112.b	changed ljmp to sjmp
   05F6 80 70              2046 	sjmp	00160$
   05F8                    2047 00159$:
                           2048 ;	main.c:262: else if(ccmd=='S')
                           2049 ;	genCmpEq
                           2050 ;	gencjneshort
                           2051 ;	Peephole 112.b	changed ljmp to sjmp
                           2052 ;	Peephole 198.b	optimized misc jump sequence
   05F8 BB 53 1F           2053 	cjne	r3,#0x53,00156$
                           2054 ;	Peephole 200.b	removed redundant sjmp
                           2055 ;	Peephole 300	removed redundant label 00307$
                           2056 ;	Peephole 300	removed redundant label 00308$
                           2057 ;	main.c:264: printf_tiny("*********** CLOCK STOP **********\r\n");
                           2058 ;	genIpush
   05FB 74rF5              2059 	mov	a,#__str_46
   05FD C0 E0              2060 	push	acc
   05FF 74s07              2061 	mov	a,#(__str_46 >> 8)
   0601 C0 E0              2062 	push	acc
                           2063 ;	genCall
   0603 12s00r00           2064 	lcall	_printf_tiny
   0606 15 81              2065 	dec	sp
   0608 15 81              2066 	dec	sp
                           2067 ;	main.c:265: IE=0x00;         //Disable timer and the interrupt to stop the clock
                           2068 ;	genAssign
   060A 75 A8 00           2069 	mov	_IE,#0x00
                           2070 ;	main.c:266: EA=0;
                           2071 ;	genAssign
   060D C2 AF              2072 	clr	_EA
                           2073 ;	main.c:267: TR0=0;
                           2074 ;	genAssign
   060F C2 8C              2075 	clr	_TR0
                           2076 ;	main.c:268: flag2=0;
                           2077 ;	genAssign
   0611 90s00r35           2078 	mov	dptr,#_flag2
   0614 E4                 2079 	clr	a
   0615 F0                 2080 	movx	@dptr,a
   0616 A3                 2081 	inc	dptr
   0617 F0                 2082 	movx	@dptr,a
                           2083 ;	Peephole 112.b	changed ljmp to sjmp
   0618 80 4E              2084 	sjmp	00160$
   061A                    2085 00156$:
                           2086 ;	main.c:270: else if(ccmd=='T')
                           2087 ;	genCmpEq
                           2088 ;	gencjneshort
                           2089 ;	Peephole 112.b	changed ljmp to sjmp
                           2090 ;	Peephole 198.b	optimized misc jump sequence
   061A BB 54 1F           2091 	cjne	r3,#0x54,00153$
                           2092 ;	Peephole 200.b	removed redundant sjmp
                           2093 ;	Peephole 300	removed redundant label 00309$
                           2094 ;	Peephole 300	removed redundant label 00310$
                           2095 ;	main.c:272: printf_tiny("*********** CLOCK RESTART **********\r\n");
                           2096 ;	genIpush
   061D 74r19              2097 	mov	a,#__str_47
   061F C0 E0              2098 	push	acc
   0621 74s08              2099 	mov	a,#(__str_47 >> 8)
   0623 C0 E0              2100 	push	acc
                           2101 ;	genCall
   0625 12s00r00           2102 	lcall	_printf_tiny
   0628 15 81              2103 	dec	sp
   062A 15 81              2104 	dec	sp
                           2105 ;	main.c:273: IE=0x83;       //Enable timer and the interrupt to restart the clock
                           2106 ;	genAssign
   062C 75 A8 83           2107 	mov	_IE,#0x83
                           2108 ;	main.c:274: EA=1;
                           2109 ;	genAssign
   062F D2 AF              2110 	setb	_EA
                           2111 ;	main.c:275: TR0=1;
                           2112 ;	genAssign
   0631 D2 8C              2113 	setb	_TR0
                           2114 ;	main.c:276: flag2=0;
                           2115 ;	genAssign
   0633 90s00r35           2116 	mov	dptr,#_flag2
   0636 E4                 2117 	clr	a
   0637 F0                 2118 	movx	@dptr,a
   0638 A3                 2119 	inc	dptr
   0639 F0                 2120 	movx	@dptr,a
                           2121 ;	Peephole 112.b	changed ljmp to sjmp
   063A 80 2C              2122 	sjmp	00160$
   063C                    2123 00153$:
                           2124 ;	main.c:278: else if(ccmd=='M')
                           2125 ;	genCmpEq
                           2126 ;	gencjneshort
                           2127 ;	Peephole 112.b	changed ljmp to sjmp
                           2128 ;	Peephole 198.b	optimized misc jump sequence
   063C BB 4D 11           2129 	cjne	r3,#0x4D,00150$
                           2130 ;	Peephole 200.b	removed redundant sjmp
                           2131 ;	Peephole 300	removed redundant label 00311$
                           2132 ;	Peephole 300	removed redundant label 00312$
                           2133 ;	main.c:280: printf_tiny("********Back to Main Menu**********");
                           2134 ;	genIpush
   063F 74rEE              2135 	mov	a,#__str_40
   0641 C0 E0              2136 	push	acc
   0643 74s06              2137 	mov	a,#(__str_40 >> 8)
   0645 C0 E0              2138 	push	acc
                           2139 ;	genCall
   0647 12s00r00           2140 	lcall	_printf_tiny
   064A 15 81              2141 	dec	sp
   064C 15 81              2142 	dec	sp
                           2143 ;	Peephole 112.b	changed ljmp to sjmp
   064E 80 18              2144 	sjmp	00160$
   0650                    2145 00150$:
                           2146 ;	main.c:284: printf_tiny("Please enter a valid command\r\n");
                           2147 ;	genIpush
   0650 74r53              2148 	mov	a,#__str_31
   0652 C0 E0              2149 	push	acc
   0654 74s05              2150 	mov	a,#(__str_31 >> 8)
   0656 C0 E0              2151 	push	acc
                           2152 ;	genCall
   0658 12s00r00           2153 	lcall	_printf_tiny
   065B 15 81              2154 	dec	sp
   065D 15 81              2155 	dec	sp
                           2156 ;	main.c:285: flag2=1;
                           2157 ;	genAssign
   065F 90s00r35           2158 	mov	dptr,#_flag2
   0662 74 01              2159 	mov	a,#0x01
   0664 F0                 2160 	movx	@dptr,a
   0665 E4                 2161 	clr	a
   0666 A3                 2162 	inc	dptr
   0667 F0                 2163 	movx	@dptr,a
   0668                    2164 00160$:
                           2165 ;	main.c:288: }while(flag2==1);
                           2166 ;	genAssign
   0668 90s00r35           2167 	mov	dptr,#_flag2
   066B E0                 2168 	movx	a,@dptr
   066C FB                 2169 	mov	r3,a
   066D A3                 2170 	inc	dptr
   066E E0                 2171 	movx	a,@dptr
   066F FC                 2172 	mov	r4,a
                           2173 ;	genCmpEq
                           2174 ;	gencjneshort
   0670 BB 01 06           2175 	cjne	r3,#0x01,00313$
   0673 BC 00 03           2176 	cjne	r4,#0x00,00313$
   0676 02s05r52           2177 	ljmp	00161$
   0679                    2178 00313$:
   0679 02s00r70           2179 	ljmp	00218$
   067C                    2180 00210$:
                           2181 ;	main.c:290: else if(cmd=='I')
                           2182 ;	genCmpEq
                           2183 ;	gencjneshort
   067C BA 49 02           2184 	cjne	r2,#0x49,00314$
   067F 80 03              2185 	sjmp	00315$
   0681                    2186 00314$:
   0681 02s0ArDF           2187 	ljmp	00207$
   0684                    2188 00315$:
                           2189 ;	main.c:292: do{
                           2190 ;	genAssign
   0684 90s00r33           2191 	mov	dptr,#_flag1
   0687 E4                 2192 	clr	a
   0688 F0                 2193 	movx	@dptr,a
   0689 A3                 2194 	inc	dptr
   068A F0                 2195 	movx	@dptr,a
   068B                    2196 00203$:
                           2197 ;	main.c:293: printf_tiny("********* I/O EXPANDER MENU *********\r\n");
                           2198 ;	genIpush
   068B 74r40              2199 	mov	a,#__str_48
   068D C0 E0              2200 	push	acc
   068F 74s08              2201 	mov	a,#(__str_48 >> 8)
   0691 C0 E0              2202 	push	acc
                           2203 ;	genCall
   0693 12s00r00           2204 	lcall	_printf_tiny
   0696 15 81              2205 	dec	sp
   0698 15 81              2206 	dec	sp
                           2207 ;	main.c:294: printf_tiny("********* SELECT 'W' for I/O EXPANDER WRITE  ***********\r\n");
                           2208 ;	genIpush
   069A 74r68              2209 	mov	a,#__str_49
   069C C0 E0              2210 	push	acc
   069E 74s08              2211 	mov	a,#(__str_49 >> 8)
   06A0 C0 E0              2212 	push	acc
                           2213 ;	genCall
   06A2 12s00r00           2214 	lcall	_printf_tiny
   06A5 15 81              2215 	dec	sp
   06A7 15 81              2216 	dec	sp
                           2217 ;	main.c:295: printf_tiny("********* SELECT 'R' for I/O EXPANDER STATUS READ  ***********\r\n");
                           2218 ;	genIpush
   06A9 74rA3              2219 	mov	a,#__str_50
   06AB C0 E0              2220 	push	acc
   06AD 74s08              2221 	mov	a,#(__str_50 >> 8)
   06AF C0 E0              2222 	push	acc
                           2223 ;	genCall
   06B1 12s00r00           2224 	lcall	_printf_tiny
   06B4 15 81              2225 	dec	sp
   06B6 15 81              2226 	dec	sp
                           2227 ;	main.c:296: printf_tiny("********* SELECT 'D' for I/O PORT PIN DIRECTION CHANGE   ***********\r\n");
                           2228 ;	genIpush
   06B8 74rE4              2229 	mov	a,#__str_51
   06BA C0 E0              2230 	push	acc
   06BC 74s08              2231 	mov	a,#(__str_51 >> 8)
   06BE C0 E0              2232 	push	acc
                           2233 ;	genCall
   06C0 12s00r00           2234 	lcall	_printf_tiny
   06C3 15 81              2235 	dec	sp
   06C5 15 81              2236 	dec	sp
                           2237 ;	main.c:297: printf_tiny("********* SELECT 'C' for I/O COUNTER RESET   ***********\r\n");
                           2238 ;	genIpush
   06C7 74r2B              2239 	mov	a,#__str_52
   06C9 C0 E0              2240 	push	acc
   06CB 74s09              2241 	mov	a,#(__str_52 >> 8)
   06CD C0 E0              2242 	push	acc
                           2243 ;	genCall
   06CF 12s00r00           2244 	lcall	_printf_tiny
   06D2 15 81              2245 	dec	sp
   06D4 15 81              2246 	dec	sp
                           2247 ;	main.c:298: printf_tiny("********* SELECT 'I' for I/O DISPLAY DIRECTION STATUS   ***********\r\n");
                           2248 ;	genIpush
   06D6 74r66              2249 	mov	a,#__str_53
   06D8 C0 E0              2250 	push	acc
   06DA 74s09              2251 	mov	a,#(__str_53 >> 8)
   06DC C0 E0              2252 	push	acc
                           2253 ;	genCall
   06DE 12s00r00           2254 	lcall	_printf_tiny
   06E1 15 81              2255 	dec	sp
   06E3 15 81              2256 	dec	sp
                           2257 ;	main.c:299: printf_tiny("********* SELECT 'S' for I/O DISPLAY DATA STATUS  ***********\r\n");
                           2258 ;	genIpush
   06E5 74rAC              2259 	mov	a,#__str_54
   06E7 C0 E0              2260 	push	acc
   06E9 74s09              2261 	mov	a,#(__str_54 >> 8)
   06EB C0 E0              2262 	push	acc
                           2263 ;	genCall
   06ED 12s00r00           2264 	lcall	_printf_tiny
   06F0 15 81              2265 	dec	sp
   06F2 15 81              2266 	dec	sp
                           2267 ;	main.c:300: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           2268 ;	genIpush
   06F4 74r2A              2269 	mov	a,#__str_36
   06F6 C0 E0              2270 	push	acc
   06F8 74s06              2271 	mov	a,#(__str_36 >> 8)
   06FA C0 E0              2272 	push	acc
                           2273 ;	genCall
   06FC 12s00r00           2274 	lcall	_printf_tiny
   06FF 15 81              2275 	dec	sp
   0701 15 81              2276 	dec	sp
                           2277 ;	main.c:301: flag2=0;
                           2278 ;	genAssign
   0703 90s00r35           2279 	mov	dptr,#_flag2
   0706 E4                 2280 	clr	a
   0707 F0                 2281 	movx	@dptr,a
   0708 A3                 2282 	inc	dptr
   0709 F0                 2283 	movx	@dptr,a
                           2284 ;	main.c:302: icmd=getchar(); //Enter a command in the I/O expander menu
                           2285 ;	genCall
   070A 12s00r00           2286 	lcall	_getchar
   070D E5 82              2287 	mov	a,dpl
                           2288 ;	genAssign
   070F 90s00r55           2289 	mov	dptr,#_icmd
   0712 F0                 2290 	movx	@dptr,a
                           2291 ;	main.c:303: printf_tiny("The command you entered is\t");
                           2292 ;	genIpush
   0713 74r05              2293 	mov	a,#__str_7
   0715 C0 E0              2294 	push	acc
   0717 74s01              2295 	mov	a,#(__str_7 >> 8)
   0719 C0 E0              2296 	push	acc
                           2297 ;	genCall
   071B 12s00r00           2298 	lcall	_printf_tiny
   071E 15 81              2299 	dec	sp
   0720 15 81              2300 	dec	sp
                           2301 ;	main.c:304: putchar(icmd);
                           2302 ;	genAssign
   0722 90s00r55           2303 	mov	dptr,#_icmd
   0725 E0                 2304 	movx	a,@dptr
                           2305 ;	genCall
   0726 FA                 2306 	mov	r2,a
                           2307 ;	Peephole 244.c	loading dpl from a instead of r2
   0727 F5 82              2308 	mov	dpl,a
   0729 12s00r00           2309 	lcall	_putchar
                           2310 ;	main.c:305: printf_tiny("\r\n");
                           2311 ;	genIpush
   072C 74r2B              2312 	mov	a,#__str_1
   072E C0 E0              2313 	push	acc
   0730 74s00              2314 	mov	a,#(__str_1 >> 8)
   0732 C0 E0              2315 	push	acc
                           2316 ;	genCall
   0734 12s00r00           2317 	lcall	_printf_tiny
   0737 15 81              2318 	dec	sp
   0739 15 81              2319 	dec	sp
                           2320 ;	main.c:306: if(icmd=='W')
                           2321 ;	genAssign
   073B 90s00r55           2322 	mov	dptr,#_icmd
   073E E0                 2323 	movx	a,@dptr
   073F FA                 2324 	mov	r2,a
                           2325 ;	genCmpEq
                           2326 ;	gencjneshort
   0740 BA 57 02           2327 	cjne	r2,#0x57,00316$
   0743 80 03              2328 	sjmp	00317$
   0745                    2329 00316$:
   0745 02s09rD0           2330 	ljmp	00201$
   0748                    2331 00317$:
                           2332 ;	main.c:308: printf_tiny("*********** I/O EXPANDER WRITE BYTE **********\r\n");
                           2333 ;	genIpush
   0748 74rEC              2334 	mov	a,#__str_55
   074A C0 E0              2335 	push	acc
   074C 74s09              2336 	mov	a,#(__str_55 >> 8)
   074E C0 E0              2337 	push	acc
                           2338 ;	genCall
   0750 12s00r00           2339 	lcall	_printf_tiny
   0753 15 81              2340 	dec	sp
   0755 15 81              2341 	dec	sp
                           2342 ;	main.c:309: displaystatus(); //Function call to display the direction of the port pins : Output / Input
                           2343 ;	genCall
   0757 12s13r26           2344 	lcall	_displaystatus
                           2345 ;	main.c:310: printf_tiny("Enter a output port pin number between 1 to 3 you want to write to\r\n");
                           2346 ;	genIpush
   075A 74r1D              2347 	mov	a,#__str_56
   075C C0 E0              2348 	push	acc
   075E 74s0A              2349 	mov	a,#(__str_56 >> 8)
   0760 C0 E0              2350 	push	acc
                           2351 ;	genCall
   0762 12s00r00           2352 	lcall	_printf_tiny
   0765 15 81              2353 	dec	sp
   0767 15 81              2354 	dec	sp
                           2355 ;	main.c:311: do{
   0769                    2356 00171$:
                           2357 ;	main.c:312: pin1=getstr(); //Enter a pin number to write to it
                           2358 ;	genCall
   0769 12s00r00           2359 	lcall	_getstr
   076C AB 82              2360 	mov	r3,dpl
   076E AC 83              2361 	mov	r4,dph
   0770 AD F0              2362 	mov	r5,b
                           2363 ;	genAssign
   0772 90s00r57           2364 	mov	dptr,#_pin1
   0775 EB                 2365 	mov	a,r3
   0776 F0                 2366 	movx	@dptr,a
   0777 A3                 2367 	inc	dptr
   0778 EC                 2368 	mov	a,r4
   0779 F0                 2369 	movx	@dptr,a
   077A A3                 2370 	inc	dptr
   077B ED                 2371 	mov	a,r5
   077C F0                 2372 	movx	@dptr,a
                           2373 ;	main.c:313: printf_tiny("The pin you have selected is:");
                           2374 ;	genIpush
   077D 74r62              2375 	mov	a,#__str_57
   077F C0 E0              2376 	push	acc
   0781 74s0A              2377 	mov	a,#(__str_57 >> 8)
   0783 C0 E0              2378 	push	acc
                           2379 ;	genCall
   0785 12s00r00           2380 	lcall	_printf_tiny
   0788 15 81              2381 	dec	sp
   078A 15 81              2382 	dec	sp
                           2383 ;	main.c:314: putstr(pin1);
                           2384 ;	genAssign
   078C 90s00r57           2385 	mov	dptr,#_pin1
   078F E0                 2386 	movx	a,@dptr
   0790 FB                 2387 	mov	r3,a
   0791 A3                 2388 	inc	dptr
   0792 E0                 2389 	movx	a,@dptr
   0793 FC                 2390 	mov	r4,a
   0794 A3                 2391 	inc	dptr
   0795 E0                 2392 	movx	a,@dptr
   0796 FD                 2393 	mov	r5,a
                           2394 ;	genCall
   0797 8B 82              2395 	mov	dpl,r3
   0799 8C 83              2396 	mov	dph,r4
   079B 8D F0              2397 	mov	b,r5
   079D 12s00r00           2398 	lcall	_putstr
                           2399 ;	main.c:315: printf_tiny("\r\n");
                           2400 ;	genIpush
   07A0 74r2B              2401 	mov	a,#__str_1
   07A2 C0 E0              2402 	push	acc
   07A4 74s00              2403 	mov	a,#(__str_1 >> 8)
   07A6 C0 E0              2404 	push	acc
                           2405 ;	genCall
   07A8 12s00r00           2406 	lcall	_printf_tiny
   07AB 15 81              2407 	dec	sp
   07AD 15 81              2408 	dec	sp
                           2409 ;	main.c:316: pin1_int=atoi(pin1); //Convert ascii to integer
                           2410 ;	genAssign
   07AF 90s00r57           2411 	mov	dptr,#_pin1
   07B2 E0                 2412 	movx	a,@dptr
   07B3 FB                 2413 	mov	r3,a
   07B4 A3                 2414 	inc	dptr
   07B5 E0                 2415 	movx	a,@dptr
   07B6 FC                 2416 	mov	r4,a
   07B7 A3                 2417 	inc	dptr
   07B8 E0                 2418 	movx	a,@dptr
   07B9 FD                 2419 	mov	r5,a
                           2420 ;	genCall
   07BA 8B 82              2421 	mov	dpl,r3
   07BC 8C 83              2422 	mov	dph,r4
   07BE 8D F0              2423 	mov	b,r5
   07C0 12s00r00           2424 	lcall	_atoi
   07C3 AB 82              2425 	mov	r3,dpl
   07C5 AC 83              2426 	mov	r4,dph
                           2427 ;	genAssign
   07C7 90s00r3B           2428 	mov	dptr,#_pin1_int
   07CA EB                 2429 	mov	a,r3
   07CB F0                 2430 	movx	@dptr,a
   07CC A3                 2431 	inc	dptr
   07CD EC                 2432 	mov	a,r4
   07CE F0                 2433 	movx	@dptr,a
                           2434 ;	main.c:317: if(pinstatus[pin1_int]==1 || pin1_int<1 || pin1_int>3 )
                           2435 ;	genPlus
                           2436 ;	Peephole 236.g	used r3 instead of ar3
   07CF EB                 2437 	mov	a,r3
   07D0 24r84              2438 	add	a,#_pinstatus
   07D2 F5 82              2439 	mov	dpl,a
                           2440 ;	Peephole 236.g	used r4 instead of ar4
   07D4 EC                 2441 	mov	a,r4
   07D5 34s00              2442 	addc	a,#(_pinstatus >> 8)
   07D7 F5 83              2443 	mov	dph,a
                           2444 ;	genPointerGet
                           2445 ;	genFarPointerGet
   07D9 E0                 2446 	movx	a,@dptr
   07DA FD                 2447 	mov	r5,a
                           2448 ;	genCmpEq
                           2449 ;	gencjneshort
   07DB BD 01 02           2450 	cjne	r5,#0x01,00318$
                           2451 ;	Peephole 112.b	changed ljmp to sjmp
   07DE 80 19              2452 	sjmp	00164$
   07E0                    2453 00318$:
                           2454 ;	genCmpLt
                           2455 ;	genCmp
   07E0 C3                 2456 	clr	c
   07E1 EB                 2457 	mov	a,r3
   07E2 94 01              2458 	subb	a,#0x01
   07E4 EC                 2459 	mov	a,r4
   07E5 64 80              2460 	xrl	a,#0x80
   07E7 94 80              2461 	subb	a,#0x80
                           2462 ;	genIfxJump
                           2463 ;	Peephole 112.b	changed ljmp to sjmp
                           2464 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2465 ;	genCmpGt
                           2466 ;	genCmp
   07E9 40 0E              2467 	jc	00164$
                           2468 ;	Peephole 300	removed redundant label 00319$
                           2469 ;	Peephole 256.a	removed redundant clr c
   07EB 74 03              2470 	mov	a,#0x03
   07ED 9B                 2471 	subb	a,r3
                           2472 ;	Peephole 159	avoided xrl during execution
   07EE 74 80              2473 	mov	a,#(0x00 ^ 0x80)
   07F0 8C F0              2474 	mov	b,r4
   07F2 63 F0 80           2475 	xrl	b,#0x80
   07F5 95 F0              2476 	subb	a,b
                           2477 ;	genIfxJump
                           2478 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07F7 50 11              2479 	jnc	00165$
                           2480 ;	Peephole 300	removed redundant label 00320$
   07F9                    2481 00164$:
                           2482 ;	main.c:318: printf_tiny("Please Enter a Output Pin between 1 to 3\r\n");
                           2483 ;	genIpush
   07F9 74r80              2484 	mov	a,#__str_58
   07FB C0 E0              2485 	push	acc
   07FD 74s0A              2486 	mov	a,#(__str_58 >> 8)
   07FF C0 E0              2487 	push	acc
                           2488 ;	genCall
   0801 12s00r00           2489 	lcall	_printf_tiny
   0804 15 81              2490 	dec	sp
   0806 15 81              2491 	dec	sp
                           2492 ;	Peephole 112.b	changed ljmp to sjmp
   0808 80 0F              2493 	sjmp	00172$
   080A                    2494 00165$:
                           2495 ;	main.c:320: printf_tiny("\n\n\r\t Select a bit to write to the pin:  0. and  1. \r\n\t");
                           2496 ;	genIpush
   080A 74rAB              2497 	mov	a,#__str_59
   080C C0 E0              2498 	push	acc
   080E 74s0A              2499 	mov	a,#(__str_59 >> 8)
   0810 C0 E0              2500 	push	acc
                           2501 ;	genCall
   0812 12s00r00           2502 	lcall	_printf_tiny
   0815 15 81              2503 	dec	sp
   0817 15 81              2504 	dec	sp
   0819                    2505 00172$:
                           2506 ;	main.c:321: }while(pinstatus[pin1_int]==1 || pin1_int<1 || pin1_int>3 );
                           2507 ;	genAssign
   0819 90s00r3B           2508 	mov	dptr,#_pin1_int
   081C E0                 2509 	movx	a,@dptr
   081D FB                 2510 	mov	r3,a
   081E A3                 2511 	inc	dptr
   081F E0                 2512 	movx	a,@dptr
   0820 FC                 2513 	mov	r4,a
                           2514 ;	genPlus
                           2515 ;	Peephole 236.g	used r3 instead of ar3
   0821 EB                 2516 	mov	a,r3
   0822 24r84              2517 	add	a,#_pinstatus
   0824 F5 82              2518 	mov	dpl,a
                           2519 ;	Peephole 236.g	used r4 instead of ar4
   0826 EC                 2520 	mov	a,r4
   0827 34s00              2521 	addc	a,#(_pinstatus >> 8)
   0829 F5 83              2522 	mov	dph,a
                           2523 ;	genPointerGet
                           2524 ;	genFarPointerGet
   082B E0                 2525 	movx	a,@dptr
   082C FD                 2526 	mov	r5,a
                           2527 ;	genCmpEq
                           2528 ;	gencjneshort
   082D BD 01 03           2529 	cjne	r5,#0x01,00321$
   0830 02s07r69           2530 	ljmp	00171$
   0833                    2531 00321$:
                           2532 ;	genCmpLt
                           2533 ;	genCmp
   0833 C3                 2534 	clr	c
   0834 EB                 2535 	mov	a,r3
   0835 94 01              2536 	subb	a,#0x01
   0837 EC                 2537 	mov	a,r4
   0838 64 80              2538 	xrl	a,#0x80
   083A 94 80              2539 	subb	a,#0x80
                           2540 ;	genIfxJump
   083C 50 03              2541 	jnc	00322$
   083E 02s07r69           2542 	ljmp	00171$
   0841                    2543 00322$:
                           2544 ;	genCmpGt
                           2545 ;	genCmp
   0841 C3                 2546 	clr	c
   0842 74 03              2547 	mov	a,#0x03
   0844 9B                 2548 	subb	a,r3
                           2549 ;	Peephole 159	avoided xrl during execution
   0845 74 80              2550 	mov	a,#(0x00 ^ 0x80)
   0847 8C F0              2551 	mov	b,r4
   0849 63 F0 80           2552 	xrl	b,#0x80
   084C 95 F0              2553 	subb	a,b
                           2554 ;	genIfxJump
   084E 50 03              2555 	jnc	00323$
   0850 02s07r69           2556 	ljmp	00171$
   0853                    2557 00323$:
                           2558 ;	main.c:324: do
   0853                    2559 00176$:
                           2560 ;	main.c:326: dir1=getstr(); //Enter a value to write to the port pin
                           2561 ;	genCall
   0853 12s00r00           2562 	lcall	_getstr
   0856 AB 82              2563 	mov	r3,dpl
   0858 AC 83              2564 	mov	r4,dph
   085A AD F0              2565 	mov	r5,b
                           2566 ;	genAssign
   085C 90s00r5A           2567 	mov	dptr,#_dir1
   085F EB                 2568 	mov	a,r3
   0860 F0                 2569 	movx	@dptr,a
   0861 A3                 2570 	inc	dptr
   0862 EC                 2571 	mov	a,r4
   0863 F0                 2572 	movx	@dptr,a
   0864 A3                 2573 	inc	dptr
   0865 ED                 2574 	mov	a,r5
   0866 F0                 2575 	movx	@dptr,a
                           2576 ;	main.c:327: printf_tiny("The bit you have selected is:");
                           2577 ;	genIpush
   0867 74rE2              2578 	mov	a,#__str_60
   0869 C0 E0              2579 	push	acc
   086B 74s0A              2580 	mov	a,#(__str_60 >> 8)
   086D C0 E0              2581 	push	acc
                           2582 ;	genCall
   086F 12s00r00           2583 	lcall	_printf_tiny
   0872 15 81              2584 	dec	sp
   0874 15 81              2585 	dec	sp
                           2586 ;	main.c:328: putstr(dir1);
                           2587 ;	genAssign
   0876 90s00r5A           2588 	mov	dptr,#_dir1
   0879 E0                 2589 	movx	a,@dptr
   087A FB                 2590 	mov	r3,a
   087B A3                 2591 	inc	dptr
   087C E0                 2592 	movx	a,@dptr
   087D FC                 2593 	mov	r4,a
   087E A3                 2594 	inc	dptr
   087F E0                 2595 	movx	a,@dptr
   0880 FD                 2596 	mov	r5,a
                           2597 ;	genCall
   0881 8B 82              2598 	mov	dpl,r3
   0883 8C 83              2599 	mov	dph,r4
   0885 8D F0              2600 	mov	b,r5
   0887 12s00r00           2601 	lcall	_putstr
                           2602 ;	main.c:329: printf_tiny("\r\n");
                           2603 ;	genIpush
   088A 74r2B              2604 	mov	a,#__str_1
   088C C0 E0              2605 	push	acc
   088E 74s00              2606 	mov	a,#(__str_1 >> 8)
   0890 C0 E0              2607 	push	acc
                           2608 ;	genCall
   0892 12s00r00           2609 	lcall	_printf_tiny
   0895 15 81              2610 	dec	sp
   0897 15 81              2611 	dec	sp
                           2612 ;	main.c:330: dir1_int=atoi(dir1); //Convert ascii to integer
                           2613 ;	genAssign
   0899 90s00r5A           2614 	mov	dptr,#_dir1
   089C E0                 2615 	movx	a,@dptr
   089D FB                 2616 	mov	r3,a
   089E A3                 2617 	inc	dptr
   089F E0                 2618 	movx	a,@dptr
   08A0 FC                 2619 	mov	r4,a
   08A1 A3                 2620 	inc	dptr
   08A2 E0                 2621 	movx	a,@dptr
   08A3 FD                 2622 	mov	r5,a
                           2623 ;	genCall
   08A4 8B 82              2624 	mov	dpl,r3
   08A6 8C 83              2625 	mov	dph,r4
   08A8 8D F0              2626 	mov	b,r5
   08AA 12s00r00           2627 	lcall	_atoi
   08AD AB 82              2628 	mov	r3,dpl
   08AF AC 83              2629 	mov	r4,dph
                           2630 ;	genAssign
   08B1 90s00r3D           2631 	mov	dptr,#_dir1_int
   08B4 EB                 2632 	mov	a,r3
   08B5 F0                 2633 	movx	@dptr,a
   08B6 A3                 2634 	inc	dptr
   08B7 EC                 2635 	mov	a,r4
   08B8 F0                 2636 	movx	@dptr,a
                           2637 ;	main.c:331: if(dir1_int>1){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 or 1: \r\n");}
                           2638 ;	genCmpGt
                           2639 ;	genCmp
   08B9 C3                 2640 	clr	c
   08BA 74 01              2641 	mov	a,#0x01
   08BC 9B                 2642 	subb	a,r3
                           2643 ;	Peephole 159	avoided xrl during execution
   08BD 74 80              2644 	mov	a,#(0x00 ^ 0x80)
   08BF 8C F0              2645 	mov	b,r4
   08C1 63 F0 80           2646 	xrl	b,#0x80
   08C4 95 F0              2647 	subb	a,b
                           2648 ;	genIfxJump
                           2649 ;	Peephole 108.a	removed ljmp by inverse jump logic
   08C6 50 0F              2650 	jnc	00177$
                           2651 ;	Peephole 300	removed redundant label 00324$
                           2652 ;	genIpush
   08C8 74r00              2653 	mov	a,#__str_61
   08CA C0 E0              2654 	push	acc
   08CC 74s0B              2655 	mov	a,#(__str_61 >> 8)
   08CE C0 E0              2656 	push	acc
                           2657 ;	genCall
   08D0 12s00r00           2658 	lcall	_printf_tiny
   08D3 15 81              2659 	dec	sp
   08D5 15 81              2660 	dec	sp
   08D7                    2661 00177$:
                           2662 ;	main.c:332: }while(dir1_int>1);
                           2663 ;	genAssign
   08D7 90s00r3D           2664 	mov	dptr,#_dir1_int
   08DA E0                 2665 	movx	a,@dptr
   08DB FB                 2666 	mov	r3,a
   08DC A3                 2667 	inc	dptr
   08DD E0                 2668 	movx	a,@dptr
   08DE FC                 2669 	mov	r4,a
                           2670 ;	genCmpGt
                           2671 ;	genCmp
   08DF C3                 2672 	clr	c
   08E0 74 01              2673 	mov	a,#0x01
   08E2 9B                 2674 	subb	a,r3
                           2675 ;	Peephole 159	avoided xrl during execution
   08E3 74 80              2676 	mov	a,#(0x00 ^ 0x80)
   08E5 8C F0              2677 	mov	b,r4
   08E7 63 F0 80           2678 	xrl	b,#0x80
   08EA 95 F0              2679 	subb	a,b
                           2680 ;	genIfxJump
   08EC 50 03              2681 	jnc	00325$
   08EE 02s08r53           2682 	ljmp	00176$
   08F1                    2683 00325$:
                           2684 ;	main.c:334: iow_status = IOEX_Read(); //Read the status currently on the port pins
                           2685 ;	genCall
   08F1 12s00r00           2686 	lcall	_IOEX_Read
   08F4 AB 82              2687 	mov	r3,dpl
                           2688 ;	genAssign
   08F6 90s00r5F           2689 	mov	dptr,#_iow_status
   08F9 EB                 2690 	mov	a,r3
   08FA F0                 2691 	movx	@dptr,a
                           2692 ;	main.c:335: if(dir1_int==0)
                           2693 ;	genAssign
   08FB 90s00r3D           2694 	mov	dptr,#_dir1_int
   08FE E0                 2695 	movx	a,@dptr
   08FF FC                 2696 	mov	r4,a
   0900 A3                 2697 	inc	dptr
   0901 E0                 2698 	movx	a,@dptr
                           2699 ;	genIfx
   0902 FD                 2700 	mov	r5,a
                           2701 ;	Peephole 135	removed redundant mov
   0903 4C                 2702 	orl	a,r4
                           2703 ;	genIfxJump
   0904 60 03              2704 	jz	00326$
   0906 02s09r88           2705 	ljmp	00180$
   0909                    2706 00326$:
                           2707 ;	main.c:337: dir1_int = IOEX_MASK-powf(IOEX_BASE,pin1_int); //If the value to write is '0' then mask other bits and write '0' to that particular pin
                           2708 ;	genAssign
   0909 90s00r3B           2709 	mov	dptr,#_pin1_int
   090C E0                 2710 	movx	a,@dptr
   090D FE                 2711 	mov	r6,a
   090E A3                 2712 	inc	dptr
   090F E0                 2713 	movx	a,@dptr
   0910 FF                 2714 	mov	r7,a
                           2715 ;	genCall
   0911 8E 82              2716 	mov	dpl,r6
   0913 8F 83              2717 	mov	dph,r7
   0915 12s00r00           2718 	lcall	___sint2fs
   0918 AE 82              2719 	mov	r6,dpl
   091A AF 83              2720 	mov	r7,dph
   091C A8 F0              2721 	mov	r0,b
   091E F9                 2722 	mov	r1,a
                           2723 ;	genAssign
   091F 90s00r00           2724 	mov	dptr,#_powf_PARM_2
   0922 EE                 2725 	mov	a,r6
   0923 F0                 2726 	movx	@dptr,a
   0924 A3                 2727 	inc	dptr
   0925 EF                 2728 	mov	a,r7
   0926 F0                 2729 	movx	@dptr,a
   0927 A3                 2730 	inc	dptr
   0928 E8                 2731 	mov	a,r0
   0929 F0                 2732 	movx	@dptr,a
   092A A3                 2733 	inc	dptr
   092B E9                 2734 	mov	a,r1
   092C F0                 2735 	movx	@dptr,a
                           2736 ;	genCall
                           2737 ;	Peephole 3.c	changed mov to clr
                           2738 ;	Peephole 182.d	used 16 bit load of dptr
   092D 90 00 00           2739 	mov	dptr,#(0x00&0x00ff)
   0930 E4                 2740 	clr	a
   0931 F5 F0              2741 	mov	b,a
   0933 74 40              2742 	mov	a,#0x40
   0935 12s00r00           2743 	lcall	_powf
   0938 AE 82              2744 	mov	r6,dpl
   093A AF 83              2745 	mov	r7,dph
   093C A8 F0              2746 	mov	r0,b
   093E F9                 2747 	mov	r1,a
                           2748 ;	genIpush
   093F C0 06              2749 	push	ar6
   0941 C0 07              2750 	push	ar7
   0943 C0 00              2751 	push	ar0
   0945 C0 01              2752 	push	ar1
                           2753 ;	genCall
                           2754 ;	Peephole 182.b	used 16 bit load of dptr
   0947 90 00 00           2755 	mov	dptr,#0x0000
   094A 75 F0 7F           2756 	mov	b,#0x7F
   094D 74 43              2757 	mov	a,#0x43
   094F 12s00r00           2758 	lcall	___fssub
   0952 AE 82              2759 	mov	r6,dpl
   0954 AF 83              2760 	mov	r7,dph
   0956 A8 F0              2761 	mov	r0,b
   0958 F9                 2762 	mov	r1,a
   0959 E5 81              2763 	mov	a,sp
   095B 24 FC              2764 	add	a,#0xfc
   095D F5 81              2765 	mov	sp,a
                           2766 ;	genCall
   095F 8E 82              2767 	mov	dpl,r6
   0961 8F 83              2768 	mov	dph,r7
   0963 88 F0              2769 	mov	b,r0
   0965 E9                 2770 	mov	a,r1
   0966 12s00r00           2771 	lcall	___fs2sint
   0969 AE 82              2772 	mov	r6,dpl
   096B AF 83              2773 	mov	r7,dph
                           2774 ;	genAssign
   096D 90s00r3D           2775 	mov	dptr,#_dir1_int
   0970 EE                 2776 	mov	a,r6
   0971 F0                 2777 	movx	@dptr,a
   0972 A3                 2778 	inc	dptr
   0973 EF                 2779 	mov	a,r7
   0974 F0                 2780 	movx	@dptr,a
                           2781 ;	main.c:338: iow_status &= dir1_int;
                           2782 ;	genAssign
   0975 90s00r5F           2783 	mov	dptr,#_iow_status
   0978 E0                 2784 	movx	a,@dptr
                           2785 ;	genCast
                           2786 ;	genAnd
   0979 F8                 2787 	mov	r0,a
   097A 79 00              2788 	mov	r1,#0x00
                           2789 ;	Peephole 177.d	removed redundant move
   097C 52 06              2790 	anl	ar6,a
   097E E9                 2791 	mov	a,r1
   097F 52 07              2792 	anl	ar7,a
                           2793 ;	genCast
   0981 90s00r5F           2794 	mov	dptr,#_iow_status
   0984 EE                 2795 	mov	a,r6
   0985 F0                 2796 	movx	@dptr,a
                           2797 ;	Peephole 112.b	changed ljmp to sjmp
   0986 80 34              2798 	sjmp	00181$
   0988                    2799 00180$:
                           2800 ;	main.c:342: dir1_int= dir1_int<<pin1_int; //If the value to write is '1' then mask other bits and write '1' to that particular pin
                           2801 ;	genAssign
   0988 90s00r3B           2802 	mov	dptr,#_pin1_int
   098B E0                 2803 	movx	a,@dptr
   098C FE                 2804 	mov	r6,a
   098D A3                 2805 	inc	dptr
   098E E0                 2806 	movx	a,@dptr
   098F FF                 2807 	mov	r7,a
                           2808 ;	genLeftShift
   0990 8E F0              2809 	mov	b,r6
   0992 05 F0              2810 	inc	b
   0994 80 06              2811 	sjmp	00328$
   0996                    2812 00327$:
   0996 EC                 2813 	mov	a,r4
                           2814 ;	Peephole 254	optimized left shift
   0997 2C                 2815 	add	a,r4
   0998 FC                 2816 	mov	r4,a
   0999 ED                 2817 	mov	a,r5
   099A 33                 2818 	rlc	a
   099B FD                 2819 	mov	r5,a
   099C                    2820 00328$:
   099C D5 F0 F7           2821 	djnz	b,00327$
                           2822 ;	genAssign
   099F 90s00r3D           2823 	mov	dptr,#_dir1_int
   09A2 EC                 2824 	mov	a,r4
   09A3 F0                 2825 	movx	@dptr,a
   09A4 A3                 2826 	inc	dptr
   09A5 ED                 2827 	mov	a,r5
   09A6 F0                 2828 	movx	@dptr,a
                           2829 ;	main.c:343: iow_status |= dir1_int;
                           2830 ;	genAssign
   09A7 90s00r3D           2831 	mov	dptr,#_dir1_int
   09AA E0                 2832 	movx	a,@dptr
   09AB FC                 2833 	mov	r4,a
   09AC A3                 2834 	inc	dptr
   09AD E0                 2835 	movx	a,@dptr
   09AE FD                 2836 	mov	r5,a
                           2837 ;	genCast
   09AF 7E 00              2838 	mov	r6,#0x00
                           2839 ;	genOr
   09B1 EB                 2840 	mov	a,r3
   09B2 42 04              2841 	orl	ar4,a
   09B4 EE                 2842 	mov	a,r6
   09B5 42 05              2843 	orl	ar5,a
                           2844 ;	genCast
   09B7 90s00r5F           2845 	mov	dptr,#_iow_status
   09BA EC                 2846 	mov	a,r4
   09BB F0                 2847 	movx	@dptr,a
   09BC                    2848 00181$:
                           2849 ;	main.c:346: IOEX_Write(iow_status); //Write the new 8 bit value to the port pins
                           2850 ;	genAssign
   09BC 90s00r5F           2851 	mov	dptr,#_iow_status
   09BF E0                 2852 	movx	a,@dptr
                           2853 ;	genCall
   09C0 FB                 2854 	mov	r3,a
                           2855 ;	Peephole 244.c	loading dpl from a instead of r3
   09C1 F5 82              2856 	mov	dpl,a
   09C3 12s00r00           2857 	lcall	_IOEX_Write
                           2858 ;	main.c:347: flag2=0;
                           2859 ;	genAssign
   09C6 90s00r35           2860 	mov	dptr,#_flag2
   09C9 E4                 2861 	clr	a
   09CA F0                 2862 	movx	@dptr,a
   09CB A3                 2863 	inc	dptr
   09CC F0                 2864 	movx	@dptr,a
   09CD 02s0ArCB           2865 	ljmp	00202$
   09D0                    2866 00201$:
                           2867 ;	main.c:350: else if(icmd=='R')
                           2868 ;	genCmpEq
                           2869 ;	gencjneshort
                           2870 ;	Peephole 112.b	changed ljmp to sjmp
                           2871 ;	Peephole 198.b	optimized misc jump sequence
   09D0 BA 52 49           2872 	cjne	r2,#0x52,00198$
                           2873 ;	Peephole 200.b	removed redundant sjmp
                           2874 ;	Peephole 300	removed redundant label 00329$
                           2875 ;	Peephole 300	removed redundant label 00330$
                           2876 ;	main.c:352: printf_tiny("*********** I/O EXPANDER READ BYTE  **********\r\n");
                           2877 ;	genIpush
   09D3 74r39              2878 	mov	a,#__str_62
   09D5 C0 E0              2879 	push	acc
   09D7 74s0B              2880 	mov	a,#(__str_62 >> 8)
   09D9 C0 E0              2881 	push	acc
                           2882 ;	genCall
   09DB 12s00r00           2883 	lcall	_printf_tiny
   09DE 15 81              2884 	dec	sp
   09E0 15 81              2885 	dec	sp
                           2886 ;	main.c:353: iord=IOEX_Read(); //Read the data from port pins
                           2887 ;	genCall
   09E2 12s00r00           2888 	lcall	_IOEX_Read
   09E5 AB 82              2889 	mov	r3,dpl
                           2890 ;	genAssign
   09E7 90s00r56           2891 	mov	dptr,#_iord
   09EA EB                 2892 	mov	a,r3
   09EB F0                 2893 	movx	@dptr,a
                           2894 ;	main.c:354: printf_tiny("The status of I/O expander is %X ",iord);
                           2895 ;	genCast
   09EC 7C 00              2896 	mov	r4,#0x00
                           2897 ;	genIpush
   09EE C0 03              2898 	push	ar3
   09F0 C0 04              2899 	push	ar4
                           2900 ;	genIpush
   09F2 74r6A              2901 	mov	a,#__str_63
   09F4 C0 E0              2902 	push	acc
   09F6 74s0B              2903 	mov	a,#(__str_63 >> 8)
   09F8 C0 E0              2904 	push	acc
                           2905 ;	genCall
   09FA 12s00r00           2906 	lcall	_printf_tiny
   09FD E5 81              2907 	mov	a,sp
   09FF 24 FC              2908 	add	a,#0xfc
   0A01 F5 81              2909 	mov	sp,a
                           2910 ;	main.c:355: printf_tiny("\r\n");
                           2911 ;	genIpush
   0A03 74r2B              2912 	mov	a,#__str_1
   0A05 C0 E0              2913 	push	acc
   0A07 74s00              2914 	mov	a,#(__str_1 >> 8)
   0A09 C0 E0              2915 	push	acc
                           2916 ;	genCall
   0A0B 12s00r00           2917 	lcall	_printf_tiny
   0A0E 15 81              2918 	dec	sp
   0A10 15 81              2919 	dec	sp
                           2920 ;	main.c:356: flag2=0;
                           2921 ;	genAssign
   0A12 90s00r35           2922 	mov	dptr,#_flag2
   0A15 E4                 2923 	clr	a
   0A16 F0                 2924 	movx	@dptr,a
   0A17 A3                 2925 	inc	dptr
   0A18 F0                 2926 	movx	@dptr,a
   0A19 02s0ArCB           2927 	ljmp	00202$
   0A1C                    2928 00198$:
                           2929 ;	main.c:358: else if(icmd=='D')
                           2930 ;	genCmpEq
                           2931 ;	gencjneshort
                           2932 ;	Peephole 112.b	changed ljmp to sjmp
                           2933 ;	Peephole 198.b	optimized misc jump sequence
   0A1C BA 44 1C           2934 	cjne	r2,#0x44,00195$
                           2935 ;	Peephole 200.b	removed redundant sjmp
                           2936 ;	Peephole 300	removed redundant label 00331$
                           2937 ;	Peephole 300	removed redundant label 00332$
                           2938 ;	main.c:360: printf_tiny("*********** I/O PORT PIN DIRECTION CHANGE **********\r\n");
                           2939 ;	genIpush
   0A1F 74r8C              2940 	mov	a,#__str_64
   0A21 C0 E0              2941 	push	acc
   0A23 74s0B              2942 	mov	a,#(__str_64 >> 8)
   0A25 C0 E0              2943 	push	acc
                           2944 ;	genCall
   0A27 12s00r00           2945 	lcall	_printf_tiny
   0A2A 15 81              2946 	dec	sp
   0A2C 15 81              2947 	dec	sp
                           2948 ;	main.c:361: ioexp_dir(); //Function call to change the direction of the port pins
                           2949 ;	genCall
   0A2E 12s00r00           2950 	lcall	_ioexp_dir
                           2951 ;	main.c:362: flag2=0;
                           2952 ;	genAssign
   0A31 90s00r35           2953 	mov	dptr,#_flag2
   0A34 E4                 2954 	clr	a
   0A35 F0                 2955 	movx	@dptr,a
   0A36 A3                 2956 	inc	dptr
   0A37 F0                 2957 	movx	@dptr,a
   0A38 02s0ArCB           2958 	ljmp	00202$
   0A3B                    2959 00195$:
                           2960 ;	main.c:364: else if(icmd=='C')
                           2961 ;	genCmpEq
                           2962 ;	gencjneshort
                           2963 ;	Peephole 112.b	changed ljmp to sjmp
                           2964 ;	Peephole 198.b	optimized misc jump sequence
   0A3B BA 43 25           2965 	cjne	r2,#0x43,00192$
                           2966 ;	Peephole 200.b	removed redundant sjmp
                           2967 ;	Peephole 300	removed redundant label 00333$
                           2968 ;	Peephole 300	removed redundant label 00334$
                           2969 ;	main.c:366: printf_tiny("*********** I/O COUNTER RESET **********\r\n");
                           2970 ;	genIpush
   0A3E 74rC3              2971 	mov	a,#__str_65
   0A40 C0 E0              2972 	push	acc
   0A42 74s0B              2973 	mov	a,#(__str_65 >> 8)
   0A44 C0 E0              2974 	push	acc
                           2975 ;	genCall
   0A46 12s00r00           2976 	lcall	_printf_tiny
   0A49 15 81              2977 	dec	sp
   0A4B 15 81              2978 	dec	sp
                           2979 ;	main.c:367: io_counter=0;
                           2980 ;	genAssign
   0A4D 90s00r38           2981 	mov	dptr,#_io_counter
   0A50 E4                 2982 	clr	a
   0A51 F0                 2983 	movx	@dptr,a
   0A52 A3                 2984 	inc	dptr
   0A53 F0                 2985 	movx	@dptr,a
                           2986 ;	main.c:368: ioexp_count(io_counter); //Function call for the counter reset
                           2987 ;	genCall
                           2988 ;	Peephole 182.b	used 16 bit load of dptr
   0A54 90 00 00           2989 	mov	dptr,#0x0000
   0A57 12s00r00           2990 	lcall	_ioexp_count
                           2991 ;	main.c:369: flag2=0;
                           2992 ;	genAssign
   0A5A 90s00r35           2993 	mov	dptr,#_flag2
   0A5D E4                 2994 	clr	a
   0A5E F0                 2995 	movx	@dptr,a
   0A5F A3                 2996 	inc	dptr
   0A60 F0                 2997 	movx	@dptr,a
                           2998 ;	Peephole 112.b	changed ljmp to sjmp
   0A61 80 68              2999 	sjmp	00202$
   0A63                    3000 00192$:
                           3001 ;	main.c:371: else if(icmd=='I')
                           3002 ;	genCmpEq
                           3003 ;	gencjneshort
                           3004 ;	Peephole 112.b	changed ljmp to sjmp
                           3005 ;	Peephole 198.b	optimized misc jump sequence
   0A63 BA 49 1B           3006 	cjne	r2,#0x49,00189$
                           3007 ;	Peephole 200.b	removed redundant sjmp
                           3008 ;	Peephole 300	removed redundant label 00335$
                           3009 ;	Peephole 300	removed redundant label 00336$
                           3010 ;	main.c:373: printf_tiny("*********** I/O DISPLAY DIRECTION STATUS **********\r\n");
                           3011 ;	genIpush
   0A66 74rEE              3012 	mov	a,#__str_66
   0A68 C0 E0              3013 	push	acc
   0A6A 74s0B              3014 	mov	a,#(__str_66 >> 8)
   0A6C C0 E0              3015 	push	acc
                           3016 ;	genCall
   0A6E 12s00r00           3017 	lcall	_printf_tiny
   0A71 15 81              3018 	dec	sp
   0A73 15 81              3019 	dec	sp
                           3020 ;	main.c:374: displaystatus(); //Function call to display the status of the direction of the port pins
                           3021 ;	genCall
   0A75 12s13r26           3022 	lcall	_displaystatus
                           3023 ;	main.c:375: flag2=0;
                           3024 ;	genAssign
   0A78 90s00r35           3025 	mov	dptr,#_flag2
   0A7B E4                 3026 	clr	a
   0A7C F0                 3027 	movx	@dptr,a
   0A7D A3                 3028 	inc	dptr
   0A7E F0                 3029 	movx	@dptr,a
                           3030 ;	Peephole 112.b	changed ljmp to sjmp
   0A7F 80 4A              3031 	sjmp	00202$
   0A81                    3032 00189$:
                           3033 ;	main.c:377: else if(icmd=='S')
                           3034 ;	genCmpEq
                           3035 ;	gencjneshort
                           3036 ;	Peephole 112.b	changed ljmp to sjmp
                           3037 ;	Peephole 198.b	optimized misc jump sequence
   0A81 BA 53 1B           3038 	cjne	r2,#0x53,00186$
                           3039 ;	Peephole 200.b	removed redundant sjmp
                           3040 ;	Peephole 300	removed redundant label 00337$
                           3041 ;	Peephole 300	removed redundant label 00338$
                           3042 ;	main.c:379: printf_tiny("*********** I/O DISPLAY DATA STATUS **********\r\n");
                           3043 ;	genIpush
   0A84 74r24              3044 	mov	a,#__str_67
   0A86 C0 E0              3045 	push	acc
   0A88 74s0C              3046 	mov	a,#(__str_67 >> 8)
   0A8A C0 E0              3047 	push	acc
                           3048 ;	genCall
   0A8C 12s00r00           3049 	lcall	_printf_tiny
   0A8F 15 81              3050 	dec	sp
   0A91 15 81              3051 	dec	sp
                           3052 ;	main.c:380: displaydata(); //Function call to display the data on the port pins
                           3053 ;	genCall
   0A93 12s13r88           3054 	lcall	_displaydata
                           3055 ;	main.c:381: flag2=0;
                           3056 ;	genAssign
   0A96 90s00r35           3057 	mov	dptr,#_flag2
   0A99 E4                 3058 	clr	a
   0A9A F0                 3059 	movx	@dptr,a
   0A9B A3                 3060 	inc	dptr
   0A9C F0                 3061 	movx	@dptr,a
                           3062 ;	Peephole 112.b	changed ljmp to sjmp
   0A9D 80 2C              3063 	sjmp	00202$
   0A9F                    3064 00186$:
                           3065 ;	main.c:383: else if(icmd=='M')
                           3066 ;	genCmpEq
                           3067 ;	gencjneshort
                           3068 ;	Peephole 112.b	changed ljmp to sjmp
                           3069 ;	Peephole 198.b	optimized misc jump sequence
   0A9F BA 4D 11           3070 	cjne	r2,#0x4D,00183$
                           3071 ;	Peephole 200.b	removed redundant sjmp
                           3072 ;	Peephole 300	removed redundant label 00339$
                           3073 ;	Peephole 300	removed redundant label 00340$
                           3074 ;	main.c:385: printf_tiny("********Back to Main Menu**********");
                           3075 ;	genIpush
   0AA2 74rEE              3076 	mov	a,#__str_40
   0AA4 C0 E0              3077 	push	acc
   0AA6 74s06              3078 	mov	a,#(__str_40 >> 8)
   0AA8 C0 E0              3079 	push	acc
                           3080 ;	genCall
   0AAA 12s00r00           3081 	lcall	_printf_tiny
   0AAD 15 81              3082 	dec	sp
   0AAF 15 81              3083 	dec	sp
                           3084 ;	Peephole 112.b	changed ljmp to sjmp
   0AB1 80 18              3085 	sjmp	00202$
   0AB3                    3086 00183$:
                           3087 ;	main.c:389: printf_tiny("Please enter a valid command\r\n");
                           3088 ;	genIpush
   0AB3 74r53              3089 	mov	a,#__str_31
   0AB5 C0 E0              3090 	push	acc
   0AB7 74s05              3091 	mov	a,#(__str_31 >> 8)
   0AB9 C0 E0              3092 	push	acc
                           3093 ;	genCall
   0ABB 12s00r00           3094 	lcall	_printf_tiny
   0ABE 15 81              3095 	dec	sp
   0AC0 15 81              3096 	dec	sp
                           3097 ;	main.c:390: flag2=1;
                           3098 ;	genAssign
   0AC2 90s00r35           3099 	mov	dptr,#_flag2
   0AC5 74 01              3100 	mov	a,#0x01
   0AC7 F0                 3101 	movx	@dptr,a
   0AC8 E4                 3102 	clr	a
   0AC9 A3                 3103 	inc	dptr
   0ACA F0                 3104 	movx	@dptr,a
   0ACB                    3105 00202$:
                           3106 ;	main.c:393: }while(flag2==1);
                           3107 ;	genAssign
   0ACB 90s00r35           3108 	mov	dptr,#_flag2
   0ACE E0                 3109 	movx	a,@dptr
   0ACF FA                 3110 	mov	r2,a
   0AD0 A3                 3111 	inc	dptr
   0AD1 E0                 3112 	movx	a,@dptr
   0AD2 FB                 3113 	mov	r3,a
                           3114 ;	genCmpEq
                           3115 ;	gencjneshort
   0AD3 BA 01 06           3116 	cjne	r2,#0x01,00341$
   0AD6 BB 00 03           3117 	cjne	r3,#0x00,00341$
   0AD9 02s06r8B           3118 	ljmp	00203$
   0ADC                    3119 00341$:
   0ADC 02s00r70           3120 	ljmp	00218$
   0ADF                    3121 00207$:
                           3122 ;	main.c:397: printf_tiny("Enter a valid command\r\n");
                           3123 ;	genIpush
   0ADF 74r55              3124 	mov	a,#__str_68
   0AE1 C0 E0              3125 	push	acc
   0AE3 74s0C              3126 	mov	a,#(__str_68 >> 8)
   0AE5 C0 E0              3127 	push	acc
                           3128 ;	genCall
   0AE7 12s00r00           3129 	lcall	_printf_tiny
   0AEA 15 81              3130 	dec	sp
   0AEC 15 81              3131 	dec	sp
                           3132 ;	main.c:398: flag1=1;
                           3133 ;	genAssign
   0AEE 90s00r33           3134 	mov	dptr,#_flag1
   0AF1 74 01              3135 	mov	a,#0x01
   0AF3 F0                 3136 	movx	@dptr,a
   0AF4 E4                 3137 	clr	a
   0AF5 A3                 3138 	inc	dptr
   0AF6 F0                 3139 	movx	@dptr,a
                           3140 ;	main.c:400: }while(flag1==1|ecmd=='M'|lcmd=='M'|ccmd=='M'|icmd=='M');
   0AF7 02s00r70           3141 	ljmp	00218$
                           3142 ;	Peephole 259.b	removed redundant label 00224$ and ret
                           3143 ;
                           3144 ;------------------------------------------------------------
                           3145 ;Allocation info for local variables in function 'ewrite'
                           3146 ;------------------------------------------------------------
                           3147 ;------------------------------------------------------------
                           3148 ;	main.c:413: void ewrite()
                           3149 ;	-----------------------------------------
                           3150 ;	 function ewrite
                           3151 ;	-----------------------------------------
   0AFA                    3152 _ewrite:
                           3153 ;	main.c:415: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3154 ;	genIpush
   0AFA 74r6D              3155 	mov	a,#__str_69
   0AFC C0 E0              3156 	push	acc
   0AFE 74s0C              3157 	mov	a,#(__str_69 >> 8)
   0B00 C0 E0              3158 	push	acc
                           3159 ;	genCall
   0B02 12s00r00           3160 	lcall	_printf_tiny
   0B05 15 81              3161 	dec	sp
   0B07 15 81              3162 	dec	sp
                           3163 ;	main.c:418: do{
   0B09                    3164 00104$:
                           3165 ;	main.c:419: flag=0;
                           3166 ;	genAssign
   0B09 90s00r31           3167 	mov	dptr,#_flag
   0B0C E4                 3168 	clr	a
   0B0D F0                 3169 	movx	@dptr,a
   0B0E A3                 3170 	inc	dptr
   0B0F F0                 3171 	movx	@dptr,a
                           3172 ;	main.c:420: wordaddress=getstr();
                           3173 ;	genCall
   0B10 12s00r00           3174 	lcall	_getstr
   0B13 AA 82              3175 	mov	r2,dpl
   0B15 AB 83              3176 	mov	r3,dph
   0B17 AC F0              3177 	mov	r4,b
                           3178 ;	genAssign
   0B19 90s00r03           3179 	mov	dptr,#_wordaddress
   0B1C EA                 3180 	mov	a,r2
   0B1D F0                 3181 	movx	@dptr,a
   0B1E A3                 3182 	inc	dptr
   0B1F EB                 3183 	mov	a,r3
   0B20 F0                 3184 	movx	@dptr,a
   0B21 A3                 3185 	inc	dptr
   0B22 EC                 3186 	mov	a,r4
   0B23 F0                 3187 	movx	@dptr,a
                           3188 ;	main.c:421: printf_tiny("Address Entered is: ");
                           3189 ;	genIpush
   0B24 74rA9              3190 	mov	a,#__str_70
   0B26 C0 E0              3191 	push	acc
   0B28 74s0C              3192 	mov	a,#(__str_70 >> 8)
   0B2A C0 E0              3193 	push	acc
                           3194 ;	genCall
   0B2C 12s00r00           3195 	lcall	_printf_tiny
   0B2F 15 81              3196 	dec	sp
   0B31 15 81              3197 	dec	sp
                           3198 ;	main.c:422: putstr(wordaddress);
                           3199 ;	genAssign
   0B33 90s00r03           3200 	mov	dptr,#_wordaddress
   0B36 E0                 3201 	movx	a,@dptr
   0B37 FA                 3202 	mov	r2,a
   0B38 A3                 3203 	inc	dptr
   0B39 E0                 3204 	movx	a,@dptr
   0B3A FB                 3205 	mov	r3,a
   0B3B A3                 3206 	inc	dptr
   0B3C E0                 3207 	movx	a,@dptr
   0B3D FC                 3208 	mov	r4,a
                           3209 ;	genCall
   0B3E 8A 82              3210 	mov	dpl,r2
   0B40 8B 83              3211 	mov	dph,r3
   0B42 8C F0              3212 	mov	b,r4
   0B44 12s00r00           3213 	lcall	_putstr
                           3214 ;	main.c:423: printf_tiny("\r\n");
                           3215 ;	genIpush
   0B47 74r2B              3216 	mov	a,#__str_1
   0B49 C0 E0              3217 	push	acc
   0B4B 74s00              3218 	mov	a,#(__str_1 >> 8)
   0B4D C0 E0              3219 	push	acc
                           3220 ;	genCall
   0B4F 12s00r00           3221 	lcall	_printf_tiny
   0B52 15 81              3222 	dec	sp
   0B54 15 81              3223 	dec	sp
                           3224 ;	main.c:424: wordadd_int = atoh(wordaddress);        // Get data from the user    //Convert that data into hex
                           3225 ;	genAssign
   0B56 90s00r03           3226 	mov	dptr,#_wordaddress
   0B59 E0                 3227 	movx	a,@dptr
   0B5A FA                 3228 	mov	r2,a
   0B5B A3                 3229 	inc	dptr
   0B5C E0                 3230 	movx	a,@dptr
   0B5D FB                 3231 	mov	r3,a
   0B5E A3                 3232 	inc	dptr
   0B5F E0                 3233 	movx	a,@dptr
   0B60 FC                 3234 	mov	r4,a
                           3235 ;	genCall
   0B61 8A 82              3236 	mov	dpl,r2
   0B63 8B 83              3237 	mov	dph,r3
   0B65 8C F0              3238 	mov	b,r4
   0B67 12s00r00           3239 	lcall	_atoh
   0B6A AA 82              3240 	mov	r2,dpl
   0B6C AB 83              3241 	mov	r3,dph
                           3242 ;	genAssign
   0B6E 90s00r25           3243 	mov	dptr,#_wordadd_int
   0B71 EA                 3244 	mov	a,r2
   0B72 F0                 3245 	movx	@dptr,a
   0B73 A3                 3246 	inc	dptr
   0B74 EB                 3247 	mov	a,r3
   0B75 F0                 3248 	movx	@dptr,a
                           3249 ;	main.c:425: if(wordadd_int<MAXADD)              // Check if address is in valid range
                           3250 ;	genCmpLt
                           3251 ;	genCmp
   0B76 C3                 3252 	clr	c
   0B77 EB                 3253 	mov	a,r3
   0B78 64 80              3254 	xrl	a,#0x80
   0B7A 94 88              3255 	subb	a,#0x88
                           3256 ;	genIfxJump
                           3257 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0B7C 50 0B              3258 	jnc	00102$
                           3259 ;	Peephole 300	removed redundant label 00121$
                           3260 ;	main.c:427: flag=1;
                           3261 ;	genAssign
   0B7E 90s00r31           3262 	mov	dptr,#_flag
   0B81 74 01              3263 	mov	a,#0x01
   0B83 F0                 3264 	movx	@dptr,a
   0B84 E4                 3265 	clr	a
   0B85 A3                 3266 	inc	dptr
   0B86 F0                 3267 	movx	@dptr,a
                           3268 ;	Peephole 112.b	changed ljmp to sjmp
   0B87 80 16              3269 	sjmp	00105$
   0B89                    3270 00102$:
                           3271 ;	main.c:431: flag=0;
                           3272 ;	genAssign
   0B89 90s00r31           3273 	mov	dptr,#_flag
   0B8C E4                 3274 	clr	a
   0B8D F0                 3275 	movx	@dptr,a
   0B8E A3                 3276 	inc	dptr
   0B8F F0                 3277 	movx	@dptr,a
                           3278 ;	main.c:432: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3279 ;	genIpush
   0B90 74rBE              3280 	mov	a,#__str_71
   0B92 C0 E0              3281 	push	acc
   0B94 74s0C              3282 	mov	a,#(__str_71 >> 8)
   0B96 C0 E0              3283 	push	acc
                           3284 ;	genCall
   0B98 12s00r00           3285 	lcall	_printf_tiny
   0B9B 15 81              3286 	dec	sp
   0B9D 15 81              3287 	dec	sp
   0B9F                    3288 00105$:
                           3289 ;	main.c:434: }while(flag==0);
                           3290 ;	genAssign
   0B9F 90s00r31           3291 	mov	dptr,#_flag
   0BA2 E0                 3292 	movx	a,@dptr
   0BA3 FA                 3293 	mov	r2,a
   0BA4 A3                 3294 	inc	dptr
   0BA5 E0                 3295 	movx	a,@dptr
                           3296 ;	genIfx
   0BA6 FB                 3297 	mov	r3,a
                           3298 ;	Peephole 135	removed redundant mov
   0BA7 4A                 3299 	orl	a,r2
                           3300 ;	genIfxJump
   0BA8 70 03              3301 	jnz	00122$
   0BAA 02s0Br09           3302 	ljmp	00104$
   0BAD                    3303 00122$:
                           3304 ;	main.c:435: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                           3305 ;	genIpush
   0BAD 74rFF              3306 	mov	a,#__str_72
   0BAF C0 E0              3307 	push	acc
   0BB1 74s0C              3308 	mov	a,#(__str_72 >> 8)
   0BB3 C0 E0              3309 	push	acc
                           3310 ;	genCall
   0BB5 12s00r00           3311 	lcall	_printf_tiny
   0BB8 15 81              3312 	dec	sp
   0BBA 15 81              3313 	dec	sp
                           3314 ;	main.c:436: do{
   0BBC                    3315 00110$:
                           3316 ;	main.c:437: flag=0;
                           3317 ;	genAssign
   0BBC 90s00r31           3318 	mov	dptr,#_flag
   0BBF E4                 3319 	clr	a
   0BC0 F0                 3320 	movx	@dptr,a
   0BC1 A3                 3321 	inc	dptr
   0BC2 F0                 3322 	movx	@dptr,a
                           3323 ;	main.c:438: datastore=getstr();          // Get data from the user
                           3324 ;	genCall
   0BC3 12s00r00           3325 	lcall	_getstr
   0BC6 AA 82              3326 	mov	r2,dpl
   0BC8 AB 83              3327 	mov	r3,dph
   0BCA AC F0              3328 	mov	r4,b
                           3329 ;	genAssign
   0BCC 90s00r06           3330 	mov	dptr,#_datastore
   0BCF EA                 3331 	mov	a,r2
   0BD0 F0                 3332 	movx	@dptr,a
   0BD1 A3                 3333 	inc	dptr
   0BD2 EB                 3334 	mov	a,r3
   0BD3 F0                 3335 	movx	@dptr,a
   0BD4 A3                 3336 	inc	dptr
   0BD5 EC                 3337 	mov	a,r4
   0BD6 F0                 3338 	movx	@dptr,a
                           3339 ;	main.c:439: printf_tiny("Data Entered is: ");
                           3340 ;	genIpush
   0BD7 74r35              3341 	mov	a,#__str_73
   0BD9 C0 E0              3342 	push	acc
   0BDB 74s0D              3343 	mov	a,#(__str_73 >> 8)
   0BDD C0 E0              3344 	push	acc
                           3345 ;	genCall
   0BDF 12s00r00           3346 	lcall	_printf_tiny
   0BE2 15 81              3347 	dec	sp
   0BE4 15 81              3348 	dec	sp
                           3349 ;	main.c:440: putstr(datastore);
                           3350 ;	genAssign
   0BE6 90s00r06           3351 	mov	dptr,#_datastore
   0BE9 E0                 3352 	movx	a,@dptr
   0BEA FA                 3353 	mov	r2,a
   0BEB A3                 3354 	inc	dptr
   0BEC E0                 3355 	movx	a,@dptr
   0BED FB                 3356 	mov	r3,a
   0BEE A3                 3357 	inc	dptr
   0BEF E0                 3358 	movx	a,@dptr
   0BF0 FC                 3359 	mov	r4,a
                           3360 ;	genCall
   0BF1 8A 82              3361 	mov	dpl,r2
   0BF3 8B 83              3362 	mov	dph,r3
   0BF5 8C F0              3363 	mov	b,r4
   0BF7 12s00r00           3364 	lcall	_putstr
                           3365 ;	main.c:441: printf_tiny("\r\n");
                           3366 ;	genIpush
   0BFA 74r2B              3367 	mov	a,#__str_1
   0BFC C0 E0              3368 	push	acc
   0BFE 74s00              3369 	mov	a,#(__str_1 >> 8)
   0C00 C0 E0              3370 	push	acc
                           3371 ;	genCall
   0C02 12s00r00           3372 	lcall	_printf_tiny
   0C05 15 81              3373 	dec	sp
   0C07 15 81              3374 	dec	sp
                           3375 ;	main.c:442: datastore_int = atoh_data(datastore);   //Convert that data into hex
                           3376 ;	genAssign
   0C09 90s00r06           3377 	mov	dptr,#_datastore
   0C0C E0                 3378 	movx	a,@dptr
   0C0D FA                 3379 	mov	r2,a
   0C0E A3                 3380 	inc	dptr
   0C0F E0                 3381 	movx	a,@dptr
   0C10 FB                 3382 	mov	r3,a
   0C11 A3                 3383 	inc	dptr
   0C12 E0                 3384 	movx	a,@dptr
   0C13 FC                 3385 	mov	r4,a
                           3386 ;	genCall
   0C14 8A 82              3387 	mov	dpl,r2
   0C16 8B 83              3388 	mov	dph,r3
   0C18 8C F0              3389 	mov	b,r4
   0C1A 12s00r00           3390 	lcall	_atoh_data
   0C1D AA 82              3391 	mov	r2,dpl
   0C1F AB 83              3392 	mov	r3,dph
                           3393 ;	genAssign
   0C21 90s00r27           3394 	mov	dptr,#_datastore_int
   0C24 EA                 3395 	mov	a,r2
   0C25 F0                 3396 	movx	@dptr,a
   0C26 A3                 3397 	inc	dptr
   0C27 EB                 3398 	mov	a,r3
   0C28 F0                 3399 	movx	@dptr,a
                           3400 ;	main.c:443: if(datastore_int<MAXDATA)
                           3401 ;	genCmpLt
                           3402 ;	genCmp
   0C29 C3                 3403 	clr	c
   0C2A EB                 3404 	mov	a,r3
   0C2B 64 80              3405 	xrl	a,#0x80
   0C2D 94 81              3406 	subb	a,#0x81
                           3407 ;	genIfxJump
                           3408 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0C2F 50 0B              3409 	jnc	00108$
                           3410 ;	Peephole 300	removed redundant label 00123$
                           3411 ;	main.c:445: flag=1;
                           3412 ;	genAssign
   0C31 90s00r31           3413 	mov	dptr,#_flag
   0C34 74 01              3414 	mov	a,#0x01
   0C36 F0                 3415 	movx	@dptr,a
   0C37 E4                 3416 	clr	a
   0C38 A3                 3417 	inc	dptr
   0C39 F0                 3418 	movx	@dptr,a
                           3419 ;	Peephole 112.b	changed ljmp to sjmp
   0C3A 80 0F              3420 	sjmp	00111$
   0C3C                    3421 00108$:
                           3422 ;	main.c:450: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF\r\n");
                           3423 ;	genIpush
   0C3C 74r47              3424 	mov	a,#__str_74
   0C3E C0 E0              3425 	push	acc
   0C40 74s0D              3426 	mov	a,#(__str_74 >> 8)
   0C42 C0 E0              3427 	push	acc
                           3428 ;	genCall
   0C44 12s00r00           3429 	lcall	_printf_tiny
   0C47 15 81              3430 	dec	sp
   0C49 15 81              3431 	dec	sp
   0C4B                    3432 00111$:
                           3433 ;	main.c:452: }while(flag==0);
                           3434 ;	genAssign
   0C4B 90s00r31           3435 	mov	dptr,#_flag
   0C4E E0                 3436 	movx	a,@dptr
   0C4F FA                 3437 	mov	r2,a
   0C50 A3                 3438 	inc	dptr
   0C51 E0                 3439 	movx	a,@dptr
                           3440 ;	genIfx
   0C52 FB                 3441 	mov	r3,a
                           3442 ;	Peephole 135	removed redundant mov
   0C53 4A                 3443 	orl	a,r2
                           3444 ;	genIfxJump
   0C54 70 03              3445 	jnz	00124$
   0C56 02s0BrBC           3446 	ljmp	00110$
   0C59                    3447 00124$:
                           3448 ;	main.c:453: EEPROM_WriteByte(wordadd_int,datastore_int); //Function call to write to the EEPROM
                           3449 ;	genAssign
   0C59 90s00r25           3450 	mov	dptr,#_wordadd_int
   0C5C E0                 3451 	movx	a,@dptr
   0C5D FA                 3452 	mov	r2,a
   0C5E A3                 3453 	inc	dptr
   0C5F E0                 3454 	movx	a,@dptr
   0C60 FB                 3455 	mov	r3,a
                           3456 ;	genAssign
   0C61 90s00r27           3457 	mov	dptr,#_datastore_int
   0C64 E0                 3458 	movx	a,@dptr
   0C65 FC                 3459 	mov	r4,a
   0C66 A3                 3460 	inc	dptr
   0C67 E0                 3461 	movx	a,@dptr
   0C68 FD                 3462 	mov	r5,a
                           3463 ;	genCast
   0C69 90s00r00           3464 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0C6C EC                 3465 	mov	a,r4
   0C6D F0                 3466 	movx	@dptr,a
                           3467 ;	genCall
   0C6E 8A 82              3468 	mov	dpl,r2
   0C70 8B 83              3469 	mov	dph,r3
   0C72 12s00r00           3470 	lcall	_EEPROM_WriteByte
                           3471 ;	main.c:454: rd=EEPROM_ReadByte(wordadd_int); //Function call to read from the EEPROM
                           3472 ;	genAssign
   0C75 90s00r25           3473 	mov	dptr,#_wordadd_int
   0C78 E0                 3474 	movx	a,@dptr
   0C79 FA                 3475 	mov	r2,a
   0C7A A3                 3476 	inc	dptr
   0C7B E0                 3477 	movx	a,@dptr
   0C7C FB                 3478 	mov	r3,a
                           3479 ;	genCall
   0C7D 8A 82              3480 	mov	dpl,r2
   0C7F 8B 83              3481 	mov	dph,r3
   0C81 12s00r00           3482 	lcall	_EEPROM_ReadByte
   0C84 AA 82              3483 	mov	r2,dpl
                           3484 ;	genAssign
   0C86 90s00r0F           3485 	mov	dptr,#_rd
   0C89 EA                 3486 	mov	a,r2
   0C8A F0                 3487 	movx	@dptr,a
                           3488 ;	main.c:455: printf_tiny("The byte in the specified address is %x\r\n",rd);
                           3489 ;	genAssign
                           3490 ;	genCast
   0C8B EA                 3491 	mov	a,r2
   0C8C 33                 3492 	rlc	a
   0C8D 95 E0              3493 	subb	a,acc
   0C8F FB                 3494 	mov	r3,a
                           3495 ;	genIpush
   0C90 C0 02              3496 	push	ar2
   0C92 C0 03              3497 	push	ar3
                           3498 ;	genIpush
   0C94 74r95              3499 	mov	a,#__str_75
   0C96 C0 E0              3500 	push	acc
   0C98 74s0D              3501 	mov	a,#(__str_75 >> 8)
   0C9A C0 E0              3502 	push	acc
                           3503 ;	genCall
   0C9C 12s00r00           3504 	lcall	_printf_tiny
   0C9F E5 81              3505 	mov	a,sp
   0CA1 24 FC              3506 	add	a,#0xfc
   0CA3 F5 81              3507 	mov	sp,a
                           3508 ;	Peephole 300	removed redundant label 00113$
   0CA5 22                 3509 	ret
                           3510 ;------------------------------------------------------------
                           3511 ;Allocation info for local variables in function 'eread'
                           3512 ;------------------------------------------------------------
                           3513 ;------------------------------------------------------------
                           3514 ;	main.c:465: void eread()
                           3515 ;	-----------------------------------------
                           3516 ;	 function eread
                           3517 ;	-----------------------------------------
   0CA6                    3518 _eread:
                           3519 ;	main.c:467: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3520 ;	genIpush
   0CA6 74r6D              3521 	mov	a,#__str_69
   0CA8 C0 E0              3522 	push	acc
   0CAA 74s0C              3523 	mov	a,#(__str_69 >> 8)
   0CAC C0 E0              3524 	push	acc
                           3525 ;	genCall
   0CAE 12s00r00           3526 	lcall	_printf_tiny
   0CB1 15 81              3527 	dec	sp
   0CB3 15 81              3528 	dec	sp
                           3529 ;	main.c:470: do{
   0CB5                    3530 00104$:
                           3531 ;	main.c:471: flag=0;
                           3532 ;	genAssign
   0CB5 90s00r31           3533 	mov	dptr,#_flag
   0CB8 E4                 3534 	clr	a
   0CB9 F0                 3535 	movx	@dptr,a
   0CBA A3                 3536 	inc	dptr
   0CBB F0                 3537 	movx	@dptr,a
                           3538 ;	main.c:472: wordaddress=getstr(); //Get address from the user
                           3539 ;	genCall
   0CBC 12s00r00           3540 	lcall	_getstr
   0CBF AA 82              3541 	mov	r2,dpl
   0CC1 AB 83              3542 	mov	r3,dph
   0CC3 AC F0              3543 	mov	r4,b
                           3544 ;	genAssign
   0CC5 90s00r03           3545 	mov	dptr,#_wordaddress
   0CC8 EA                 3546 	mov	a,r2
   0CC9 F0                 3547 	movx	@dptr,a
   0CCA A3                 3548 	inc	dptr
   0CCB EB                 3549 	mov	a,r3
   0CCC F0                 3550 	movx	@dptr,a
   0CCD A3                 3551 	inc	dptr
   0CCE EC                 3552 	mov	a,r4
   0CCF F0                 3553 	movx	@dptr,a
                           3554 ;	main.c:473: printf_tiny("Address Entered is: ");
                           3555 ;	genIpush
   0CD0 74rA9              3556 	mov	a,#__str_70
   0CD2 C0 E0              3557 	push	acc
   0CD4 74s0C              3558 	mov	a,#(__str_70 >> 8)
   0CD6 C0 E0              3559 	push	acc
                           3560 ;	genCall
   0CD8 12s00r00           3561 	lcall	_printf_tiny
   0CDB 15 81              3562 	dec	sp
   0CDD 15 81              3563 	dec	sp
                           3564 ;	main.c:474: putstr(wordaddress);
                           3565 ;	genAssign
   0CDF 90s00r03           3566 	mov	dptr,#_wordaddress
   0CE2 E0                 3567 	movx	a,@dptr
   0CE3 FA                 3568 	mov	r2,a
   0CE4 A3                 3569 	inc	dptr
   0CE5 E0                 3570 	movx	a,@dptr
   0CE6 FB                 3571 	mov	r3,a
   0CE7 A3                 3572 	inc	dptr
   0CE8 E0                 3573 	movx	a,@dptr
   0CE9 FC                 3574 	mov	r4,a
                           3575 ;	genCall
   0CEA 8A 82              3576 	mov	dpl,r2
   0CEC 8B 83              3577 	mov	dph,r3
   0CEE 8C F0              3578 	mov	b,r4
   0CF0 12s00r00           3579 	lcall	_putstr
                           3580 ;	main.c:475: printf_tiny("\r\n");
                           3581 ;	genIpush
   0CF3 74r2B              3582 	mov	a,#__str_1
   0CF5 C0 E0              3583 	push	acc
   0CF7 74s00              3584 	mov	a,#(__str_1 >> 8)
   0CF9 C0 E0              3585 	push	acc
                           3586 ;	genCall
   0CFB 12s00r00           3587 	lcall	_printf_tiny
   0CFE 15 81              3588 	dec	sp
   0D00 15 81              3589 	dec	sp
                           3590 ;	main.c:476: wordadd_int = atoh(wordaddress);        // Get data from the user    //Convert that data into hex
                           3591 ;	genAssign
   0D02 90s00r03           3592 	mov	dptr,#_wordaddress
   0D05 E0                 3593 	movx	a,@dptr
   0D06 FA                 3594 	mov	r2,a
   0D07 A3                 3595 	inc	dptr
   0D08 E0                 3596 	movx	a,@dptr
   0D09 FB                 3597 	mov	r3,a
   0D0A A3                 3598 	inc	dptr
   0D0B E0                 3599 	movx	a,@dptr
   0D0C FC                 3600 	mov	r4,a
                           3601 ;	genCall
   0D0D 8A 82              3602 	mov	dpl,r2
   0D0F 8B 83              3603 	mov	dph,r3
   0D11 8C F0              3604 	mov	b,r4
   0D13 12s00r00           3605 	lcall	_atoh
   0D16 AA 82              3606 	mov	r2,dpl
   0D18 AB 83              3607 	mov	r3,dph
                           3608 ;	genAssign
   0D1A 90s00r25           3609 	mov	dptr,#_wordadd_int
   0D1D EA                 3610 	mov	a,r2
   0D1E F0                 3611 	movx	@dptr,a
   0D1F A3                 3612 	inc	dptr
   0D20 EB                 3613 	mov	a,r3
   0D21 F0                 3614 	movx	@dptr,a
                           3615 ;	main.c:477: if(wordadd_int<MAXADD)              // Check if address is in valid range
                           3616 ;	genCmpLt
                           3617 ;	genCmp
   0D22 C3                 3618 	clr	c
   0D23 EB                 3619 	mov	a,r3
   0D24 64 80              3620 	xrl	a,#0x80
   0D26 94 88              3621 	subb	a,#0x88
                           3622 ;	genIfxJump
                           3623 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D28 50 0B              3624 	jnc	00102$
                           3625 ;	Peephole 300	removed redundant label 00112$
                           3626 ;	main.c:479: flag=1;
                           3627 ;	genAssign
   0D2A 90s00r31           3628 	mov	dptr,#_flag
   0D2D 74 01              3629 	mov	a,#0x01
   0D2F F0                 3630 	movx	@dptr,a
   0D30 E4                 3631 	clr	a
   0D31 A3                 3632 	inc	dptr
   0D32 F0                 3633 	movx	@dptr,a
                           3634 ;	Peephole 112.b	changed ljmp to sjmp
   0D33 80 16              3635 	sjmp	00105$
   0D35                    3636 00102$:
                           3637 ;	main.c:483: flag=0;
                           3638 ;	genAssign
   0D35 90s00r31           3639 	mov	dptr,#_flag
   0D38 E4                 3640 	clr	a
   0D39 F0                 3641 	movx	@dptr,a
   0D3A A3                 3642 	inc	dptr
   0D3B F0                 3643 	movx	@dptr,a
                           3644 ;	main.c:484: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3645 ;	genIpush
   0D3C 74rBE              3646 	mov	a,#__str_71
   0D3E C0 E0              3647 	push	acc
   0D40 74s0C              3648 	mov	a,#(__str_71 >> 8)
   0D42 C0 E0              3649 	push	acc
                           3650 ;	genCall
   0D44 12s00r00           3651 	lcall	_printf_tiny
   0D47 15 81              3652 	dec	sp
   0D49 15 81              3653 	dec	sp
   0D4B                    3654 00105$:
                           3655 ;	main.c:486: }while(flag==0);
                           3656 ;	genAssign
   0D4B 90s00r31           3657 	mov	dptr,#_flag
   0D4E E0                 3658 	movx	a,@dptr
   0D4F FA                 3659 	mov	r2,a
   0D50 A3                 3660 	inc	dptr
   0D51 E0                 3661 	movx	a,@dptr
                           3662 ;	genIfx
   0D52 FB                 3663 	mov	r3,a
                           3664 ;	Peephole 135	removed redundant mov
   0D53 4A                 3665 	orl	a,r2
                           3666 ;	genIfxJump
   0D54 70 03              3667 	jnz	00113$
   0D56 02s0CrB5           3668 	ljmp	00104$
   0D59                    3669 00113$:
                           3670 ;	main.c:487: rd=EEPROM_ReadByte(wordadd_int); //Function call to read from EEPROM
                           3671 ;	genAssign
   0D59 90s00r25           3672 	mov	dptr,#_wordadd_int
   0D5C E0                 3673 	movx	a,@dptr
   0D5D FA                 3674 	mov	r2,a
   0D5E A3                 3675 	inc	dptr
   0D5F E0                 3676 	movx	a,@dptr
   0D60 FB                 3677 	mov	r3,a
                           3678 ;	genCall
   0D61 8A 82              3679 	mov	dpl,r2
   0D63 8B 83              3680 	mov	dph,r3
   0D65 12s00r00           3681 	lcall	_EEPROM_ReadByte
   0D68 AA 82              3682 	mov	r2,dpl
                           3683 ;	genAssign
   0D6A 90s00r0F           3684 	mov	dptr,#_rd
   0D6D EA                 3685 	mov	a,r2
   0D6E F0                 3686 	movx	@dptr,a
                           3687 ;	main.c:488: printf("%03X: %02X\r\n",wordadd_int,rd);
                           3688 ;	genAssign
                           3689 ;	genCast
   0D6F EA                 3690 	mov	a,r2
   0D70 33                 3691 	rlc	a
   0D71 95 E0              3692 	subb	a,acc
   0D73 FB                 3693 	mov	r3,a
                           3694 ;	genIpush
   0D74 C0 02              3695 	push	ar2
   0D76 C0 03              3696 	push	ar3
                           3697 ;	genIpush
   0D78 90s00r25           3698 	mov	dptr,#_wordadd_int
   0D7B E0                 3699 	movx	a,@dptr
   0D7C C0 E0              3700 	push	acc
   0D7E A3                 3701 	inc	dptr
   0D7F E0                 3702 	movx	a,@dptr
   0D80 C0 E0              3703 	push	acc
                           3704 ;	genIpush
   0D82 74rBF              3705 	mov	a,#__str_76
   0D84 C0 E0              3706 	push	acc
   0D86 74s0D              3707 	mov	a,#(__str_76 >> 8)
   0D88 C0 E0              3708 	push	acc
   0D8A 74 80              3709 	mov	a,#0x80
   0D8C C0 E0              3710 	push	acc
                           3711 ;	genCall
   0D8E 12s00r00           3712 	lcall	_printf
   0D91 E5 81              3713 	mov	a,sp
   0D93 24 F9              3714 	add	a,#0xf9
   0D95 F5 81              3715 	mov	sp,a
                           3716 ;	Peephole 300	removed redundant label 00107$
   0D97 22                 3717 	ret
                           3718 ;------------------------------------------------------------
                           3719 ;Allocation info for local variables in function 'eseqread'
                           3720 ;------------------------------------------------------------
                           3721 ;------------------------------------------------------------
                           3722 ;	main.c:499: void eseqread()
                           3723 ;	-----------------------------------------
                           3724 ;	 function eseqread
                           3725 ;	-----------------------------------------
   0D98                    3726 _eseqread:
                           3727 ;	main.c:501: printf_tiny("\n\n\r Enter start Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3728 ;	genIpush
   0D98 74rCC              3729 	mov	a,#__str_77
   0D9A C0 E0              3730 	push	acc
   0D9C 74s0D              3731 	mov	a,#(__str_77 >> 8)
   0D9E C0 E0              3732 	push	acc
                           3733 ;	genCall
   0DA0 12s00r00           3734 	lcall	_printf_tiny
   0DA3 15 81              3735 	dec	sp
   0DA5 15 81              3736 	dec	sp
                           3737 ;	main.c:504: do{
   0DA7                    3738 00104$:
                           3739 ;	main.c:505: flag=0;
                           3740 ;	genAssign
   0DA7 90s00r31           3741 	mov	dptr,#_flag
   0DAA E4                 3742 	clr	a
   0DAB F0                 3743 	movx	@dptr,a
   0DAC A3                 3744 	inc	dptr
   0DAD F0                 3745 	movx	@dptr,a
                           3746 ;	main.c:506: start_address=getstr(); //Get start address from the user
                           3747 ;	genCall
   0DAE 12s00r00           3748 	lcall	_getstr
   0DB1 AA 82              3749 	mov	r2,dpl
   0DB3 AB 83              3750 	mov	r3,dph
   0DB5 AC F0              3751 	mov	r4,b
                           3752 ;	genAssign
   0DB7 90s00r09           3753 	mov	dptr,#_start_address
   0DBA EA                 3754 	mov	a,r2
   0DBB F0                 3755 	movx	@dptr,a
   0DBC A3                 3756 	inc	dptr
   0DBD EB                 3757 	mov	a,r3
   0DBE F0                 3758 	movx	@dptr,a
   0DBF A3                 3759 	inc	dptr
   0DC0 EC                 3760 	mov	a,r4
   0DC1 F0                 3761 	movx	@dptr,a
                           3762 ;	main.c:507: printf_tiny("Address Entered is: ");
                           3763 ;	genIpush
   0DC2 74rA9              3764 	mov	a,#__str_70
   0DC4 C0 E0              3765 	push	acc
   0DC6 74s0C              3766 	mov	a,#(__str_70 >> 8)
   0DC8 C0 E0              3767 	push	acc
                           3768 ;	genCall
   0DCA 12s00r00           3769 	lcall	_printf_tiny
   0DCD 15 81              3770 	dec	sp
   0DCF 15 81              3771 	dec	sp
                           3772 ;	main.c:508: putstr(start_address);
                           3773 ;	genAssign
   0DD1 90s00r09           3774 	mov	dptr,#_start_address
   0DD4 E0                 3775 	movx	a,@dptr
   0DD5 FA                 3776 	mov	r2,a
   0DD6 A3                 3777 	inc	dptr
   0DD7 E0                 3778 	movx	a,@dptr
   0DD8 FB                 3779 	mov	r3,a
   0DD9 A3                 3780 	inc	dptr
   0DDA E0                 3781 	movx	a,@dptr
   0DDB FC                 3782 	mov	r4,a
                           3783 ;	genCall
   0DDC 8A 82              3784 	mov	dpl,r2
   0DDE 8B 83              3785 	mov	dph,r3
   0DE0 8C F0              3786 	mov	b,r4
   0DE2 12s00r00           3787 	lcall	_putstr
                           3788 ;	main.c:509: printf_tiny("\r\n");
                           3789 ;	genIpush
   0DE5 74r2B              3790 	mov	a,#__str_1
   0DE7 C0 E0              3791 	push	acc
   0DE9 74s00              3792 	mov	a,#(__str_1 >> 8)
   0DEB C0 E0              3793 	push	acc
                           3794 ;	genCall
   0DED 12s00r00           3795 	lcall	_printf_tiny
   0DF0 15 81              3796 	dec	sp
   0DF2 15 81              3797 	dec	sp
                           3798 ;	main.c:510: startadd_int = atoh(start_address);        // Get data from the user    //Convert that data into hex
                           3799 ;	genAssign
   0DF4 90s00r09           3800 	mov	dptr,#_start_address
   0DF7 E0                 3801 	movx	a,@dptr
   0DF8 FA                 3802 	mov	r2,a
   0DF9 A3                 3803 	inc	dptr
   0DFA E0                 3804 	movx	a,@dptr
   0DFB FB                 3805 	mov	r3,a
   0DFC A3                 3806 	inc	dptr
   0DFD E0                 3807 	movx	a,@dptr
   0DFE FC                 3808 	mov	r4,a
                           3809 ;	genCall
   0DFF 8A 82              3810 	mov	dpl,r2
   0E01 8B 83              3811 	mov	dph,r3
   0E03 8C F0              3812 	mov	b,r4
   0E05 12s00r00           3813 	lcall	_atoh
   0E08 AA 82              3814 	mov	r2,dpl
   0E0A AB 83              3815 	mov	r3,dph
                           3816 ;	genAssign
   0E0C 90s00r29           3817 	mov	dptr,#_startadd_int
   0E0F EA                 3818 	mov	a,r2
   0E10 F0                 3819 	movx	@dptr,a
   0E11 A3                 3820 	inc	dptr
   0E12 EB                 3821 	mov	a,r3
   0E13 F0                 3822 	movx	@dptr,a
                           3823 ;	main.c:511: if(startadd_int<MAXADD)              // Check if address is in valid range
                           3824 ;	genCmpLt
                           3825 ;	genCmp
   0E14 C3                 3826 	clr	c
   0E15 EB                 3827 	mov	a,r3
   0E16 64 80              3828 	xrl	a,#0x80
   0E18 94 88              3829 	subb	a,#0x88
                           3830 ;	genIfxJump
                           3831 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0E1A 50 0B              3832 	jnc	00102$
                           3833 ;	Peephole 300	removed redundant label 00125$
                           3834 ;	main.c:513: flag=1;
                           3835 ;	genAssign
   0E1C 90s00r31           3836 	mov	dptr,#_flag
   0E1F 74 01              3837 	mov	a,#0x01
   0E21 F0                 3838 	movx	@dptr,a
   0E22 E4                 3839 	clr	a
   0E23 A3                 3840 	inc	dptr
   0E24 F0                 3841 	movx	@dptr,a
                           3842 ;	Peephole 112.b	changed ljmp to sjmp
   0E25 80 16              3843 	sjmp	00105$
   0E27                    3844 00102$:
                           3845 ;	main.c:517: flag=0;
                           3846 ;	genAssign
   0E27 90s00r31           3847 	mov	dptr,#_flag
   0E2A E4                 3848 	clr	a
   0E2B F0                 3849 	movx	@dptr,a
   0E2C A3                 3850 	inc	dptr
   0E2D F0                 3851 	movx	@dptr,a
                           3852 ;	main.c:518: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3853 ;	genIpush
   0E2E 74rBE              3854 	mov	a,#__str_71
   0E30 C0 E0              3855 	push	acc
   0E32 74s0C              3856 	mov	a,#(__str_71 >> 8)
   0E34 C0 E0              3857 	push	acc
                           3858 ;	genCall
   0E36 12s00r00           3859 	lcall	_printf_tiny
   0E39 15 81              3860 	dec	sp
   0E3B 15 81              3861 	dec	sp
   0E3D                    3862 00105$:
                           3863 ;	main.c:520: }while(flag==0);
                           3864 ;	genAssign
   0E3D 90s00r31           3865 	mov	dptr,#_flag
   0E40 E0                 3866 	movx	a,@dptr
   0E41 FA                 3867 	mov	r2,a
   0E42 A3                 3868 	inc	dptr
   0E43 E0                 3869 	movx	a,@dptr
                           3870 ;	genIfx
   0E44 FB                 3871 	mov	r3,a
                           3872 ;	Peephole 135	removed redundant mov
   0E45 4A                 3873 	orl	a,r2
                           3874 ;	genIfxJump
   0E46 70 03              3875 	jnz	00126$
   0E48 02s0DrA7           3876 	ljmp	00104$
   0E4B                    3877 00126$:
                           3878 ;	main.c:522: printf_tiny("\n\n\r Enter end Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3879 ;	genIpush
   0E4B 74r0E              3880 	mov	a,#__str_78
   0E4D C0 E0              3881 	push	acc
   0E4F 74s0E              3882 	mov	a,#(__str_78 >> 8)
   0E51 C0 E0              3883 	push	acc
                           3884 ;	genCall
   0E53 12s00r00           3885 	lcall	_printf_tiny
   0E56 15 81              3886 	dec	sp
   0E58 15 81              3887 	dec	sp
                           3888 ;	main.c:525: do{
   0E5A                    3889 00110$:
                           3890 ;	main.c:526: flag=0;
                           3891 ;	genAssign
   0E5A 90s00r31           3892 	mov	dptr,#_flag
   0E5D E4                 3893 	clr	a
   0E5E F0                 3894 	movx	@dptr,a
   0E5F A3                 3895 	inc	dptr
   0E60 F0                 3896 	movx	@dptr,a
                           3897 ;	main.c:527: end_address=getstr(); //Get end address from the user
                           3898 ;	genCall
   0E61 12s00r00           3899 	lcall	_getstr
   0E64 AA 82              3900 	mov	r2,dpl
   0E66 AB 83              3901 	mov	r3,dph
   0E68 AC F0              3902 	mov	r4,b
                           3903 ;	genAssign
   0E6A 90s00r0C           3904 	mov	dptr,#_end_address
   0E6D EA                 3905 	mov	a,r2
   0E6E F0                 3906 	movx	@dptr,a
   0E6F A3                 3907 	inc	dptr
   0E70 EB                 3908 	mov	a,r3
   0E71 F0                 3909 	movx	@dptr,a
   0E72 A3                 3910 	inc	dptr
   0E73 EC                 3911 	mov	a,r4
   0E74 F0                 3912 	movx	@dptr,a
                           3913 ;	main.c:528: printf_tiny("Address Entered is: ");
                           3914 ;	genIpush
   0E75 74rA9              3915 	mov	a,#__str_70
   0E77 C0 E0              3916 	push	acc
   0E79 74s0C              3917 	mov	a,#(__str_70 >> 8)
   0E7B C0 E0              3918 	push	acc
                           3919 ;	genCall
   0E7D 12s00r00           3920 	lcall	_printf_tiny
   0E80 15 81              3921 	dec	sp
   0E82 15 81              3922 	dec	sp
                           3923 ;	main.c:529: putstr(end_address);
                           3924 ;	genAssign
   0E84 90s00r0C           3925 	mov	dptr,#_end_address
   0E87 E0                 3926 	movx	a,@dptr
   0E88 FA                 3927 	mov	r2,a
   0E89 A3                 3928 	inc	dptr
   0E8A E0                 3929 	movx	a,@dptr
   0E8B FB                 3930 	mov	r3,a
   0E8C A3                 3931 	inc	dptr
   0E8D E0                 3932 	movx	a,@dptr
   0E8E FC                 3933 	mov	r4,a
                           3934 ;	genCall
   0E8F 8A 82              3935 	mov	dpl,r2
   0E91 8B 83              3936 	mov	dph,r3
   0E93 8C F0              3937 	mov	b,r4
   0E95 12s00r00           3938 	lcall	_putstr
                           3939 ;	main.c:530: printf_tiny("\r\n");
                           3940 ;	genIpush
   0E98 74r2B              3941 	mov	a,#__str_1
   0E9A C0 E0              3942 	push	acc
   0E9C 74s00              3943 	mov	a,#(__str_1 >> 8)
   0E9E C0 E0              3944 	push	acc
                           3945 ;	genCall
   0EA0 12s00r00           3946 	lcall	_printf_tiny
   0EA3 15 81              3947 	dec	sp
   0EA5 15 81              3948 	dec	sp
                           3949 ;	main.c:531: endadd_int = atoh(end_address);        // Get data from the user    //Convert that data into hex
                           3950 ;	genAssign
   0EA7 90s00r0C           3951 	mov	dptr,#_end_address
   0EAA E0                 3952 	movx	a,@dptr
   0EAB FA                 3953 	mov	r2,a
   0EAC A3                 3954 	inc	dptr
   0EAD E0                 3955 	movx	a,@dptr
   0EAE FB                 3956 	mov	r3,a
   0EAF A3                 3957 	inc	dptr
   0EB0 E0                 3958 	movx	a,@dptr
   0EB1 FC                 3959 	mov	r4,a
                           3960 ;	genCall
   0EB2 8A 82              3961 	mov	dpl,r2
   0EB4 8B 83              3962 	mov	dph,r3
   0EB6 8C F0              3963 	mov	b,r4
   0EB8 12s00r00           3964 	lcall	_atoh
   0EBB AA 82              3965 	mov	r2,dpl
   0EBD AB 83              3966 	mov	r3,dph
                           3967 ;	genAssign
   0EBF 90s00r2B           3968 	mov	dptr,#_endadd_int
   0EC2 EA                 3969 	mov	a,r2
   0EC3 F0                 3970 	movx	@dptr,a
   0EC4 A3                 3971 	inc	dptr
   0EC5 EB                 3972 	mov	a,r3
   0EC6 F0                 3973 	movx	@dptr,a
                           3974 ;	main.c:532: if(endadd_int<MAXADD)              // Check if address is in valid range
                           3975 ;	genCmpLt
                           3976 ;	genCmp
   0EC7 C3                 3977 	clr	c
   0EC8 EB                 3978 	mov	a,r3
   0EC9 64 80              3979 	xrl	a,#0x80
   0ECB 94 88              3980 	subb	a,#0x88
                           3981 ;	genIfxJump
                           3982 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0ECD 50 0B              3983 	jnc	00108$
                           3984 ;	Peephole 300	removed redundant label 00127$
                           3985 ;	main.c:534: flag=1;
                           3986 ;	genAssign
   0ECF 90s00r31           3987 	mov	dptr,#_flag
   0ED2 74 01              3988 	mov	a,#0x01
   0ED4 F0                 3989 	movx	@dptr,a
   0ED5 E4                 3990 	clr	a
   0ED6 A3                 3991 	inc	dptr
   0ED7 F0                 3992 	movx	@dptr,a
                           3993 ;	Peephole 112.b	changed ljmp to sjmp
   0ED8 80 16              3994 	sjmp	00111$
   0EDA                    3995 00108$:
                           3996 ;	main.c:538: flag=0;
                           3997 ;	genAssign
   0EDA 90s00r31           3998 	mov	dptr,#_flag
   0EDD E4                 3999 	clr	a
   0EDE F0                 4000 	movx	@dptr,a
   0EDF A3                 4001 	inc	dptr
   0EE0 F0                 4002 	movx	@dptr,a
                           4003 ;	main.c:539: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           4004 ;	genIpush
   0EE1 74rBE              4005 	mov	a,#__str_71
   0EE3 C0 E0              4006 	push	acc
   0EE5 74s0C              4007 	mov	a,#(__str_71 >> 8)
   0EE7 C0 E0              4008 	push	acc
                           4009 ;	genCall
   0EE9 12s00r00           4010 	lcall	_printf_tiny
   0EEC 15 81              4011 	dec	sp
   0EEE 15 81              4012 	dec	sp
   0EF0                    4013 00111$:
                           4014 ;	main.c:541: }while(flag==0);
                           4015 ;	genAssign
   0EF0 90s00r31           4016 	mov	dptr,#_flag
   0EF3 E0                 4017 	movx	a,@dptr
   0EF4 FA                 4018 	mov	r2,a
   0EF5 A3                 4019 	inc	dptr
   0EF6 E0                 4020 	movx	a,@dptr
                           4021 ;	genIfx
   0EF7 FB                 4022 	mov	r3,a
                           4023 ;	Peephole 135	removed redundant mov
   0EF8 4A                 4024 	orl	a,r2
                           4025 ;	genIfxJump
   0EF9 70 03              4026 	jnz	00128$
   0EFB 02s0Er5A           4027 	ljmp	00110$
   0EFE                    4028 00128$:
                           4029 ;	main.c:543: bytelen=(endadd_int-startadd_int)+1; //Calculate number of bytes
                           4030 ;	genAssign
   0EFE 90s00r29           4031 	mov	dptr,#_startadd_int
   0F01 E0                 4032 	movx	a,@dptr
   0F02 FA                 4033 	mov	r2,a
   0F03 A3                 4034 	inc	dptr
   0F04 E0                 4035 	movx	a,@dptr
   0F05 FB                 4036 	mov	r3,a
                           4037 ;	genAssign
   0F06 90s00r2B           4038 	mov	dptr,#_endadd_int
   0F09 E0                 4039 	movx	a,@dptr
   0F0A FC                 4040 	mov	r4,a
   0F0B A3                 4041 	inc	dptr
   0F0C E0                 4042 	movx	a,@dptr
   0F0D FD                 4043 	mov	r5,a
                           4044 ;	genMinus
   0F0E EC                 4045 	mov	a,r4
   0F0F C3                 4046 	clr	c
                           4047 ;	Peephole 236.l	used r2 instead of ar2
   0F10 9A                 4048 	subb	a,r2
   0F11 FA                 4049 	mov	r2,a
   0F12 ED                 4050 	mov	a,r5
                           4051 ;	Peephole 236.l	used r3 instead of ar3
   0F13 9B                 4052 	subb	a,r3
   0F14 FB                 4053 	mov	r3,a
                           4054 ;	genPlus
                           4055 ;     genPlusIncr
   0F15 0A                 4056 	inc	r2
   0F16 BA 00 01           4057 	cjne	r2,#0x00,00129$
   0F19 0B                 4058 	inc	r3
   0F1A                    4059 00129$:
                           4060 ;	genAssign
   0F1A 90s00r2F           4061 	mov	dptr,#_bytelen
   0F1D EA                 4062 	mov	a,r2
   0F1E F0                 4063 	movx	@dptr,a
   0F1F A3                 4064 	inc	dptr
   0F20 EB                 4065 	mov	a,r3
   0F21 F0                 4066 	movx	@dptr,a
                           4067 ;	main.c:544: if(bytelen>0) //Give an error if byte length is less than zero
                           4068 ;	genCmpGt
                           4069 ;	genCmp
   0F22 C3                 4070 	clr	c
                           4071 ;	Peephole 181	changed mov to clr
   0F23 E4                 4072 	clr	a
   0F24 9A                 4073 	subb	a,r2
                           4074 ;	Peephole 159	avoided xrl during execution
   0F25 74 80              4075 	mov	a,#(0x00 ^ 0x80)
   0F27 8B F0              4076 	mov	b,r3
   0F29 63 F0 80           4077 	xrl	b,#0x80
   0F2C 95 F0              4078 	subb	a,b
                           4079 ;	genIfxJump
                           4080 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0F2E 50 3B              4081 	jnc	00114$
                           4082 ;	Peephole 300	removed redundant label 00130$
                           4083 ;	main.c:546: printf_tiny("\r\n************Sequential Read************\r\n");
                           4084 ;	genIpush
   0F30 74r4E              4085 	mov	a,#__str_79
   0F32 C0 E0              4086 	push	acc
   0F34 74s0E              4087 	mov	a,#(__str_79 >> 8)
   0F36 C0 E0              4088 	push	acc
                           4089 ;	genCall
   0F38 12s00r00           4090 	lcall	_printf_tiny
   0F3B 15 81              4091 	dec	sp
   0F3D 15 81              4092 	dec	sp
                           4093 ;	main.c:547: seq_read(startadd_int,bytelen,seq_data); //Function call to perform sequential read of n number of bytes
                           4094 ;	genAssign
   0F3F 90s00r29           4095 	mov	dptr,#_startadd_int
   0F42 E0                 4096 	movx	a,@dptr
   0F43 FA                 4097 	mov	r2,a
   0F44 A3                 4098 	inc	dptr
   0F45 E0                 4099 	movx	a,@dptr
   0F46 FB                 4100 	mov	r3,a
                           4101 ;	genAssign
   0F47 90s00r2F           4102 	mov	dptr,#_bytelen
   0F4A E0                 4103 	movx	a,@dptr
   0F4B FC                 4104 	mov	r4,a
   0F4C A3                 4105 	inc	dptr
   0F4D E0                 4106 	movx	a,@dptr
   0F4E FD                 4107 	mov	r5,a
                           4108 ;	genAssign
   0F4F 90s00r00           4109 	mov	dptr,#_seq_read_PARM_2
   0F52 EC                 4110 	mov	a,r4
   0F53 F0                 4111 	movx	@dptr,a
   0F54 A3                 4112 	inc	dptr
   0F55 ED                 4113 	mov	a,r5
   0F56 F0                 4114 	movx	@dptr,a
                           4115 ;	genAssign
   0F57 90s00r00           4116 	mov	dptr,#_seq_read_PARM_3
   0F5A 74r47              4117 	mov	a,#_seq_data
   0F5C F0                 4118 	movx	@dptr,a
   0F5D A3                 4119 	inc	dptr
   0F5E 74s00              4120 	mov	a,#(_seq_data >> 8)
   0F60 F0                 4121 	movx	@dptr,a
   0F61 A3                 4122 	inc	dptr
                           4123 ;	Peephole 181	changed mov to clr
   0F62 E4                 4124 	clr	a
   0F63 F0                 4125 	movx	@dptr,a
                           4126 ;	genCall
   0F64 8A 82              4127 	mov	dpl,r2
   0F66 8B 83              4128 	mov	dph,r3
                           4129 ;	Peephole 112.b	changed ljmp to sjmp
                           4130 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4131 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0F68 02s00r00           4132 	ljmp	_seq_read
   0F6B                    4133 00114$:
                           4134 ;	main.c:552: printf_tiny("Please Enter a Higher End Address\r\n");
                           4135 ;	genIpush
   0F6B 74r7A              4136 	mov	a,#__str_80
   0F6D C0 E0              4137 	push	acc
   0F6F 74s0E              4138 	mov	a,#(__str_80 >> 8)
   0F71 C0 E0              4139 	push	acc
                           4140 ;	genCall
   0F73 12s00r00           4141 	lcall	_printf_tiny
   0F76 15 81              4142 	dec	sp
   0F78 15 81              4143 	dec	sp
                           4144 ;	Peephole 300	removed redundant label 00116$
   0F7A 22                 4145 	ret
                           4146 ;------------------------------------------------------------
                           4147 ;Allocation info for local variables in function 'lcdcreate_custom'
                           4148 ;------------------------------------------------------------
                           4149 ;sloc0                     Allocated with name '_lcdcreate_custom_sloc0_1_0'
                           4150 ;i                         Allocated with name '_lcdcreate_custom_i_1_1'
                           4151 ;j                         Allocated with name '_lcdcreate_custom_j_1_1'
                           4152 ;k                         Allocated with name '_lcdcreate_custom_k_1_1'
                           4153 ;------------------------------------------------------------
                           4154 ;	main.c:565: void lcdcreate_custom()
                           4155 ;	-----------------------------------------
                           4156 ;	 function lcdcreate_custom
                           4157 ;	-----------------------------------------
   0F7B                    4158 _lcdcreate_custom:
                           4159 ;	main.c:568: printf_tiny("\n\n\r\t Select Character code between 0 to 7: \t");
                           4160 ;	genIpush
   0F7B 74r9E              4161 	mov	a,#__str_81
   0F7D C0 E0              4162 	push	acc
   0F7F 74s0E              4163 	mov	a,#(__str_81 >> 8)
   0F81 C0 E0              4164 	push	acc
                           4165 ;	genCall
   0F83 12s00r00           4166 	lcall	_printf_tiny
   0F86 15 81              4167 	dec	sp
   0F88 15 81              4168 	dec	sp
                           4169 ;	main.c:569: do
   0F8A                    4170 00103$:
                           4171 ;	main.c:571: gets(c); // Get the Character code from the user, store it in num ; If Wrong value is entered then give error
                           4172 ;	genCall
                           4173 ;	Peephole 182.a	used 16 bit load of DPTR
   0F8A 90s00r17           4174 	mov	dptr,#_c
   0F8D 75 F0 00           4175 	mov	b,#0x00
   0F90 12s00r00           4176 	lcall	_gets
                           4177 ;	main.c:572: num=atoi(c);
                           4178 ;	genCall
                           4179 ;	Peephole 182.a	used 16 bit load of DPTR
   0F93 90s00r17           4180 	mov	dptr,#_c
   0F96 75 F0 00           4181 	mov	b,#0x00
   0F99 12s00r00           4182 	lcall	_atoi
   0F9C AA 82              4183 	mov	r2,dpl
   0F9E AB 83              4184 	mov	r3,dph
                           4185 ;	genAssign
   0FA0 90s00r43           4186 	mov	dptr,#_num
   0FA3 EA                 4187 	mov	a,r2
   0FA4 F0                 4188 	movx	@dptr,a
   0FA5 A3                 4189 	inc	dptr
   0FA6 EB                 4190 	mov	a,r3
   0FA7 F0                 4191 	movx	@dptr,a
                           4192 ;	main.c:573: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           4193 ;	genCmpGt
                           4194 ;	genCmp
   0FA8 C3                 4195 	clr	c
   0FA9 74 07              4196 	mov	a,#0x07
   0FAB 9A                 4197 	subb	a,r2
                           4198 ;	Peephole 159	avoided xrl during execution
   0FAC 74 80              4199 	mov	a,#(0x00 ^ 0x80)
   0FAE 8B F0              4200 	mov	b,r3
   0FB0 63 F0 80           4201 	xrl	b,#0x80
   0FB3 95 F0              4202 	subb	a,b
                           4203 ;	genIfxJump
                           4204 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0FB5 50 0F              4205 	jnc	00104$
                           4206 ;	Peephole 300	removed redundant label 00144$
                           4207 ;	genIpush
   0FB7 74rCB              4208 	mov	a,#__str_82
   0FB9 C0 E0              4209 	push	acc
   0FBB 74s0E              4210 	mov	a,#(__str_82 >> 8)
   0FBD C0 E0              4211 	push	acc
                           4212 ;	genCall
   0FBF 12s00r00           4213 	lcall	_printf_tiny
   0FC2 15 81              4214 	dec	sp
   0FC4 15 81              4215 	dec	sp
   0FC6                    4216 00104$:
                           4217 ;	main.c:574: }while(num>7);
                           4218 ;	genAssign
   0FC6 90s00r43           4219 	mov	dptr,#_num
   0FC9 E0                 4220 	movx	a,@dptr
   0FCA FA                 4221 	mov	r2,a
   0FCB A3                 4222 	inc	dptr
   0FCC E0                 4223 	movx	a,@dptr
   0FCD FB                 4224 	mov	r3,a
                           4225 ;	genCmpGt
                           4226 ;	genCmp
   0FCE C3                 4227 	clr	c
   0FCF 74 07              4228 	mov	a,#0x07
   0FD1 9A                 4229 	subb	a,r2
                           4230 ;	Peephole 159	avoided xrl during execution
   0FD2 74 80              4231 	mov	a,#(0x00 ^ 0x80)
   0FD4 8B F0              4232 	mov	b,r3
   0FD6 63 F0 80           4233 	xrl	b,#0x80
   0FD9 95 F0              4234 	subb	a,b
                           4235 ;	genIfxJump
                           4236 ;	Peephole 112.b	changed ljmp to sjmp
                           4237 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0FDB 40 AD              4238 	jc	00103$
                           4239 ;	Peephole 300	removed redundant label 00145$
                           4240 ;	main.c:575: ccode=num;
                           4241 ;	genCast
   0FDD 90s00r69           4242 	mov	dptr,#_ccode
   0FE0 EA                 4243 	mov	a,r2
   0FE1 F0                 4244 	movx	@dptr,a
                           4245 ;	main.c:578: printf_tiny("\n\n\r\t Enter pixel map in HEX in HH format from 00 to 1F: \t");
                           4246 ;	genIpush
   0FE2 74r00              4247 	mov	a,#__str_83
   0FE4 C0 E0              4248 	push	acc
   0FE6 74s0F              4249 	mov	a,#(__str_83 >> 8)
   0FE8 C0 E0              4250 	push	acc
                           4251 ;	genCall
   0FEA 12s00r00           4252 	lcall	_printf_tiny
   0FED 15 81              4253 	dec	sp
   0FEF 15 81              4254 	dec	sp
                           4255 ;	main.c:579: for(i=0;i<8;i++)
                           4256 ;	genAssign
   0FF1 7A 00              4257 	mov	r2,#0x00
   0FF3 7B 00              4258 	mov	r3,#0x00
   0FF5                    4259 00122$:
                           4260 ;	genCmpLt
                           4261 ;	genCmp
   0FF5 C3                 4262 	clr	c
   0FF6 EA                 4263 	mov	a,r2
   0FF7 94 08              4264 	subb	a,#0x08
   0FF9 EB                 4265 	mov	a,r3
   0FFA 64 80              4266 	xrl	a,#0x80
   0FFC 94 80              4267 	subb	a,#0x80
                           4268 ;	genIfxJump
   0FFE 40 03              4269 	jc	00146$
   1000 02s11rD6           4270 	ljmp	00125$
   1003                    4271 00146$:
                           4272 ;	main.c:581: printf_tiny("\n\r\t Data in row number %d: \t",i);
                           4273 ;	genIpush
   1003 C0 02              4274 	push	ar2
   1005 C0 03              4275 	push	ar3
   1007 C0 02              4276 	push	ar2
   1009 C0 03              4277 	push	ar3
                           4278 ;	genIpush
   100B 74r3A              4279 	mov	a,#__str_84
   100D C0 E0              4280 	push	acc
   100F 74s0F              4281 	mov	a,#(__str_84 >> 8)
   1011 C0 E0              4282 	push	acc
                           4283 ;	genCall
   1013 12s00r00           4284 	lcall	_printf_tiny
   1016 E5 81              4285 	mov	a,sp
   1018 24 FC              4286 	add	a,#0xfc
   101A F5 81              4287 	mov	sp,a
   101C D0 03              4288 	pop	ar3
   101E D0 02              4289 	pop	ar2
                           4290 ;	main.c:582: do
   1020                    4291 00108$:
                           4292 ;	main.c:584: gets(c);
                           4293 ;	genCall
                           4294 ;	Peephole 182.a	used 16 bit load of DPTR
   1020 90s00r17           4295 	mov	dptr,#_c
   1023 75 F0 00           4296 	mov	b,#0x00
   1026 C0 02              4297 	push	ar2
   1028 C0 03              4298 	push	ar3
   102A 12s00r00           4299 	lcall	_gets
   102D D0 03              4300 	pop	ar3
   102F D0 02              4301 	pop	ar2
                           4302 ;	main.c:585: num=atoh_data(c);// atoh_data function converts ascii values to the HEX numbers
                           4303 ;	genCall
                           4304 ;	Peephole 182.a	used 16 bit load of DPTR
   1031 90s00r17           4305 	mov	dptr,#_c
   1034 75 F0 00           4306 	mov	b,#0x00
   1037 C0 02              4307 	push	ar2
   1039 C0 03              4308 	push	ar3
   103B 12s00r00           4309 	lcall	_atoh_data
   103E AC 82              4310 	mov	r4,dpl
   1040 AD 83              4311 	mov	r5,dph
   1042 D0 03              4312 	pop	ar3
   1044 D0 02              4313 	pop	ar2
                           4314 ;	genAssign
   1046 90s00r43           4315 	mov	dptr,#_num
   1049 EC                 4316 	mov	a,r4
   104A F0                 4317 	movx	@dptr,a
   104B A3                 4318 	inc	dptr
   104C ED                 4319 	mov	a,r5
   104D F0                 4320 	movx	@dptr,a
                           4321 ;	main.c:586: if(num>31){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid HEX number between 00 to 1F in HH format:\t");}
                           4322 ;	genCmpGt
                           4323 ;	genCmp
   104E C3                 4324 	clr	c
   104F 74 1F              4325 	mov	a,#0x1F
   1051 9C                 4326 	subb	a,r4
                           4327 ;	Peephole 159	avoided xrl during execution
   1052 74 80              4328 	mov	a,#(0x00 ^ 0x80)
   1054 8D F0              4329 	mov	b,r5
   1056 63 F0 80           4330 	xrl	b,#0x80
   1059 95 F0              4331 	subb	a,b
                           4332 ;	genIfxJump
                           4333 ;	Peephole 108.a	removed ljmp by inverse jump logic
   105B 50 17              4334 	jnc	00109$
                           4335 ;	Peephole 300	removed redundant label 00147$
                           4336 ;	genIpush
   105D C0 02              4337 	push	ar2
   105F C0 03              4338 	push	ar3
   1061 74r57              4339 	mov	a,#__str_85
   1063 C0 E0              4340 	push	acc
   1065 74s0F              4341 	mov	a,#(__str_85 >> 8)
   1067 C0 E0              4342 	push	acc
                           4343 ;	genCall
   1069 12s00r00           4344 	lcall	_printf_tiny
   106C 15 81              4345 	dec	sp
   106E 15 81              4346 	dec	sp
   1070 D0 03              4347 	pop	ar3
   1072 D0 02              4348 	pop	ar2
   1074                    4349 00109$:
                           4350 ;	main.c:587: }while(num>31);
                           4351 ;	genAssign
   1074 90s00r43           4352 	mov	dptr,#_num
   1077 E0                 4353 	movx	a,@dptr
   1078 FC                 4354 	mov	r4,a
   1079 A3                 4355 	inc	dptr
   107A E0                 4356 	movx	a,@dptr
   107B FD                 4357 	mov	r5,a
                           4358 ;	genCmpGt
                           4359 ;	genCmp
   107C C3                 4360 	clr	c
   107D 74 1F              4361 	mov	a,#0x1F
   107F 9C                 4362 	subb	a,r4
                           4363 ;	Peephole 159	avoided xrl during execution
   1080 74 80              4364 	mov	a,#(0x00 ^ 0x80)
   1082 8D F0              4365 	mov	b,r5
   1084 63 F0 80           4366 	xrl	b,#0x80
   1087 95 F0              4367 	subb	a,b
                           4368 ;	genIfxJump
                           4369 ;	Peephole 112.b	changed ljmp to sjmp
                           4370 ;	Peephole 160.a	removed sjmp by inverse jump logic
   1089 40 95              4371 	jc	00108$
                           4372 ;	Peephole 300	removed redundant label 00148$
                           4373 ;	main.c:589: row_val[i]=num;         // Store data from user into row_val[] array
                           4374 ;	genPlus
                           4375 ;	Peephole 236.g	used r2 instead of ar2
   108B EA                 4376 	mov	a,r2
   108C 24r61              4377 	add	a,#_row_val
   108E F5 82              4378 	mov	dpl,a
                           4379 ;	Peephole 236.g	used r3 instead of ar3
   1090 EB                 4380 	mov	a,r3
   1091 34s00              4381 	addc	a,#(_row_val >> 8)
   1093 F5 83              4382 	mov	dph,a
                           4383 ;	genCast
                           4384 ;	genPointerSet
                           4385 ;     genFarPointerSet
   1095 EC                 4386 	mov	a,r4
   1096 F0                 4387 	movx	@dptr,a
                           4388 ;	main.c:590: disp[i]=atob(num);
                           4389 ;	genPlus
                           4390 ;	Peephole 236.g	used r2 instead of ar2
   1097 EA                 4391 	mov	a,r2
   1098 24r6A              4392 	add	a,#_disp
   109A FD                 4393 	mov	r5,a
                           4394 ;	Peephole 236.g	used r3 instead of ar3
   109B EB                 4395 	mov	a,r3
   109C 34s00              4396 	addc	a,#(_disp >> 8)
   109E FE                 4397 	mov	r6,a
                           4398 ;	genCall
   109F 8C 82              4399 	mov	dpl,r4
   10A1 C0 02              4400 	push	ar2
   10A3 C0 03              4401 	push	ar3
   10A5 C0 05              4402 	push	ar5
   10A7 C0 06              4403 	push	ar6
   10A9 12s00r00           4404 	lcall	_atob
   10AC AC 82              4405 	mov	r4,dpl
   10AE D0 06              4406 	pop	ar6
   10B0 D0 05              4407 	pop	ar5
   10B2 D0 03              4408 	pop	ar3
   10B4 D0 02              4409 	pop	ar2
                           4410 ;	genPointerSet
                           4411 ;     genFarPointerSet
   10B6 8D 82              4412 	mov	dpl,r5
   10B8 8E 83              4413 	mov	dph,r6
   10BA EC                 4414 	mov	a,r4
   10BB F0                 4415 	movx	@dptr,a
                           4416 ;	main.c:591: printf_tiny("\n\r\t\t      \t12345");
                           4417 ;	genIpush
   10BC C0 02              4418 	push	ar2
   10BE C0 03              4419 	push	ar3
   10C0 74rA1              4420 	mov	a,#__str_86
   10C2 C0 E0              4421 	push	acc
   10C4 74s0F              4422 	mov	a,#(__str_86 >> 8)
   10C6 C0 E0              4423 	push	acc
                           4424 ;	genCall
   10C8 12s00r00           4425 	lcall	_printf_tiny
   10CB 15 81              4426 	dec	sp
   10CD 15 81              4427 	dec	sp
   10CF D0 03              4428 	pop	ar3
   10D1 D0 02              4429 	pop	ar2
                           4430 ;	main.c:592: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           4431 ;	genAssign
   10D3 8A 04              4432 	mov	ar4,r2
   10D5 8B 05              4433 	mov	ar5,r3
                           4434 ;	genAssign
   10D7 7E 00              4435 	mov	r6,#0x00
   10D9 7F 00              4436 	mov	r7,#0x00
   10DB                    4437 00118$:
                           4438 ;	genCmpGt
                           4439 ;	genCmp
   10DB C3                 4440 	clr	c
   10DC EC                 4441 	mov	a,r4
   10DD 9E                 4442 	subb	a,r6
   10DE ED                 4443 	mov	a,r5
   10DF 64 80              4444 	xrl	a,#0x80
   10E1 8F F0              4445 	mov	b,r7
   10E3 63 F0 80           4446 	xrl	b,#0x80
   10E6 95 F0              4447 	subb	a,b
                           4448 ;	genIfxJump
   10E8 50 03              4449 	jnc	00149$
   10EA 02s11rCC           4450 	ljmp	00124$
   10ED                    4451 00149$:
                           4452 ;	main.c:594: printf_tiny("\n\r\t\tROW %d:\t",j);
                           4453 ;	genIpush
   10ED C0 04              4454 	push	ar4
   10EF C0 05              4455 	push	ar5
   10F1 C0 06              4456 	push	ar6
   10F3 C0 07              4457 	push	ar7
   10F5 C0 06              4458 	push	ar6
   10F7 C0 07              4459 	push	ar7
                           4460 ;	genIpush
   10F9 74rB2              4461 	mov	a,#__str_87
   10FB C0 E0              4462 	push	acc
   10FD 74s0F              4463 	mov	a,#(__str_87 >> 8)
   10FF C0 E0              4464 	push	acc
                           4465 ;	genCall
   1101 12s00r00           4466 	lcall	_printf_tiny
   1104 E5 81              4467 	mov	a,sp
   1106 24 FC              4468 	add	a,#0xfc
   1108 F5 81              4469 	mov	sp,a
   110A D0 07              4470 	pop	ar7
   110C D0 06              4471 	pop	ar6
   110E D0 05              4472 	pop	ar5
   1110 D0 04              4473 	pop	ar4
                           4474 ;	main.c:595: for(k=3;k<8;k++)
                           4475 ;	genPlus
                           4476 ;	Peephole 236.g	used r6 instead of ar6
   1112 EE                 4477 	mov	a,r6
   1113 24r6A              4478 	add	a,#_disp
   1115 F8                 4479 	mov	r0,a
                           4480 ;	Peephole 236.g	used r7 instead of ar7
   1116 EF                 4481 	mov	a,r7
   1117 34s00              4482 	addc	a,#(_disp >> 8)
   1119 F9                 4483 	mov	r1,a
                           4484 ;	genAssign
   111A 7A 03              4485 	mov	r2,#0x03
   111C 7B 00              4486 	mov	r3,#0x00
   111E                    4487 00114$:
                           4488 ;	genCmpLt
                           4489 ;	genCmp
   111E C3                 4490 	clr	c
   111F EA                 4491 	mov	a,r2
   1120 94 08              4492 	subb	a,#0x08
   1122 EB                 4493 	mov	a,r3
   1123 64 80              4494 	xrl	a,#0x80
   1125 94 80              4495 	subb	a,#0x80
                           4496 ;	genIfxJump
   1127 40 03              4497 	jc	00150$
   1129 02s11rC4           4498 	ljmp	00120$
   112C                    4499 00150$:
                           4500 ;	main.c:597: if((disp[j]>>k)&1)
                           4501 ;	genIpush
   112C C0 04              4502 	push	ar4
   112E C0 05              4503 	push	ar5
                           4504 ;	genPointerGet
                           4505 ;	genFarPointerGet
   1130 88 82              4506 	mov	dpl,r0
   1132 89 83              4507 	mov	dph,r1
   1134 E0                 4508 	movx	a,@dptr
   1135 FC                 4509 	mov	r4,a
                           4510 ;	genRightShift
   1136 8A F0              4511 	mov	b,r2
   1138 05 F0              4512 	inc	b
   113A EC                 4513 	mov	a,r4
   113B 80 02              4514 	sjmp	00152$
   113D                    4515 00151$:
   113D C3                 4516 	clr	c
   113E 13                 4517 	rrc	a
   113F                    4518 00152$:
   113F D5 F0 FB           4519 	djnz	b,00151$
                           4520 ;	genAnd
   1142 54 01              4521 	anl	a,#0x01
                           4522 ;	genIpop
   1144 D0 05              4523 	pop	ar5
   1146 D0 04              4524 	pop	ar4
                           4525 ;	genIfx
                           4526 ;	genIfxJump
                           4527 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1148 60 3A              4528 	jz	00112$
                           4529 ;	Peephole 300	removed redundant label 00153$
                           4530 ;	main.c:599: printf_tiny("%c",CUSTOMCHAR_DIS);
                           4531 ;	genIpush
   114A C0 02              4532 	push	ar2
   114C C0 03              4533 	push	ar3
   114E C0 04              4534 	push	ar4
   1150 C0 05              4535 	push	ar5
   1152 C0 06              4536 	push	ar6
   1154 C0 07              4537 	push	ar7
   1156 C0 00              4538 	push	ar0
   1158 C0 01              4539 	push	ar1
   115A 74 FF              4540 	mov	a,#0xFF
   115C C0 E0              4541 	push	acc
                           4542 ;	Peephole 181	changed mov to clr
   115E E4                 4543 	clr	a
   115F C0 E0              4544 	push	acc
                           4545 ;	genIpush
   1161 74rBF              4546 	mov	a,#__str_88
   1163 C0 E0              4547 	push	acc
   1165 74s0F              4548 	mov	a,#(__str_88 >> 8)
   1167 C0 E0              4549 	push	acc
                           4550 ;	genCall
   1169 12s00r00           4551 	lcall	_printf_tiny
   116C E5 81              4552 	mov	a,sp
   116E 24 FC              4553 	add	a,#0xfc
   1170 F5 81              4554 	mov	sp,a
   1172 D0 01              4555 	pop	ar1
   1174 D0 00              4556 	pop	ar0
   1176 D0 07              4557 	pop	ar7
   1178 D0 06              4558 	pop	ar6
   117A D0 05              4559 	pop	ar5
   117C D0 04              4560 	pop	ar4
   117E D0 03              4561 	pop	ar3
   1180 D0 02              4562 	pop	ar2
                           4563 ;	Peephole 112.b	changed ljmp to sjmp
   1182 80 38              4564 	sjmp	00116$
   1184                    4565 00112$:
                           4566 ;	main.c:603: printf_tiny("%c",'_');
                           4567 ;	genIpush
   1184 C0 02              4568 	push	ar2
   1186 C0 03              4569 	push	ar3
   1188 C0 04              4570 	push	ar4
   118A C0 05              4571 	push	ar5
   118C C0 06              4572 	push	ar6
   118E C0 07              4573 	push	ar7
   1190 C0 00              4574 	push	ar0
   1192 C0 01              4575 	push	ar1
   1194 74 5F              4576 	mov	a,#0x5F
   1196 C0 E0              4577 	push	acc
                           4578 ;	Peephole 181	changed mov to clr
   1198 E4                 4579 	clr	a
   1199 C0 E0              4580 	push	acc
                           4581 ;	genIpush
   119B 74rBF              4582 	mov	a,#__str_88
   119D C0 E0              4583 	push	acc
   119F 74s0F              4584 	mov	a,#(__str_88 >> 8)
   11A1 C0 E0              4585 	push	acc
                           4586 ;	genCall
   11A3 12s00r00           4587 	lcall	_printf_tiny
   11A6 E5 81              4588 	mov	a,sp
   11A8 24 FC              4589 	add	a,#0xfc
   11AA F5 81              4590 	mov	sp,a
   11AC D0 01              4591 	pop	ar1
   11AE D0 00              4592 	pop	ar0
   11B0 D0 07              4593 	pop	ar7
   11B2 D0 06              4594 	pop	ar6
   11B4 D0 05              4595 	pop	ar5
   11B6 D0 04              4596 	pop	ar4
   11B8 D0 03              4597 	pop	ar3
   11BA D0 02              4598 	pop	ar2
   11BC                    4599 00116$:
                           4600 ;	main.c:595: for(k=3;k<8;k++)
                           4601 ;	genPlus
                           4602 ;     genPlusIncr
   11BC 0A                 4603 	inc	r2
   11BD BA 00 01           4604 	cjne	r2,#0x00,00154$
   11C0 0B                 4605 	inc	r3
   11C1                    4606 00154$:
   11C1 02s11r1E           4607 	ljmp	00114$
   11C4                    4608 00120$:
                           4609 ;	main.c:592: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           4610 ;	genPlus
                           4611 ;     genPlusIncr
   11C4 0E                 4612 	inc	r6
   11C5 BE 00 01           4613 	cjne	r6,#0x00,00155$
   11C8 0F                 4614 	inc	r7
   11C9                    4615 00155$:
   11C9 02s10rDB           4616 	ljmp	00118$
   11CC                    4617 00124$:
                           4618 ;	main.c:579: for(i=0;i<8;i++)
                           4619 ;	genPlus
                           4620 ;     genPlusIncr
   11CC 74 01              4621 	mov	a,#0x01
                           4622 ;	Peephole 236.a	used r4 instead of ar4
   11CE 2C                 4623 	add	a,r4
   11CF FA                 4624 	mov	r2,a
                           4625 ;	Peephole 181	changed mov to clr
   11D0 E4                 4626 	clr	a
                           4627 ;	Peephole 236.b	used r5 instead of ar5
   11D1 3D                 4628 	addc	a,r5
   11D2 FB                 4629 	mov	r3,a
   11D3 02s0FrF5           4630 	ljmp	00122$
   11D6                    4631 00125$:
                           4632 ;	main.c:608: lcdcreatechar(ccode,row_val);           // After getting all 7 values, new character  is stored in the CGRAM
                           4633 ;	genAssign
   11D6 90s00r69           4634 	mov	dptr,#_ccode
   11D9 E0                 4635 	movx	a,@dptr
   11DA FA                 4636 	mov	r2,a
                           4637 ;	genCast
   11DB 90s00r00           4638 	mov	dptr,#_lcdcreatechar_PARM_2
   11DE 74r61              4639 	mov	a,#_row_val
   11E0 F0                 4640 	movx	@dptr,a
   11E1 A3                 4641 	inc	dptr
   11E2 74s00              4642 	mov	a,#(_row_val >> 8)
   11E4 F0                 4643 	movx	@dptr,a
   11E5 A3                 4644 	inc	dptr
   11E6 74 00              4645 	mov	a,#0x0
   11E8 F0                 4646 	movx	@dptr,a
                           4647 ;	genCall
   11E9 8A 82              4648 	mov	dpl,r2
                           4649 ;	Peephole 253.b	replaced lcall/ret with ljmp
   11EB 02s00r00           4650 	ljmp	_lcdcreatechar
                           4651 ;
                           4652 ;------------------------------------------------------------
                           4653 ;Allocation info for local variables in function 'lcd_displaycustom'
                           4654 ;------------------------------------------------------------
                           4655 ;------------------------------------------------------------
                           4656 ;	main.c:621: void lcd_displaycustom()
                           4657 ;	-----------------------------------------
                           4658 ;	 function lcd_displaycustom
                           4659 ;	-----------------------------------------
   11EE                    4660 _lcd_displaycustom:
                           4661 ;	main.c:623: printf_tiny("\n\n\r\t Select Character code between 0 to 7 to display: \t");
                           4662 ;	genIpush
   11EE 74rC2              4663 	mov	a,#__str_89
   11F0 C0 E0              4664 	push	acc
   11F2 74s0F              4665 	mov	a,#(__str_89 >> 8)
   11F4 C0 E0              4666 	push	acc
                           4667 ;	genCall
   11F6 12s00r00           4668 	lcall	_printf_tiny
   11F9 15 81              4669 	dec	sp
   11FB 15 81              4670 	dec	sp
                           4671 ;	main.c:624: do{
   11FD                    4672 00103$:
                           4673 ;	main.c:625: gets(c); //Get the character from the user
                           4674 ;	genCall
                           4675 ;	Peephole 182.a	used 16 bit load of DPTR
   11FD 90s00r17           4676 	mov	dptr,#_c
   1200 75 F0 00           4677 	mov	b,#0x00
   1203 12s00r00           4678 	lcall	_gets
                           4679 ;	main.c:626: num=atoi(c);
                           4680 ;	genCall
                           4681 ;	Peephole 182.a	used 16 bit load of DPTR
   1206 90s00r17           4682 	mov	dptr,#_c
   1209 75 F0 00           4683 	mov	b,#0x00
   120C 12s00r00           4684 	lcall	_atoi
   120F AA 82              4685 	mov	r2,dpl
   1211 AB 83              4686 	mov	r3,dph
                           4687 ;	genAssign
   1213 90s00r43           4688 	mov	dptr,#_num
   1216 EA                 4689 	mov	a,r2
   1217 F0                 4690 	movx	@dptr,a
   1218 A3                 4691 	inc	dptr
   1219 EB                 4692 	mov	a,r3
   121A F0                 4693 	movx	@dptr,a
                           4694 ;	main.c:627: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           4695 ;	genCmpGt
                           4696 ;	genCmp
   121B C3                 4697 	clr	c
   121C 74 07              4698 	mov	a,#0x07
   121E 9A                 4699 	subb	a,r2
                           4700 ;	Peephole 159	avoided xrl during execution
   121F 74 80              4701 	mov	a,#(0x00 ^ 0x80)
   1221 8B F0              4702 	mov	b,r3
   1223 63 F0 80           4703 	xrl	b,#0x80
   1226 95 F0              4704 	subb	a,b
                           4705 ;	genIfxJump
                           4706 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1228 50 0F              4707 	jnc	00104$
                           4708 ;	Peephole 300	removed redundant label 00111$
                           4709 ;	genIpush
   122A 74rCB              4710 	mov	a,#__str_82
   122C C0 E0              4711 	push	acc
   122E 74s0E              4712 	mov	a,#(__str_82 >> 8)
   1230 C0 E0              4713 	push	acc
                           4714 ;	genCall
   1232 12s00r00           4715 	lcall	_printf_tiny
   1235 15 81              4716 	dec	sp
   1237 15 81              4717 	dec	sp
   1239                    4718 00104$:
                           4719 ;	main.c:628: }while(num>7);
                           4720 ;	genAssign
   1239 90s00r43           4721 	mov	dptr,#_num
   123C E0                 4722 	movx	a,@dptr
   123D FA                 4723 	mov	r2,a
   123E A3                 4724 	inc	dptr
   123F E0                 4725 	movx	a,@dptr
   1240 FB                 4726 	mov	r3,a
                           4727 ;	genCmpGt
                           4728 ;	genCmp
   1241 C3                 4729 	clr	c
   1242 74 07              4730 	mov	a,#0x07
   1244 9A                 4731 	subb	a,r2
                           4732 ;	Peephole 159	avoided xrl during execution
   1245 74 80              4733 	mov	a,#(0x00 ^ 0x80)
   1247 8B F0              4734 	mov	b,r3
   1249 63 F0 80           4735 	xrl	b,#0x80
   124C 95 F0              4736 	subb	a,b
                           4737 ;	genIfxJump
                           4738 ;	Peephole 112.b	changed ljmp to sjmp
                           4739 ;	Peephole 160.a	removed sjmp by inverse jump logic
   124E 40 AD              4740 	jc	00103$
                           4741 ;	Peephole 300	removed redundant label 00112$
                           4742 ;	main.c:630: ccode=num;
                           4743 ;	genCast
                           4744 ;	genAssign
   1250 90s00r69           4745 	mov	dptr,#_ccode
   1253 EA                 4746 	mov	a,r2
   1254 F0                 4747 	movx	@dptr,a
                           4748 ;	main.c:631: lcddisplay_custom(ccode,CUSTOM_ROW,num); //display the customer character created by the user on a particular location
                           4749 ;	genAssign
   1255 90s00r00           4750 	mov	dptr,#_lcddisplay_custom_PARM_2
   1258 74 02              4751 	mov	a,#0x02
   125A F0                 4752 	movx	@dptr,a
                           4753 ;	genAssign
   125B 90s00r00           4754 	mov	dptr,#_lcddisplay_custom_PARM_3
   125E EA                 4755 	mov	a,r2
   125F F0                 4756 	movx	@dptr,a
                           4757 ;	genCall
   1260 8A 82              4758 	mov	dpl,r2
                           4759 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1262 02s00r00           4760 	ljmp	_lcddisplay_custom
                           4761 ;
                           4762 ;------------------------------------------------------------
                           4763 ;Allocation info for local variables in function 'statusreport'
                           4764 ;------------------------------------------------------------
                           4765 ;status                    Allocated with name '_statusreport_status_1_1'
                           4766 ;finalstatus               Allocated with name '_statusreport_finalstatus_1_1'
                           4767 ;------------------------------------------------------------
                           4768 ;	main.c:643: unsigned char statusreport(unsigned char status)
                           4769 ;	-----------------------------------------
                           4770 ;	 function statusreport
                           4771 ;	-----------------------------------------
   1265                    4772 _statusreport:
                           4773 ;	genReceive
   1265 E5 82              4774 	mov	a,dpl
   1267 90s00r91           4775 	mov	dptr,#_statusreport_status_1_1
   126A F0                 4776 	movx	@dptr,a
                           4777 ;	main.c:647: pinstatus[0]=(status & 0x01); //storing direction of the each port pin in an array
                           4778 ;	genAssign
   126B 90s00r91           4779 	mov	dptr,#_statusreport_status_1_1
   126E E0                 4780 	movx	a,@dptr
   126F FA                 4781 	mov	r2,a
                           4782 ;	genAnd
   1270 74 01              4783 	mov	a,#0x01
   1272 5A                 4784 	anl	a,r2
                           4785 ;	genPointerSet
                           4786 ;     genFarPointerSet
   1273 FB                 4787 	mov	r3,a
   1274 90s00r84           4788 	mov	dptr,#_pinstatus
                           4789 ;	Peephole 100	removed redundant mov
   1277 F0                 4790 	movx	@dptr,a
                           4791 ;	main.c:648: pinstatus[1]=(status & 0x02)>>1;
                           4792 ;	genAnd
   1278 74 02              4793 	mov	a,#0x02
   127A 5A                 4794 	anl	a,r2
                           4795 ;	genRightShift
                           4796 ;	genRightShiftLiteral
                           4797 ;	genrshOne
   127B FB                 4798 	mov	r3,a
                           4799 ;	Peephole 105	removed redundant mov
   127C C3                 4800 	clr	c
   127D 13                 4801 	rrc	a
                           4802 ;	genPointerSet
                           4803 ;     genFarPointerSet
   127E FB                 4804 	mov	r3,a
   127F 90s00r85           4805 	mov	dptr,#(_pinstatus + 0x0001)
                           4806 ;	Peephole 100	removed redundant mov
   1282 F0                 4807 	movx	@dptr,a
                           4808 ;	main.c:649: pinstatus[2]=(status & 0x04)>>2;
                           4809 ;	genAnd
   1283 74 04              4810 	mov	a,#0x04
   1285 5A                 4811 	anl	a,r2
                           4812 ;	genRightShift
                           4813 ;	genRightShiftLiteral
                           4814 ;	genrshOne
   1286 FB                 4815 	mov	r3,a
                           4816 ;	Peephole 105	removed redundant mov
   1287 03                 4817 	rr	a
   1288 03                 4818 	rr	a
   1289 54 3F              4819 	anl	a,#0x3f
                           4820 ;	genPointerSet
                           4821 ;     genFarPointerSet
   128B FB                 4822 	mov	r3,a
   128C 90s00r86           4823 	mov	dptr,#(_pinstatus + 0x0002)
                           4824 ;	Peephole 100	removed redundant mov
   128F F0                 4825 	movx	@dptr,a
                           4826 ;	main.c:650: pinstatus[3]=(status & 0x08)>>3;
                           4827 ;	genAnd
   1290 74 08              4828 	mov	a,#0x08
   1292 5A                 4829 	anl	a,r2
                           4830 ;	genRightShift
                           4831 ;	genRightShiftLiteral
                           4832 ;	genrshOne
   1293 FB                 4833 	mov	r3,a
                           4834 ;	Peephole 105	removed redundant mov
   1294 C4                 4835 	swap	a
   1295 23                 4836 	rl	a
   1296 54 1F              4837 	anl	a,#0x1f
                           4838 ;	genPointerSet
                           4839 ;     genFarPointerSet
   1298 FB                 4840 	mov	r3,a
   1299 90s00r87           4841 	mov	dptr,#(_pinstatus + 0x0003)
                           4842 ;	Peephole 100	removed redundant mov
   129C F0                 4843 	movx	@dptr,a
                           4844 ;	main.c:651: pinstatus[4]=(status & 0x10)>>4;
                           4845 ;	genAnd
   129D 74 10              4846 	mov	a,#0x10
   129F 5A                 4847 	anl	a,r2
                           4848 ;	genRightShift
                           4849 ;	genRightShiftLiteral
                           4850 ;	genrshOne
   12A0 FB                 4851 	mov	r3,a
                           4852 ;	Peephole 105	removed redundant mov
   12A1 C4                 4853 	swap	a
   12A2 54 0F              4854 	anl	a,#0x0f
                           4855 ;	genPointerSet
                           4856 ;     genFarPointerSet
   12A4 FB                 4857 	mov	r3,a
   12A5 90s00r88           4858 	mov	dptr,#(_pinstatus + 0x0004)
                           4859 ;	Peephole 100	removed redundant mov
   12A8 F0                 4860 	movx	@dptr,a
                           4861 ;	main.c:652: pinstatus[5]=(status & 0x20)>>5;
                           4862 ;	genAnd
   12A9 74 20              4863 	mov	a,#0x20
   12AB 5A                 4864 	anl	a,r2
                           4865 ;	genRightShift
                           4866 ;	genRightShiftLiteral
                           4867 ;	genrshOne
   12AC FB                 4868 	mov	r3,a
                           4869 ;	Peephole 105	removed redundant mov
   12AD C4                 4870 	swap	a
   12AE 03                 4871 	rr	a
   12AF 54 07              4872 	anl	a,#0x07
                           4873 ;	genPointerSet
                           4874 ;     genFarPointerSet
   12B1 FB                 4875 	mov	r3,a
   12B2 90s00r89           4876 	mov	dptr,#(_pinstatus + 0x0005)
                           4877 ;	Peephole 100	removed redundant mov
   12B5 F0                 4878 	movx	@dptr,a
                           4879 ;	main.c:653: pinstatus[6]=(status & 0x40)>>6;
                           4880 ;	genAnd
   12B6 74 40              4881 	mov	a,#0x40
   12B8 5A                 4882 	anl	a,r2
                           4883 ;	genRightShift
                           4884 ;	genRightShiftLiteral
                           4885 ;	genrshOne
   12B9 FB                 4886 	mov	r3,a
                           4887 ;	Peephole 105	removed redundant mov
   12BA 23                 4888 	rl	a
   12BB 23                 4889 	rl	a
   12BC 54 03              4890 	anl	a,#0x03
                           4891 ;	genPointerSet
                           4892 ;     genFarPointerSet
   12BE FB                 4893 	mov	r3,a
   12BF 90s00r8A           4894 	mov	dptr,#(_pinstatus + 0x0006)
                           4895 ;	Peephole 100	removed redundant mov
   12C2 F0                 4896 	movx	@dptr,a
                           4897 ;	main.c:654: pinstatus[7]=(status & 0x80)>>7;
                           4898 ;	genAnd
   12C3 53 02 80           4899 	anl	ar2,#0x80
                           4900 ;	genRightShift
                           4901 ;	genRightShiftLiteral
                           4902 ;	genrshOne
   12C6 EA                 4903 	mov	a,r2
   12C7 23                 4904 	rl	a
   12C8 54 01              4905 	anl	a,#0x01
                           4906 ;	genPointerSet
                           4907 ;     genFarPointerSet
   12CA FA                 4908 	mov	r2,a
   12CB 90s00r8B           4909 	mov	dptr,#(_pinstatus + 0x0007)
                           4910 ;	Peephole 100	removed redundant mov
   12CE F0                 4911 	movx	@dptr,a
                           4912 ;	main.c:656: finalstatus = (pinstatus[0]|(pinstatus[1]<<1)|(pinstatus[2]<<2)|(pinstatus[3]<<3)|(pinstatus[4]<<4)|(pinstatus[5]<<5)|(pinstatus[6]<<6)|(pinstatus[7]<<7));
                           4913 ;	genPointerGet
                           4914 ;	genFarPointerGet
   12CF 90s00r84           4915 	mov	dptr,#_pinstatus
   12D2 E0                 4916 	movx	a,@dptr
   12D3 FA                 4917 	mov	r2,a
                           4918 ;	genPointerGet
                           4919 ;	genFarPointerGet
   12D4 90s00r85           4920 	mov	dptr,#(_pinstatus + 0x0001)
   12D7 E0                 4921 	movx	a,@dptr
                           4922 ;	genLeftShift
                           4923 ;	genLeftShiftLiteral
                           4924 ;	genlshOne
                           4925 ;	Peephole 105	removed redundant mov
                           4926 ;	genOr
                           4927 ;	Peephole 204	removed redundant mov
   12D8 25 E0              4928 	add	a,acc
   12DA FB                 4929 	mov	r3,a
                           4930 ;	Peephole 105	removed redundant mov
   12DB 42 02              4931 	orl	ar2,a
                           4932 ;	genPointerGet
                           4933 ;	genFarPointerGet
   12DD 90s00r86           4934 	mov	dptr,#(_pinstatus + 0x0002)
   12E0 E0                 4935 	movx	a,@dptr
                           4936 ;	genLeftShift
                           4937 ;	genLeftShiftLiteral
                           4938 ;	genlshOne
   12E1 FB                 4939 	mov	r3,a
                           4940 ;	Peephole 105	removed redundant mov
   12E2 25 E0              4941 	add	a,acc
   12E4 25 E0              4942 	add	a,acc
                           4943 ;	genOr
   12E6 FB                 4944 	mov	r3,a
                           4945 ;	Peephole 105	removed redundant mov
   12E7 42 02              4946 	orl	ar2,a
                           4947 ;	genPointerGet
                           4948 ;	genFarPointerGet
   12E9 90s00r87           4949 	mov	dptr,#(_pinstatus + 0x0003)
   12EC E0                 4950 	movx	a,@dptr
                           4951 ;	genLeftShift
                           4952 ;	genLeftShiftLiteral
                           4953 ;	genlshOne
   12ED FB                 4954 	mov	r3,a
                           4955 ;	Peephole 105	removed redundant mov
   12EE C4                 4956 	swap	a
   12EF 03                 4957 	rr	a
   12F0 54 F8              4958 	anl	a,#0xf8
                           4959 ;	genOr
   12F2 FB                 4960 	mov	r3,a
                           4961 ;	Peephole 105	removed redundant mov
   12F3 42 02              4962 	orl	ar2,a
                           4963 ;	genPointerGet
                           4964 ;	genFarPointerGet
   12F5 90s00r88           4965 	mov	dptr,#(_pinstatus + 0x0004)
   12F8 E0                 4966 	movx	a,@dptr
                           4967 ;	genLeftShift
                           4968 ;	genLeftShiftLiteral
                           4969 ;	genlshOne
   12F9 FB                 4970 	mov	r3,a
                           4971 ;	Peephole 105	removed redundant mov
   12FA C4                 4972 	swap	a
   12FB 54 F0              4973 	anl	a,#0xf0
                           4974 ;	genOr
   12FD FB                 4975 	mov	r3,a
                           4976 ;	Peephole 105	removed redundant mov
   12FE 42 02              4977 	orl	ar2,a
                           4978 ;	genPointerGet
                           4979 ;	genFarPointerGet
   1300 90s00r89           4980 	mov	dptr,#(_pinstatus + 0x0005)
   1303 E0                 4981 	movx	a,@dptr
                           4982 ;	genLeftShift
                           4983 ;	genLeftShiftLiteral
                           4984 ;	genlshOne
   1304 FB                 4985 	mov	r3,a
                           4986 ;	Peephole 105	removed redundant mov
   1305 C4                 4987 	swap	a
   1306 23                 4988 	rl	a
   1307 54 E0              4989 	anl	a,#0xe0
                           4990 ;	genOr
   1309 FB                 4991 	mov	r3,a
                           4992 ;	Peephole 105	removed redundant mov
   130A 42 02              4993 	orl	ar2,a
                           4994 ;	genPointerGet
                           4995 ;	genFarPointerGet
   130C 90s00r8A           4996 	mov	dptr,#(_pinstatus + 0x0006)
   130F E0                 4997 	movx	a,@dptr
                           4998 ;	genLeftShift
                           4999 ;	genLeftShiftLiteral
                           5000 ;	genlshOne
   1310 FB                 5001 	mov	r3,a
                           5002 ;	Peephole 105	removed redundant mov
   1311 03                 5003 	rr	a
   1312 03                 5004 	rr	a
   1313 54 C0              5005 	anl	a,#0xc0
                           5006 ;	genOr
   1315 FB                 5007 	mov	r3,a
                           5008 ;	Peephole 105	removed redundant mov
   1316 42 02              5009 	orl	ar2,a
                           5010 ;	genPointerGet
                           5011 ;	genFarPointerGet
   1318 90s00r8B           5012 	mov	dptr,#(_pinstatus + 0x0007)
   131B E0                 5013 	movx	a,@dptr
                           5014 ;	genLeftShift
                           5015 ;	genLeftShiftLiteral
                           5016 ;	genlshOne
   131C FB                 5017 	mov	r3,a
                           5018 ;	Peephole 105	removed redundant mov
   131D 03                 5019 	rr	a
   131E 54 80              5020 	anl	a,#0x80
                           5021 ;	genOr
   1320 FB                 5022 	mov	r3,a
                           5023 ;	Peephole 105	removed redundant mov
   1321 42 02              5024 	orl	ar2,a
                           5025 ;	main.c:657: return finalstatus;
                           5026 ;	genRet
   1323 8A 82              5027 	mov	dpl,r2
                           5028 ;	Peephole 300	removed redundant label 00101$
   1325 22                 5029 	ret
                           5030 ;------------------------------------------------------------
                           5031 ;Allocation info for local variables in function 'displaystatus'
                           5032 ;------------------------------------------------------------
                           5033 ;i                         Allocated with name '_displaystatus_i_1_1'
                           5034 ;------------------------------------------------------------
                           5035 ;	main.c:669: void displaystatus()
                           5036 ;	-----------------------------------------
                           5037 ;	 function displaystatus
                           5038 ;	-----------------------------------------
   1326                    5039 _displaystatus:
                           5040 ;	main.c:673: for(i=0;i<8;i++)
                           5041 ;	genAssign
   1326 7A 00              5042 	mov	r2,#0x00
   1328 7B 00              5043 	mov	r3,#0x00
   132A                    5044 00104$:
                           5045 ;	genCmpLt
                           5046 ;	genCmp
   132A C3                 5047 	clr	c
   132B EA                 5048 	mov	a,r2
   132C 94 08              5049 	subb	a,#0x08
   132E EB                 5050 	mov	a,r3
   132F 64 80              5051 	xrl	a,#0x80
   1331 94 80              5052 	subb	a,#0x80
                           5053 ;	genIfxJump
                           5054 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1333 50 52              5055 	jnc	00108$
                           5056 ;	Peephole 300	removed redundant label 00114$
                           5057 ;	main.c:675: if(pinstatus[i]==1)   //Check if port pin is input or output
                           5058 ;	genPlus
                           5059 ;	Peephole 236.g	used r2 instead of ar2
   1335 EA                 5060 	mov	a,r2
   1336 24r84              5061 	add	a,#_pinstatus
   1338 F5 82              5062 	mov	dpl,a
                           5063 ;	Peephole 236.g	used r3 instead of ar3
   133A EB                 5064 	mov	a,r3
   133B 34s00              5065 	addc	a,#(_pinstatus >> 8)
   133D F5 83              5066 	mov	dph,a
                           5067 ;	genPointerGet
                           5068 ;	genFarPointerGet
   133F E0                 5069 	movx	a,@dptr
   1340 FC                 5070 	mov	r4,a
                           5071 ;	genCmpEq
                           5072 ;	gencjneshort
                           5073 ;	Peephole 112.b	changed ljmp to sjmp
                           5074 ;	Peephole 198.b	optimized misc jump sequence
   1341 BC 01 1F           5075 	cjne	r4,#0x01,00102$
                           5076 ;	Peephole 200.b	removed redundant sjmp
                           5077 ;	Peephole 300	removed redundant label 00115$
                           5078 ;	Peephole 300	removed redundant label 00116$
                           5079 ;	main.c:676: printf_tiny("P%d pin is a input pin\r\n",i);
                           5080 ;	genIpush
   1344 C0 02              5081 	push	ar2
   1346 C0 03              5082 	push	ar3
   1348 C0 02              5083 	push	ar2
   134A C0 03              5084 	push	ar3
                           5085 ;	genIpush
   134C 74rFA              5086 	mov	a,#__str_90
   134E C0 E0              5087 	push	acc
   1350 74s0F              5088 	mov	a,#(__str_90 >> 8)
   1352 C0 E0              5089 	push	acc
                           5090 ;	genCall
   1354 12s00r00           5091 	lcall	_printf_tiny
   1357 E5 81              5092 	mov	a,sp
   1359 24 FC              5093 	add	a,#0xfc
   135B F5 81              5094 	mov	sp,a
   135D D0 03              5095 	pop	ar3
   135F D0 02              5096 	pop	ar2
                           5097 ;	Peephole 112.b	changed ljmp to sjmp
   1361 80 1D              5098 	sjmp	00106$
   1363                    5099 00102$:
                           5100 ;	main.c:678: printf_tiny("P%d pin is a output pin\r\n",i);
                           5101 ;	genIpush
   1363 C0 02              5102 	push	ar2
   1365 C0 03              5103 	push	ar3
   1367 C0 02              5104 	push	ar2
   1369 C0 03              5105 	push	ar3
                           5106 ;	genIpush
   136B 74r13              5107 	mov	a,#__str_91
   136D C0 E0              5108 	push	acc
   136F 74s10              5109 	mov	a,#(__str_91 >> 8)
   1371 C0 E0              5110 	push	acc
                           5111 ;	genCall
   1373 12s00r00           5112 	lcall	_printf_tiny
   1376 E5 81              5113 	mov	a,sp
   1378 24 FC              5114 	add	a,#0xfc
   137A F5 81              5115 	mov	sp,a
   137C D0 03              5116 	pop	ar3
   137E D0 02              5117 	pop	ar2
   1380                    5118 00106$:
                           5119 ;	main.c:673: for(i=0;i<8;i++)
                           5120 ;	genPlus
                           5121 ;     genPlusIncr
   1380 0A                 5122 	inc	r2
                           5123 ;	Peephole 112.b	changed ljmp to sjmp
                           5124 ;	Peephole 243	avoided branch to sjmp
   1381 BA 00 A6           5125 	cjne	r2,#0x00,00104$
   1384 0B                 5126 	inc	r3
                           5127 ;	Peephole 300	removed redundant label 00117$
   1385 80 A3              5128 	sjmp	00104$
   1387                    5129 00108$:
   1387 22                 5130 	ret
                           5131 ;------------------------------------------------------------
                           5132 ;Allocation info for local variables in function 'displaydata'
                           5133 ;------------------------------------------------------------
                           5134 ;i                         Allocated with name '_displaydata_i_1_1'
                           5135 ;------------------------------------------------------------
                           5136 ;	main.c:691: void displaydata()
                           5137 ;	-----------------------------------------
                           5138 ;	 function displaydata
                           5139 ;	-----------------------------------------
   1388                    5140 _displaydata:
                           5141 ;	main.c:694: dataread=IOEX_Read(); //Read data from the port pins
                           5142 ;	genCall
   1388 12s00r00           5143 	lcall	_IOEX_Read
   138B E5 82              5144 	mov	a,dpl
                           5145 ;	genAssign
   138D 90s00r60           5146 	mov	dptr,#_dataread
   1390 F0                 5147 	movx	@dptr,a
                           5148 ;	main.c:695: for(i=0;i<8;i++)
                           5149 ;	genAssign
   1391 7A 00              5150 	mov	r2,#0x00
   1393 7B 00              5151 	mov	r3,#0x00
   1395                    5152 00101$:
                           5153 ;	genCmpLt
                           5154 ;	genCmp
   1395 C3                 5155 	clr	c
   1396 EA                 5156 	mov	a,r2
   1397 94 08              5157 	subb	a,#0x08
   1399 EB                 5158 	mov	a,r3
   139A 64 80              5159 	xrl	a,#0x80
   139C 94 80              5160 	subb	a,#0x80
                           5161 ;	genIfxJump
                           5162 ;	Peephole 108.a	removed ljmp by inverse jump logic
   139E 50 3E              5163 	jnc	00105$
                           5164 ;	Peephole 300	removed redundant label 00110$
                           5165 ;	main.c:697: printf_tiny("Data at Port Pin %d is %x\r\n",i,((dataread>>i)& 0x01));
                           5166 ;	genAssign
   13A0 90s00r60           5167 	mov	dptr,#_dataread
   13A3 E0                 5168 	movx	a,@dptr
   13A4 FC                 5169 	mov	r4,a
                           5170 ;	genRightShift
   13A5 8A F0              5171 	mov	b,r2
   13A7 05 F0              5172 	inc	b
   13A9 EC                 5173 	mov	a,r4
   13AA 80 02              5174 	sjmp	00112$
   13AC                    5175 00111$:
   13AC C3                 5176 	clr	c
   13AD 13                 5177 	rrc	a
   13AE                    5178 00112$:
   13AE D5 F0 FB           5179 	djnz	b,00111$
                           5180 ;	genAnd
   13B1 54 01              5181 	anl	a,#0x01
   13B3 FC                 5182 	mov	r4,a
                           5183 ;	genCast
   13B4 7D 00              5184 	mov	r5,#0x00
                           5185 ;	genIpush
   13B6 C0 02              5186 	push	ar2
   13B8 C0 03              5187 	push	ar3
   13BA C0 04              5188 	push	ar4
   13BC C0 05              5189 	push	ar5
                           5190 ;	genIpush
   13BE C0 02              5191 	push	ar2
   13C0 C0 03              5192 	push	ar3
                           5193 ;	genIpush
   13C2 74r2D              5194 	mov	a,#__str_92
   13C4 C0 E0              5195 	push	acc
   13C6 74s10              5196 	mov	a,#(__str_92 >> 8)
   13C8 C0 E0              5197 	push	acc
                           5198 ;	genCall
   13CA 12s00r00           5199 	lcall	_printf_tiny
   13CD E5 81              5200 	mov	a,sp
   13CF 24 FA              5201 	add	a,#0xfa
   13D1 F5 81              5202 	mov	sp,a
   13D3 D0 03              5203 	pop	ar3
   13D5 D0 02              5204 	pop	ar2
                           5205 ;	main.c:695: for(i=0;i<8;i++)
                           5206 ;	genPlus
                           5207 ;     genPlusIncr
   13D7 0A                 5208 	inc	r2
                           5209 ;	Peephole 112.b	changed ljmp to sjmp
                           5210 ;	Peephole 243	avoided branch to sjmp
   13D8 BA 00 BA           5211 	cjne	r2,#0x00,00101$
   13DB 0B                 5212 	inc	r3
                           5213 ;	Peephole 300	removed redundant label 00113$
   13DC 80 B7              5214 	sjmp	00101$
   13DE                    5215 00105$:
   13DE 22                 5216 	ret
                           5217 ;------------------------------------------------------------
                           5218 ;Allocation info for local variables in function 'timer_isr'
                           5219 ;------------------------------------------------------------
                           5220 ;i                         Allocated with name '_timer_isr_i_1_1'
                           5221 ;------------------------------------------------------------
                           5222 ;	main.c:710: void timer_isr() interrupt 1
                           5223 ;	-----------------------------------------
                           5224 ;	 function timer_isr
                           5225 ;	-----------------------------------------
   13DF                    5226 _timer_isr:
   13DF C0 E0              5227 	push	acc
   13E1 C0 F0              5228 	push	b
   13E3 C0 82              5229 	push	dpl
   13E5 C0 83              5230 	push	dph
   13E7 C0 02              5231 	push	(0+2)
   13E9 C0 03              5232 	push	(0+3)
   13EB C0 04              5233 	push	(0+4)
   13ED C0 05              5234 	push	(0+5)
   13EF C0 06              5235 	push	(0+6)
   13F1 C0 07              5236 	push	(0+7)
   13F3 C0 00              5237 	push	(0+0)
   13F5 C0 01              5238 	push	(0+1)
   13F7 C0 D0              5239 	push	psw
   13F9 75 D0 00           5240 	mov	psw,#0x00
                           5241 ;	main.c:713: TH0 =   TIMERLOAD_HIGH; //Load the timer value
                           5242 ;	genAssign
   13FC 75 8C 4E           5243 	mov	_TH0,#0x4E
                           5244 ;	main.c:714: TL0 =   TIMERLOAD_LOW;
                           5245 ;	genAssign
   13FF 75 8A 00           5246 	mov	_TL0,#0x00
                           5247 ;	main.c:715: tflag++;
                           5248 ;	genAssign
   1402 90s00r3F           5249 	mov	dptr,#_tflag
   1405 E0                 5250 	movx	a,@dptr
   1406 FA                 5251 	mov	r2,a
   1407 A3                 5252 	inc	dptr
   1408 E0                 5253 	movx	a,@dptr
   1409 FB                 5254 	mov	r3,a
                           5255 ;	genPlus
   140A 90s00r3F           5256 	mov	dptr,#_tflag
                           5257 ;     genPlusIncr
   140D 74 01              5258 	mov	a,#0x01
                           5259 ;	Peephole 236.a	used r2 instead of ar2
   140F 2A                 5260 	add	a,r2
   1410 F0                 5261 	movx	@dptr,a
                           5262 ;	Peephole 181	changed mov to clr
   1411 E4                 5263 	clr	a
                           5264 ;	Peephole 236.b	used r3 instead of ar3
   1412 3B                 5265 	addc	a,r3
   1413 A3                 5266 	inc	dptr
   1414 F0                 5267 	movx	@dptr,a
                           5268 ;	main.c:717: if(tflag==2)                             // Interrupt occurs every 50 ms , so for 100ms accuracy flag is compared with 2
                           5269 ;	genAssign
   1415 90s00r3F           5270 	mov	dptr,#_tflag
   1418 E0                 5271 	movx	a,@dptr
   1419 FA                 5272 	mov	r2,a
   141A A3                 5273 	inc	dptr
   141B E0                 5274 	movx	a,@dptr
   141C FB                 5275 	mov	r3,a
                           5276 ;	genCmpEq
                           5277 ;	gencjneshort
                           5278 ;	Peephole 112.b	changed ljmp to sjmp
                           5279 ;	Peephole 198.a	optimized misc jump sequence
   141D BA 02 0D           5280 	cjne	r2,#0x02,00103$
   1420 BB 00 0A           5281 	cjne	r3,#0x00,00103$
                           5282 ;	Peephole 200.b	removed redundant sjmp
                           5283 ;	Peephole 300	removed redundant label 00106$
                           5284 ;	Peephole 300	removed redundant label 00107$
                           5285 ;	main.c:720: clock_control();                    // Clock control for displaying clock
                           5286 ;	genCall
   1423 12s00r00           5287 	lcall	_clock_control
                           5288 ;	main.c:721: tflag=0;
                           5289 ;	genAssign
   1426 90s00r3F           5290 	mov	dptr,#_tflag
   1429 E4                 5291 	clr	a
   142A F0                 5292 	movx	@dptr,a
   142B A3                 5293 	inc	dptr
   142C F0                 5294 	movx	@dptr,a
   142D                    5295 00103$:
   142D D0 D0              5296 	pop	psw
   142F D0 01              5297 	pop	(0+1)
   1431 D0 00              5298 	pop	(0+0)
   1433 D0 07              5299 	pop	(0+7)
   1435 D0 06              5300 	pop	(0+6)
   1437 D0 05              5301 	pop	(0+5)
   1439 D0 04              5302 	pop	(0+4)
   143B D0 03              5303 	pop	(0+3)
   143D D0 02              5304 	pop	(0+2)
   143F D0 83              5305 	pop	dph
   1441 D0 82              5306 	pop	dpl
   1443 D0 F0              5307 	pop	b
   1445 D0 E0              5308 	pop	acc
   1447 32                 5309 	reti
                           5310 ;------------------------------------------------------------
                           5311 ;Allocation info for local variables in function 'external_isr'
                           5312 ;------------------------------------------------------------
                           5313 ;------------------------------------------------------------
                           5314 ;	main.c:733: void external_isr() interrupt 0
                           5315 ;	-----------------------------------------
                           5316 ;	 function external_isr
                           5317 ;	-----------------------------------------
   1448                    5318 _external_isr:
   1448 C0 E0              5319 	push	acc
   144A C0 F0              5320 	push	b
   144C C0 82              5321 	push	dpl
   144E C0 83              5322 	push	dph
   1450 C0 02              5323 	push	(0+2)
   1452 C0 03              5324 	push	(0+3)
   1454 C0 04              5325 	push	(0+4)
   1456 C0 05              5326 	push	(0+5)
   1458 C0 06              5327 	push	(0+6)
   145A C0 07              5328 	push	(0+7)
   145C C0 00              5329 	push	(0+0)
   145E C0 01              5330 	push	(0+1)
   1460 C0 D0              5331 	push	psw
   1462 75 D0 00           5332 	mov	psw,#0x00
                           5333 ;	main.c:735: io_counter++;               // Increment the counter after every button press
                           5334 ;	genAssign
   1465 90s00r38           5335 	mov	dptr,#_io_counter
   1468 E0                 5336 	movx	a,@dptr
   1469 FA                 5337 	mov	r2,a
   146A A3                 5338 	inc	dptr
   146B E0                 5339 	movx	a,@dptr
   146C FB                 5340 	mov	r3,a
                           5341 ;	genPlus
   146D 90s00r38           5342 	mov	dptr,#_io_counter
                           5343 ;     genPlusIncr
   1470 74 01              5344 	mov	a,#0x01
                           5345 ;	Peephole 236.a	used r2 instead of ar2
   1472 2A                 5346 	add	a,r2
   1473 F0                 5347 	movx	@dptr,a
                           5348 ;	Peephole 181	changed mov to clr
   1474 E4                 5349 	clr	a
                           5350 ;	Peephole 236.b	used r3 instead of ar3
   1475 3B                 5351 	addc	a,r3
   1476 A3                 5352 	inc	dptr
   1477 F0                 5353 	movx	@dptr,a
                           5354 ;	main.c:736: if(io_counter==16)          // After 16 counts reset the counter to 0;
                           5355 ;	genAssign
   1478 90s00r38           5356 	mov	dptr,#_io_counter
   147B E0                 5357 	movx	a,@dptr
   147C FA                 5358 	mov	r2,a
   147D A3                 5359 	inc	dptr
   147E E0                 5360 	movx	a,@dptr
   147F FB                 5361 	mov	r3,a
                           5362 ;	genCmpEq
                           5363 ;	gencjneshort
                           5364 ;	Peephole 112.b	changed ljmp to sjmp
                           5365 ;	Peephole 198.a	optimized misc jump sequence
   1480 BA 10 0A           5366 	cjne	r2,#0x10,00102$
   1483 BB 00 07           5367 	cjne	r3,#0x00,00102$
                           5368 ;	Peephole 200.b	removed redundant sjmp
                           5369 ;	Peephole 300	removed redundant label 00106$
                           5370 ;	Peephole 300	removed redundant label 00107$
                           5371 ;	main.c:738: io_counter=0;
                           5372 ;	genAssign
   1486 90s00r38           5373 	mov	dptr,#_io_counter
   1489 E4                 5374 	clr	a
   148A F0                 5375 	movx	@dptr,a
   148B A3                 5376 	inc	dptr
   148C F0                 5377 	movx	@dptr,a
   148D                    5378 00102$:
                           5379 ;	main.c:740: ioexp_count(io_counter);    //Function call to write the counter value on higher 4 port pins
                           5380 ;	genAssign
   148D 90s00r38           5381 	mov	dptr,#_io_counter
   1490 E0                 5382 	movx	a,@dptr
   1491 FA                 5383 	mov	r2,a
   1492 A3                 5384 	inc	dptr
   1493 E0                 5385 	movx	a,@dptr
   1494 FB                 5386 	mov	r3,a
                           5387 ;	genCall
   1495 8A 82              5388 	mov	dpl,r2
   1497 8B 83              5389 	mov	dph,r3
   1499 12s00r00           5390 	lcall	_ioexp_count
                           5391 ;	Peephole 300	removed redundant label 00103$
   149C D0 D0              5392 	pop	psw
   149E D0 01              5393 	pop	(0+1)
   14A0 D0 00              5394 	pop	(0+0)
   14A2 D0 07              5395 	pop	(0+7)
   14A4 D0 06              5396 	pop	(0+6)
   14A6 D0 05              5397 	pop	(0+5)
   14A8 D0 04              5398 	pop	(0+4)
   14AA D0 03              5399 	pop	(0+3)
   14AC D0 02              5400 	pop	(0+2)
   14AE D0 83              5401 	pop	dph
   14B0 D0 82              5402 	pop	dpl
   14B2 D0 F0              5403 	pop	b
   14B4 D0 E0              5404 	pop	acc
   14B6 32                 5405 	reti
                           5406 ;------------------------------------------------------------
                           5407 ;Allocation info for local variables in function 'timer2_isr'
                           5408 ;------------------------------------------------------------
                           5409 ;------------------------------------------------------------
                           5410 ;	main.c:744: void timer2_isr() interrupt 5
                           5411 ;	-----------------------------------------
                           5412 ;	 function timer2_isr
                           5413 ;	-----------------------------------------
   14B7                    5414 _timer2_isr:
   14B7 C0 E0              5415 	push	acc
   14B9 C0 82              5416 	push	dpl
   14BB C0 83              5417 	push	dph
   14BD C0 02              5418 	push	ar2
   14BF C0 03              5419 	push	ar3
   14C1 C0 D0              5420 	push	psw
   14C3 75 D0 00           5421 	mov	psw,#0x00
                           5422 ;	main.c:746: TR2=0;
                           5423 ;	genAssign
   14C6 C2 CA              5424 	clr	_TR2
                           5425 ;	main.c:747: TF2=0;
                           5426 ;	genAssign
   14C8 C2 CF              5427 	clr	_TF2
                           5428 ;	main.c:748: TH2=0X00;
                           5429 ;	genAssign
   14CA 75 CD 00           5430 	mov	_TH2,#0x00
                           5431 ;	main.c:749: TL2=0X00;
                           5432 ;	genAssign
   14CD 75 CC 00           5433 	mov	_TL2,#0x00
                           5434 ;	main.c:750: P1_2 = !P1_2;
                           5435 ;	genNot
   14D0 B2 92              5436 	cpl	_P1_2
                           5437 ;	main.c:756: t2flag++;
                           5438 ;	genAssign
   14D2 90s00r8D           5439 	mov	dptr,#_t2flag
   14D5 E0                 5440 	movx	a,@dptr
   14D6 FA                 5441 	mov	r2,a
   14D7 A3                 5442 	inc	dptr
   14D8 E0                 5443 	movx	a,@dptr
   14D9 FB                 5444 	mov	r3,a
                           5445 ;	genPlus
   14DA 90s00r8D           5446 	mov	dptr,#_t2flag
                           5447 ;     genPlusIncr
   14DD 74 01              5448 	mov	a,#0x01
                           5449 ;	Peephole 236.a	used r2 instead of ar2
   14DF 2A                 5450 	add	a,r2
   14E0 F0                 5451 	movx	@dptr,a
                           5452 ;	Peephole 181	changed mov to clr
   14E1 E4                 5453 	clr	a
                           5454 ;	Peephole 236.b	used r3 instead of ar3
   14E2 3B                 5455 	addc	a,r3
   14E3 A3                 5456 	inc	dptr
   14E4 F0                 5457 	movx	@dptr,a
                           5458 ;	main.c:759: TR2=1;
                           5459 ;	genAssign
   14E5 D2 CA              5460 	setb	_TR2
                           5461 ;	Peephole 300	removed redundant label 00101$
   14E7 D0 D0              5462 	pop	psw
   14E9 D0 03              5463 	pop	ar3
   14EB D0 02              5464 	pop	ar2
   14ED D0 83              5465 	pop	dph
   14EF D0 82              5466 	pop	dpl
   14F1 D0 E0              5467 	pop	acc
   14F3 32                 5468 	reti
                           5469 ;	eliminated unneeded push/pop b
                           5470 ;------------------------------------------------------------
                           5471 ;Allocation info for local variables in function 'string_search'
                           5472 ;------------------------------------------------------------
                           5473 ;sloc0                     Allocated with name '_string_search_sloc0_1_0'
                           5474 ;sloc1                     Allocated with name '_string_search_sloc1_1_0'
                           5475 ;str_srch                  Allocated with name '_string_search_str_srch_1_1'
                           5476 ;str_temp                  Allocated with name '_string_search_str_temp_1_1'
                           5477 ;tempadd                   Allocated with name '_string_search_tempadd_1_1'
                           5478 ;permadd                   Allocated with name '_string_search_permadd_1_1'
                           5479 ;tempsearchadd             Allocated with name '_string_search_tempsearchadd_1_1'
                           5480 ;searchadd                 Allocated with name '_string_search_searchadd_1_1'
                           5481 ;counti                    Allocated with name '_string_search_counti_1_1'
                           5482 ;count_index               Allocated with name '_string_search_count_index_1_1'
                           5483 ;countsearch               Allocated with name '_string_search_countsearch_1_1'
                           5484 ;len                       Allocated with name '_string_search_len_1_1'
                           5485 ;searchcount               Allocated with name '_string_search_searchcount_1_1'
                           5486 ;j                         Allocated with name '_string_search_j_1_1'
                           5487 ;k                         Allocated with name '_string_search_k_1_1'
                           5488 ;m                         Allocated with name '_string_search_m_1_1'
                           5489 ;r                         Allocated with name '_string_search_r_1_1'
                           5490 ;i                         Allocated with name '_string_search_i_1_1'
                           5491 ;------------------------------------------------------------
                           5492 ;	main.c:762: void string_search()
                           5493 ;	-----------------------------------------
                           5494 ;	 function string_search
                           5495 ;	-----------------------------------------
   14F4                    5496 _string_search:
                           5497 ;	main.c:771: j=0;k=0;m=0;r=0;i=0;
                           5498 ;	genAssign
   14F4 90s01r01           5499 	mov	dptr,#_string_search_j_1_1
   14F7 E4                 5500 	clr	a
   14F8 F0                 5501 	movx	@dptr,a
   14F9 A3                 5502 	inc	dptr
   14FA F0                 5503 	movx	@dptr,a
                           5504 ;	genAssign
   14FB 90s01r03           5505 	mov	dptr,#_string_search_k_1_1
   14FE E4                 5506 	clr	a
   14FF F0                 5507 	movx	@dptr,a
   1500 A3                 5508 	inc	dptr
   1501 F0                 5509 	movx	@dptr,a
                           5510 ;	genAssign
   1502 90s01r05           5511 	mov	dptr,#_string_search_m_1_1
   1505 E4                 5512 	clr	a
   1506 F0                 5513 	movx	@dptr,a
   1507 A3                 5514 	inc	dptr
   1508 F0                 5515 	movx	@dptr,a
                           5516 ;	genAssign
   1509 90s01r07           5517 	mov	dptr,#_string_search_r_1_1
   150C E4                 5518 	clr	a
   150D F0                 5519 	movx	@dptr,a
   150E A3                 5520 	inc	dptr
   150F F0                 5521 	movx	@dptr,a
                           5522 ;	main.c:772: t2flag=0;
                           5523 ;	genAssign
   1510 90s00r8D           5524 	mov	dptr,#_t2flag
   1513 E4                 5525 	clr	a
   1514 F0                 5526 	movx	@dptr,a
   1515 A3                 5527 	inc	dptr
   1516 F0                 5528 	movx	@dptr,a
                           5529 ;	main.c:773: time_value=0;
                           5530 ;	genAssign
   1517 90s00r8F           5531 	mov	dptr,#_time_value
   151A E4                 5532 	clr	a
   151B F0                 5533 	movx	@dptr,a
   151C A3                 5534 	inc	dptr
   151D F0                 5535 	movx	@dptr,a
                           5536 ;	main.c:774: counti=0;
                           5537 ;	genAssign
   151E 90s00rFB           5538 	mov	dptr,#_string_search_counti_1_1
   1521 E4                 5539 	clr	a
   1522 F0                 5540 	movx	@dptr,a
   1523 A3                 5541 	inc	dptr
   1524 F0                 5542 	movx	@dptr,a
                           5543 ;	main.c:775: count_index=0;
                           5544 ;	genAssign
   1525 90s00rFD           5545 	mov	dptr,#_string_search_count_index_1_1
   1528 E4                 5546 	clr	a
   1529 F0                 5547 	movx	@dptr,a
   152A A3                 5548 	inc	dptr
   152B F0                 5549 	movx	@dptr,a
                           5550 ;	main.c:776: countsearch=0;
                           5551 ;	genAssign
   152C 90s00rFF           5552 	mov	dptr,#_string_search_countsearch_1_1
   152F E4                 5553 	clr	a
   1530 F0                 5554 	movx	@dptr,a
   1531 A3                 5555 	inc	dptr
   1532 F0                 5556 	movx	@dptr,a
                           5557 ;	main.c:777: tempsearchadd=0x80;
                           5558 ;	genAssign
   1533 90s00rF9           5559 	mov	dptr,#_string_search_tempsearchadd_1_1
   1536 74 80              5560 	mov	a,#0x80
   1538 F0                 5561 	movx	@dptr,a
                           5562 ;	main.c:779: printf_tiny("Enter the string you want to search");
                           5563 ;	genIpush
   1539 74r49              5564 	mov	a,#__str_93
   153B C0 E0              5565 	push	acc
   153D 74s10              5566 	mov	a,#(__str_93 >> 8)
   153F C0 E0              5567 	push	acc
                           5568 ;	genCall
   1541 12s00r00           5569 	lcall	_printf_tiny
   1544 15 81              5570 	dec	sp
   1546 15 81              5571 	dec	sp
                           5572 ;	main.c:780: str_srch=getstr();
                           5573 ;	genCall
   1548 12s00r00           5574 	lcall	_getstr
   154B AA 82              5575 	mov	r2,dpl
   154D AB 83              5576 	mov	r3,dph
   154F AC F0              5577 	mov	r4,b
                           5578 ;	main.c:781: printf_tiny("The string you want to search is: ");
                           5579 ;	genIpush
   1551 C0 02              5580 	push	ar2
   1553 C0 03              5581 	push	ar3
   1555 C0 04              5582 	push	ar4
   1557 74r6D              5583 	mov	a,#__str_94
   1559 C0 E0              5584 	push	acc
   155B 74s10              5585 	mov	a,#(__str_94 >> 8)
   155D C0 E0              5586 	push	acc
                           5587 ;	genCall
   155F 12s00r00           5588 	lcall	_printf_tiny
   1562 15 81              5589 	dec	sp
   1564 15 81              5590 	dec	sp
   1566 D0 04              5591 	pop	ar4
   1568 D0 03              5592 	pop	ar3
   156A D0 02              5593 	pop	ar2
                           5594 ;	main.c:782: putstr(str_srch);
                           5595 ;	genCall
   156C 8A 82              5596 	mov	dpl,r2
   156E 8B 83              5597 	mov	dph,r3
   1570 8C F0              5598 	mov	b,r4
   1572 C0 02              5599 	push	ar2
   1574 C0 03              5600 	push	ar3
   1576 C0 04              5601 	push	ar4
   1578 12s00r00           5602 	lcall	_putstr
   157B D0 04              5603 	pop	ar4
   157D D0 03              5604 	pop	ar3
   157F D0 02              5605 	pop	ar2
                           5606 ;	main.c:783: printf_tiny("\r\n");
                           5607 ;	genIpush
   1581 C0 02              5608 	push	ar2
   1583 C0 03              5609 	push	ar3
   1585 C0 04              5610 	push	ar4
   1587 74r2B              5611 	mov	a,#__str_1
   1589 C0 E0              5612 	push	acc
   158B 74s00              5613 	mov	a,#(__str_1 >> 8)
   158D C0 E0              5614 	push	acc
                           5615 ;	genCall
   158F 12s00r00           5616 	lcall	_printf_tiny
   1592 15 81              5617 	dec	sp
   1594 15 81              5618 	dec	sp
   1596 D0 04              5619 	pop	ar4
   1598 D0 03              5620 	pop	ar3
   159A D0 02              5621 	pop	ar2
                           5622 ;	main.c:784: while(*(str_srch+i)!='\0')
                           5623 ;	genAssign
   159C 7D 00              5624 	mov	r5,#0x00
   159E 7E 00              5625 	mov	r6,#0x00
                           5626 ;	genAssign
   15A0 7F 00              5627 	mov	r7,#0x00
   15A2 78 00              5628 	mov	r0,#0x00
   15A4                    5629 00101$:
                           5630 ;	genIpush
   15A4 C0 05              5631 	push	ar5
   15A6 C0 06              5632 	push	ar6
                           5633 ;	genPlus
                           5634 ;	Peephole 236.g	used r7 instead of ar7
   15A8 EF                 5635 	mov	a,r7
                           5636 ;	Peephole 236.a	used r2 instead of ar2
   15A9 2A                 5637 	add	a,r2
   15AA F9                 5638 	mov	r1,a
                           5639 ;	Peephole 236.g	used r0 instead of ar0
   15AB E8                 5640 	mov	a,r0
                           5641 ;	Peephole 236.b	used r3 instead of ar3
   15AC 3B                 5642 	addc	a,r3
   15AD FD                 5643 	mov	r5,a
   15AE 8C 06              5644 	mov	ar6,r4
                           5645 ;	genPointerGet
                           5646 ;	genGenPointerGet
   15B0 89 82              5647 	mov	dpl,r1
   15B2 8D 83              5648 	mov	dph,r5
   15B4 8E F0              5649 	mov	b,r6
   15B6 12s00r00           5650 	lcall	__gptrget
   15B9 F9                 5651 	mov	r1,a
                           5652 ;	genCmpEq
                           5653 ;	gencjne
                           5654 ;	gencjneshort
                           5655 ;	Peephole 241.d	optimized compare
   15BA E4                 5656 	clr	a
   15BB B9 00 01           5657 	cjne	r1,#0x00,00175$
   15BE 04                 5658 	inc	a
   15BF                    5659 00175$:
                           5660 ;	Peephole 300	removed redundant label 00176$
                           5661 ;	genIpop
   15BF D0 06              5662 	pop	ar6
   15C1 D0 05              5663 	pop	ar5
                           5664 ;	genIfx
                           5665 ;	genIfxJump
                           5666 ;	Peephole 108.b	removed ljmp by inverse jump logic
   15C3 70 0C              5667 	jnz	00103$
                           5668 ;	Peephole 300	removed redundant label 00177$
                           5669 ;	main.c:786: len++;
                           5670 ;	genPlus
                           5671 ;     genPlusIncr
   15C5 0D                 5672 	inc	r5
   15C6 BD 00 01           5673 	cjne	r5,#0x00,00178$
   15C9 0E                 5674 	inc	r6
   15CA                    5675 00178$:
                           5676 ;	main.c:787: i++;
                           5677 ;	genPlus
                           5678 ;     genPlusIncr
   15CA 0F                 5679 	inc	r7
                           5680 ;	Peephole 112.b	changed ljmp to sjmp
                           5681 ;	Peephole 243	avoided branch to sjmp
   15CB BF 00 D6           5682 	cjne	r7,#0x00,00101$
   15CE 08                 5683 	inc	r0
                           5684 ;	Peephole 300	removed redundant label 00179$
   15CF 80 D3              5685 	sjmp	00101$
   15D1                    5686 00103$:
                           5687 ;	main.c:789: printf_tiny("Length of the string to search is %d\r\n",len);
                           5688 ;	genIpush
   15D1 C0 02              5689 	push	ar2
   15D3 C0 03              5690 	push	ar3
   15D5 C0 04              5691 	push	ar4
   15D7 C0 05              5692 	push	ar5
   15D9 C0 06              5693 	push	ar6
                           5694 ;	genIpush
   15DB 74r90              5695 	mov	a,#__str_95
   15DD C0 E0              5696 	push	acc
   15DF 74s10              5697 	mov	a,#(__str_95 >> 8)
   15E1 C0 E0              5698 	push	acc
                           5699 ;	genCall
   15E3 12s00r00           5700 	lcall	_printf_tiny
   15E6 E5 81              5701 	mov	a,sp
   15E8 24 FC              5702 	add	a,#0xfc
   15EA F5 81              5703 	mov	sp,a
   15EC D0 04              5704 	pop	ar4
   15EE D0 03              5705 	pop	ar3
   15F0 D0 02              5706 	pop	ar2
                           5707 ;	main.c:790: i=0;
                           5708 ;	genAssign
   15F2 90s01r09           5709 	mov	dptr,#_string_search_i_1_1
   15F5 E4                 5710 	clr	a
   15F6 F0                 5711 	movx	@dptr,a
   15F7 A3                 5712 	inc	dptr
   15F8 F0                 5713 	movx	@dptr,a
                           5714 ;	main.c:791: flag=0;
                           5715 ;	genAssign
   15F9 90s00r31           5716 	mov	dptr,#_flag
   15FC E4                 5717 	clr	a
   15FD F0                 5718 	movx	@dptr,a
   15FE A3                 5719 	inc	dptr
   15FF F0                 5720 	movx	@dptr,a
                           5721 ;	main.c:793: TR2=1;
                           5722 ;	genAssign
   1600 D2 CA              5723 	setb	_TR2
                           5724 ;	main.c:794: back: while(*(str_srch+r)!='\0' && flag==0)
                           5725 ;	genAssign
   1602 90s00r92           5726 	mov	dptr,#_string_search_str_temp_1_1
   1605 E0                 5727 	movx	a,@dptr
   1606 F5*00              5728 	mov	_string_search_sloc0_1_0,a
   1608 A3                 5729 	inc	dptr
   1609 E0                 5730 	movx	a,@dptr
   160A F5*01              5731 	mov	(_string_search_sloc0_1_0 + 1),a
   160C A3                 5732 	inc	dptr
   160D E0                 5733 	movx	a,@dptr
   160E F5*02              5734 	mov	(_string_search_sloc0_1_0 + 2),a
                           5735 ;	genAssign
   1610 78 00              5736 	mov	r0,#0x00
   1612 79 00              5737 	mov	r1,#0x00
   1614                    5738 00146$:
                           5739 ;	genIpush
                           5740 ;	genAssign
   1614 90s01r07           5741 	mov	dptr,#_string_search_r_1_1
   1617 E0                 5742 	movx	a,@dptr
   1618 FD                 5743 	mov	r5,a
   1619 A3                 5744 	inc	dptr
   161A E0                 5745 	movx	a,@dptr
   161B FE                 5746 	mov	r6,a
                           5747 ;	genPlus
                           5748 ;	Peephole 236.g	used r5 instead of ar5
   161C ED                 5749 	mov	a,r5
                           5750 ;	Peephole 236.a	used r2 instead of ar2
   161D 2A                 5751 	add	a,r2
   161E FD                 5752 	mov	r5,a
                           5753 ;	Peephole 236.g	used r6 instead of ar6
   161F EE                 5754 	mov	a,r6
                           5755 ;	Peephole 236.b	used r3 instead of ar3
   1620 3B                 5756 	addc	a,r3
   1621 FE                 5757 	mov	r6,a
   1622 8C 07              5758 	mov	ar7,r4
                           5759 ;	genPointerGet
                           5760 ;	genGenPointerGet
   1624 8D 82              5761 	mov	dpl,r5
   1626 8E 83              5762 	mov	dph,r6
   1628 8F F0              5763 	mov	b,r7
   162A 12s00r00           5764 	lcall	__gptrget
   162D FD                 5765 	mov	r5,a
                           5766 ;	genCmpEq
                           5767 ;	gencjne
                           5768 ;	gencjneshort
                           5769 ;	Peephole 241.d	optimized compare
   162E E4                 5770 	clr	a
   162F BD 00 01           5771 	cjne	r5,#0x00,00180$
   1632 04                 5772 	inc	a
   1633                    5773 00180$:
                           5774 ;	Peephole 300	removed redundant label 00181$
                           5775 ;	genIpop
                           5776 ;	genIfx
                           5777 ;	genIfxJump
   1633 60 03              5778 	jz	00182$
   1635 02s1Cr43           5779 	ljmp	00148$
   1638                    5780 00182$:
                           5781 ;	genAssign
   1638 90s00r31           5782 	mov	dptr,#_flag
   163B E0                 5783 	movx	a,@dptr
   163C FD                 5784 	mov	r5,a
   163D A3                 5785 	inc	dptr
   163E E0                 5786 	movx	a,@dptr
                           5787 ;	genIfx
   163F FE                 5788 	mov	r6,a
                           5789 ;	Peephole 135	removed redundant mov
   1640 4D                 5790 	orl	a,r5
                           5791 ;	genIfxJump
   1641 60 03              5792 	jz	00183$
   1643 02s1Cr43           5793 	ljmp	00148$
   1646                    5794 00183$:
                           5795 ;	main.c:796: if(countsearch==0)
                           5796 ;	genAssign
   1646 90s00rFF           5797 	mov	dptr,#_string_search_countsearch_1_1
   1649 E0                 5798 	movx	a,@dptr
   164A FD                 5799 	mov	r5,a
   164B A3                 5800 	inc	dptr
   164C E0                 5801 	movx	a,@dptr
                           5802 ;	genIfx
   164D FE                 5803 	mov	r6,a
                           5804 ;	Peephole 135	removed redundant mov
   164E 4D                 5805 	orl	a,r5
                           5806 ;	genIfxJump
   164F 60 03              5807 	jz	00184$
   1651 02s17r5B           5808 	ljmp	00127$
   1654                    5809 00184$:
                           5810 ;	main.c:798: lcdputcmd(tempsearchadd);
                           5811 ;	genAssign
   1654 90s00rF9           5812 	mov	dptr,#_string_search_tempsearchadd_1_1
   1657 E0                 5813 	movx	a,@dptr
                           5814 ;	genCall
   1658 FD                 5815 	mov	r5,a
                           5816 ;	Peephole 244.c	loading dpl from a instead of r5
   1659 F5 82              5817 	mov	dpl,a
   165B C0 02              5818 	push	ar2
   165D C0 03              5819 	push	ar3
   165F C0 04              5820 	push	ar4
   1661 C0 05              5821 	push	ar5
   1663 C0 00              5822 	push	ar0
   1665 C0 01              5823 	push	ar1
   1667 12s00r00           5824 	lcall	_lcdputcmd
   166A D0 01              5825 	pop	ar1
   166C D0 00              5826 	pop	ar0
   166E D0 05              5827 	pop	ar5
   1670 D0 04              5828 	pop	ar4
   1672 D0 03              5829 	pop	ar3
   1674 D0 02              5830 	pop	ar2
                           5831 ;	main.c:799: searchadd= 0x80;
                           5832 ;	genAssign
   1676 90s00rFA           5833 	mov	dptr,#_string_search_searchadd_1_1
   1679 74 80              5834 	mov	a,#0x80
   167B F0                 5835 	movx	@dptr,a
                           5836 ;	main.c:800: printf_tiny("In count search\r\n");
                           5837 ;	genIpush
   167C C0 02              5838 	push	ar2
   167E C0 03              5839 	push	ar3
   1680 C0 04              5840 	push	ar4
   1682 C0 05              5841 	push	ar5
   1684 C0 00              5842 	push	ar0
   1686 C0 01              5843 	push	ar1
   1688 74rB7              5844 	mov	a,#__str_96
   168A C0 E0              5845 	push	acc
   168C 74s10              5846 	mov	a,#(__str_96 >> 8)
   168E C0 E0              5847 	push	acc
                           5848 ;	genCall
   1690 12s00r00           5849 	lcall	_printf_tiny
   1693 15 81              5850 	dec	sp
   1695 15 81              5851 	dec	sp
   1697 D0 01              5852 	pop	ar1
   1699 D0 00              5853 	pop	ar0
   169B D0 05              5854 	pop	ar5
   169D D0 04              5855 	pop	ar4
   169F D0 03              5856 	pop	ar3
   16A1 D0 02              5857 	pop	ar2
                           5858 ;	main.c:801: if(tempsearchadd <0x90)
                           5859 ;	genCmpLt
                           5860 ;	genCmp
   16A3 BD 90 00           5861 	cjne	r5,#0x90,00185$
   16A6                    5862 00185$:
                           5863 ;	genIfxJump
                           5864 ;	Peephole 108.a	removed ljmp by inverse jump logic
   16A6 50 16              5865 	jnc	00112$
                           5866 ;	Peephole 300	removed redundant label 00186$
                           5867 ;	main.c:803: i= counti;
                           5868 ;	genAssign
   16A8 90s00rFB           5869 	mov	dptr,#_string_search_counti_1_1
   16AB E0                 5870 	movx	a,@dptr
   16AC FE                 5871 	mov	r6,a
   16AD A3                 5872 	inc	dptr
   16AE E0                 5873 	movx	a,@dptr
   16AF FF                 5874 	mov	r7,a
                           5875 ;	main.c:805: i++;
                           5876 ;	genPlus
   16B0 90s01r09           5877 	mov	dptr,#_string_search_i_1_1
                           5878 ;     genPlusIncr
   16B3 74 01              5879 	mov	a,#0x01
                           5880 ;	Peephole 236.a	used r6 instead of ar6
   16B5 2E                 5881 	add	a,r6
   16B6 F0                 5882 	movx	@dptr,a
                           5883 ;	Peephole 181	changed mov to clr
   16B7 E4                 5884 	clr	a
                           5885 ;	Peephole 236.b	used r7 instead of ar7
   16B8 3F                 5886 	addc	a,r7
   16B9 A3                 5887 	inc	dptr
   16BA F0                 5888 	movx	@dptr,a
   16BB 02s19r05           5889 	ljmp	00128$
   16BE                    5890 00112$:
                           5891 ;	main.c:807: else if(tempsearchadd <0xC0)
                           5892 ;	genCmpLt
                           5893 ;	genCmp
   16BE BD C0 00           5894 	cjne	r5,#0xC0,00187$
   16C1                    5895 00187$:
                           5896 ;	genIfxJump
                           5897 ;	Peephole 108.a	removed ljmp by inverse jump logic
   16C1 50 31              5898 	jnc	00109$
                           5899 ;	Peephole 300	removed redundant label 00188$
                           5900 ;	main.c:809: i=counti;
                           5901 ;	genIpush
   16C3 C0 00              5902 	push	ar0
   16C5 C0 01              5903 	push	ar1
                           5904 ;	genAssign
   16C7 90s00rFB           5905 	mov	dptr,#_string_search_counti_1_1
   16CA E0                 5906 	movx	a,@dptr
   16CB FE                 5907 	mov	r6,a
   16CC A3                 5908 	inc	dptr
   16CD E0                 5909 	movx	a,@dptr
   16CE FF                 5910 	mov	r7,a
                           5911 ;	main.c:810: k=count_index;
                           5912 ;	genAssign
   16CF 90s00rFD           5913 	mov	dptr,#_string_search_count_index_1_1
   16D2 E0                 5914 	movx	a,@dptr
   16D3 F8                 5915 	mov	r0,a
   16D4 A3                 5916 	inc	dptr
   16D5 E0                 5917 	movx	a,@dptr
   16D6 F9                 5918 	mov	r1,a
                           5919 ;	main.c:811: i++;
                           5920 ;	genPlus
   16D7 90s01r09           5921 	mov	dptr,#_string_search_i_1_1
                           5922 ;     genPlusIncr
   16DA 74 01              5923 	mov	a,#0x01
                           5924 ;	Peephole 236.a	used r6 instead of ar6
   16DC 2E                 5925 	add	a,r6
   16DD F0                 5926 	movx	@dptr,a
                           5927 ;	Peephole 181	changed mov to clr
   16DE E4                 5928 	clr	a
                           5929 ;	Peephole 236.b	used r7 instead of ar7
   16DF 3F                 5930 	addc	a,r7
   16E0 A3                 5931 	inc	dptr
   16E1 F0                 5932 	movx	@dptr,a
                           5933 ;	main.c:812: k++;
                           5934 ;	genPlus
   16E2 90s01r03           5935 	mov	dptr,#_string_search_k_1_1
                           5936 ;     genPlusIncr
   16E5 74 01              5937 	mov	a,#0x01
                           5938 ;	Peephole 236.a	used r0 instead of ar0
   16E7 28                 5939 	add	a,r0
   16E8 F0                 5940 	movx	@dptr,a
                           5941 ;	Peephole 181	changed mov to clr
   16E9 E4                 5942 	clr	a
                           5943 ;	Peephole 236.b	used r1 instead of ar1
   16EA 39                 5944 	addc	a,r1
   16EB A3                 5945 	inc	dptr
   16EC F0                 5946 	movx	@dptr,a
                           5947 ;	genIpop
   16ED D0 01              5948 	pop	ar1
   16EF D0 00              5949 	pop	ar0
   16F1 02s19r05           5950 	ljmp	00128$
   16F4                    5951 00109$:
                           5952 ;	main.c:814: else if(tempsearchadd <0XD0)
                           5953 ;	genCmpLt
                           5954 ;	genCmp
   16F4 BD D0 00           5955 	cjne	r5,#0xD0,00189$
   16F7                    5956 00189$:
                           5957 ;	genIfxJump
                           5958 ;	Peephole 108.a	removed ljmp by inverse jump logic
   16F7 50 31              5959 	jnc	00106$
                           5960 ;	Peephole 300	removed redundant label 00190$
                           5961 ;	main.c:816: i=counti;
                           5962 ;	genIpush
   16F9 C0 00              5963 	push	ar0
   16FB C0 01              5964 	push	ar1
                           5965 ;	genAssign
   16FD 90s00rFB           5966 	mov	dptr,#_string_search_counti_1_1
   1700 E0                 5967 	movx	a,@dptr
   1701 FD                 5968 	mov	r5,a
   1702 A3                 5969 	inc	dptr
   1703 E0                 5970 	movx	a,@dptr
   1704 FE                 5971 	mov	r6,a
                           5972 ;	main.c:817: j=count_index;
                           5973 ;	genAssign
   1705 90s00rFD           5974 	mov	dptr,#_string_search_count_index_1_1
   1708 E0                 5975 	movx	a,@dptr
   1709 FF                 5976 	mov	r7,a
   170A A3                 5977 	inc	dptr
   170B E0                 5978 	movx	a,@dptr
   170C F8                 5979 	mov	r0,a
                           5980 ;	main.c:818: i++;
                           5981 ;	genPlus
   170D 90s01r09           5982 	mov	dptr,#_string_search_i_1_1
                           5983 ;     genPlusIncr
   1710 74 01              5984 	mov	a,#0x01
                           5985 ;	Peephole 236.a	used r5 instead of ar5
   1712 2D                 5986 	add	a,r5
   1713 F0                 5987 	movx	@dptr,a
                           5988 ;	Peephole 181	changed mov to clr
   1714 E4                 5989 	clr	a
                           5990 ;	Peephole 236.b	used r6 instead of ar6
   1715 3E                 5991 	addc	a,r6
   1716 A3                 5992 	inc	dptr
   1717 F0                 5993 	movx	@dptr,a
                           5994 ;	main.c:819: j++;
                           5995 ;	genPlus
   1718 90s01r01           5996 	mov	dptr,#_string_search_j_1_1
                           5997 ;     genPlusIncr
   171B 74 01              5998 	mov	a,#0x01
                           5999 ;	Peephole 236.a	used r7 instead of ar7
   171D 2F                 6000 	add	a,r7
   171E F0                 6001 	movx	@dptr,a
                           6002 ;	Peephole 181	changed mov to clr
   171F E4                 6003 	clr	a
                           6004 ;	Peephole 236.b	used r0 instead of ar0
   1720 38                 6005 	addc	a,r0
   1721 A3                 6006 	inc	dptr
   1722 F0                 6007 	movx	@dptr,a
                           6008 ;	genIpop
   1723 D0 01              6009 	pop	ar1
   1725 D0 00              6010 	pop	ar0
   1727 02s19r05           6011 	ljmp	00128$
   172A                    6012 00106$:
                           6013 ;	main.c:823: i=counti;
                           6014 ;	genIpush
   172A C0 00              6015 	push	ar0
   172C C0 01              6016 	push	ar1
                           6017 ;	genAssign
   172E 90s00rFB           6018 	mov	dptr,#_string_search_counti_1_1
   1731 E0                 6019 	movx	a,@dptr
   1732 FD                 6020 	mov	r5,a
   1733 A3                 6021 	inc	dptr
   1734 E0                 6022 	movx	a,@dptr
   1735 FE                 6023 	mov	r6,a
                           6024 ;	main.c:824: m=count_index;
                           6025 ;	genAssign
   1736 90s00rFD           6026 	mov	dptr,#_string_search_count_index_1_1
   1739 E0                 6027 	movx	a,@dptr
   173A FF                 6028 	mov	r7,a
   173B A3                 6029 	inc	dptr
   173C E0                 6030 	movx	a,@dptr
   173D F8                 6031 	mov	r0,a
                           6032 ;	main.c:825: i++;
                           6033 ;	genPlus
   173E 90s01r09           6034 	mov	dptr,#_string_search_i_1_1
                           6035 ;     genPlusIncr
   1741 74 01              6036 	mov	a,#0x01
                           6037 ;	Peephole 236.a	used r5 instead of ar5
   1743 2D                 6038 	add	a,r5
   1744 F0                 6039 	movx	@dptr,a
                           6040 ;	Peephole 181	changed mov to clr
   1745 E4                 6041 	clr	a
                           6042 ;	Peephole 236.b	used r6 instead of ar6
   1746 3E                 6043 	addc	a,r6
   1747 A3                 6044 	inc	dptr
   1748 F0                 6045 	movx	@dptr,a
                           6046 ;	main.c:826: m++;
                           6047 ;	genPlus
   1749 90s01r05           6048 	mov	dptr,#_string_search_m_1_1
                           6049 ;     genPlusIncr
   174C 74 01              6050 	mov	a,#0x01
                           6051 ;	Peephole 236.a	used r7 instead of ar7
   174E 2F                 6052 	add	a,r7
   174F F0                 6053 	movx	@dptr,a
                           6054 ;	Peephole 181	changed mov to clr
   1750 E4                 6055 	clr	a
                           6056 ;	Peephole 236.b	used r0 instead of ar0
   1751 38                 6057 	addc	a,r0
   1752 A3                 6058 	inc	dptr
   1753 F0                 6059 	movx	@dptr,a
                           6060 ;	genIpop
   1754 D0 01              6061 	pop	ar1
   1756 D0 00              6062 	pop	ar0
   1758 02s19r05           6063 	ljmp	00128$
   175B                    6064 00127$:
                           6065 ;	main.c:829: else if(i<16)
                           6066 ;	genAssign
   175B 90s01r09           6067 	mov	dptr,#_string_search_i_1_1
   175E E0                 6068 	movx	a,@dptr
   175F FD                 6069 	mov	r5,a
   1760 A3                 6070 	inc	dptr
   1761 E0                 6071 	movx	a,@dptr
   1762 FE                 6072 	mov	r6,a
                           6073 ;	genCmpLt
                           6074 ;	genCmp
   1763 C3                 6075 	clr	c
   1764 ED                 6076 	mov	a,r5
   1765 94 10              6077 	subb	a,#0x10
   1767 EE                 6078 	mov	a,r6
   1768 64 80              6079 	xrl	a,#0x80
   176A 94 80              6080 	subb	a,#0x80
                           6081 ;	genIfxJump
                           6082 ;	Peephole 108.a	removed ljmp by inverse jump logic
   176C 50 3E              6083 	jnc	00124$
                           6084 ;	Peephole 300	removed redundant label 00191$
                           6085 ;	main.c:831: lcdputcmd(0X80+i);
                           6086 ;	genCast
   176E 8D 07              6087 	mov	ar7,r5
                           6088 ;	genPlus
                           6089 ;     genPlusIncr
   1770 74 80              6090 	mov	a,#0x80
                           6091 ;	Peephole 236.a	used r7 instead of ar7
   1772 2F                 6092 	add	a,r7
                           6093 ;	genCall
   1773 FF                 6094 	mov	r7,a
                           6095 ;	Peephole 244.c	loading dpl from a instead of r7
   1774 F5 82              6096 	mov	dpl,a
   1776 C0 02              6097 	push	ar2
   1778 C0 03              6098 	push	ar3
   177A C0 04              6099 	push	ar4
   177C C0 05              6100 	push	ar5
   177E C0 06              6101 	push	ar6
   1780 C0 07              6102 	push	ar7
   1782 C0 00              6103 	push	ar0
   1784 C0 01              6104 	push	ar1
   1786 12s00r00           6105 	lcall	_lcdputcmd
   1789 D0 01              6106 	pop	ar1
   178B D0 00              6107 	pop	ar0
   178D D0 07              6108 	pop	ar7
   178F D0 06              6109 	pop	ar6
   1791 D0 05              6110 	pop	ar5
   1793 D0 04              6111 	pop	ar4
   1795 D0 03              6112 	pop	ar3
   1797 D0 02              6113 	pop	ar2
                           6114 ;	main.c:832: searchadd= (0x80+i);
                           6115 ;	genAssign
   1799 90s00rFA           6116 	mov	dptr,#_string_search_searchadd_1_1
   179C EF                 6117 	mov	a,r7
   179D F0                 6118 	movx	@dptr,a
                           6119 ;	main.c:833: i++;
                           6120 ;	genPlus
   179E 90s01r09           6121 	mov	dptr,#_string_search_i_1_1
                           6122 ;     genPlusIncr
   17A1 74 01              6123 	mov	a,#0x01
                           6124 ;	Peephole 236.a	used r5 instead of ar5
   17A3 2D                 6125 	add	a,r5
   17A4 F0                 6126 	movx	@dptr,a
                           6127 ;	Peephole 181	changed mov to clr
   17A5 E4                 6128 	clr	a
                           6129 ;	Peephole 236.b	used r6 instead of ar6
   17A6 3E                 6130 	addc	a,r6
   17A7 A3                 6131 	inc	dptr
   17A8 F0                 6132 	movx	@dptr,a
   17A9 02s19r05           6133 	ljmp	00128$
   17AC                    6134 00124$:
                           6135 ;	main.c:835: else if(i<32)
                           6136 ;	genCmpLt
                           6137 ;	genCmp
   17AC C3                 6138 	clr	c
   17AD ED                 6139 	mov	a,r5
   17AE 94 20              6140 	subb	a,#0x20
   17B0 EE                 6141 	mov	a,r6
   17B1 64 80              6142 	xrl	a,#0x80
   17B3 94 80              6143 	subb	a,#0x80
                           6144 ;	genIfxJump
                           6145 ;	Peephole 108.a	removed ljmp by inverse jump logic
   17B5 50 59              6146 	jnc	00121$
                           6147 ;	Peephole 300	removed redundant label 00192$
                           6148 ;	main.c:837: lcdputcmd(0xC0+j);
                           6149 ;	genIpush
   17B7 C0 00              6150 	push	ar0
   17B9 C0 01              6151 	push	ar1
                           6152 ;	genAssign
   17BB 90s01r01           6153 	mov	dptr,#_string_search_j_1_1
   17BE E0                 6154 	movx	a,@dptr
   17BF FF                 6155 	mov	r7,a
   17C0 A3                 6156 	inc	dptr
   17C1 E0                 6157 	movx	a,@dptr
   17C2 F8                 6158 	mov	r0,a
                           6159 ;	genCast
   17C3 8F 01              6160 	mov	ar1,r7
                           6161 ;	genPlus
                           6162 ;     genPlusIncr
   17C5 74 C0              6163 	mov	a,#0xC0
                           6164 ;	Peephole 236.a	used r1 instead of ar1
   17C7 29                 6165 	add	a,r1
                           6166 ;	genCall
   17C8 F9                 6167 	mov	r1,a
                           6168 ;	Peephole 244.c	loading dpl from a instead of r1
   17C9 F5 82              6169 	mov	dpl,a
   17CB C0 02              6170 	push	ar2
   17CD C0 03              6171 	push	ar3
   17CF C0 04              6172 	push	ar4
   17D1 C0 05              6173 	push	ar5
   17D3 C0 06              6174 	push	ar6
   17D5 C0 07              6175 	push	ar7
   17D7 C0 00              6176 	push	ar0
   17D9 C0 01              6177 	push	ar1
   17DB 12s00r00           6178 	lcall	_lcdputcmd
   17DE D0 01              6179 	pop	ar1
   17E0 D0 00              6180 	pop	ar0
   17E2 D0 07              6181 	pop	ar7
   17E4 D0 06              6182 	pop	ar6
   17E6 D0 05              6183 	pop	ar5
   17E8 D0 04              6184 	pop	ar4
   17EA D0 03              6185 	pop	ar3
   17EC D0 02              6186 	pop	ar2
                           6187 ;	main.c:838: searchadd= (0xC0+j);
                           6188 ;	genAssign
   17EE 90s00rFA           6189 	mov	dptr,#_string_search_searchadd_1_1
   17F1 E9                 6190 	mov	a,r1
   17F2 F0                 6191 	movx	@dptr,a
                           6192 ;	main.c:839: j++;
                           6193 ;	genPlus
   17F3 90s01r01           6194 	mov	dptr,#_string_search_j_1_1
                           6195 ;     genPlusIncr
   17F6 74 01              6196 	mov	a,#0x01
                           6197 ;	Peephole 236.a	used r7 instead of ar7
   17F8 2F                 6198 	add	a,r7
   17F9 F0                 6199 	movx	@dptr,a
                           6200 ;	Peephole 181	changed mov to clr
   17FA E4                 6201 	clr	a
                           6202 ;	Peephole 236.b	used r0 instead of ar0
   17FB 38                 6203 	addc	a,r0
   17FC A3                 6204 	inc	dptr
   17FD F0                 6205 	movx	@dptr,a
                           6206 ;	main.c:840: i++;
                           6207 ;	genPlus
   17FE 90s01r09           6208 	mov	dptr,#_string_search_i_1_1
                           6209 ;     genPlusIncr
   1801 74 01              6210 	mov	a,#0x01
                           6211 ;	Peephole 236.a	used r5 instead of ar5
   1803 2D                 6212 	add	a,r5
   1804 F0                 6213 	movx	@dptr,a
                           6214 ;	Peephole 181	changed mov to clr
   1805 E4                 6215 	clr	a
                           6216 ;	Peephole 236.b	used r6 instead of ar6
   1806 3E                 6217 	addc	a,r6
   1807 A3                 6218 	inc	dptr
   1808 F0                 6219 	movx	@dptr,a
                           6220 ;	genIpop
   1809 D0 01              6221 	pop	ar1
   180B D0 00              6222 	pop	ar0
   180D 02s19r05           6223 	ljmp	00128$
   1810                    6224 00121$:
                           6225 ;	main.c:842: else if(i<48)
                           6226 ;	genCmpLt
                           6227 ;	genCmp
   1810 C3                 6228 	clr	c
   1811 ED                 6229 	mov	a,r5
   1812 94 30              6230 	subb	a,#0x30
   1814 EE                 6231 	mov	a,r6
   1815 64 80              6232 	xrl	a,#0x80
   1817 94 80              6233 	subb	a,#0x80
                           6234 ;	genIfxJump
                           6235 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1819 50 59              6236 	jnc	00118$
                           6237 ;	Peephole 300	removed redundant label 00193$
                           6238 ;	main.c:844: lcdputcmd(0x90+k);
                           6239 ;	genIpush
   181B C0 00              6240 	push	ar0
   181D C0 01              6241 	push	ar1
                           6242 ;	genAssign
   181F 90s01r03           6243 	mov	dptr,#_string_search_k_1_1
   1822 E0                 6244 	movx	a,@dptr
   1823 FF                 6245 	mov	r7,a
   1824 A3                 6246 	inc	dptr
   1825 E0                 6247 	movx	a,@dptr
   1826 F8                 6248 	mov	r0,a
                           6249 ;	genCast
   1827 8F 01              6250 	mov	ar1,r7
                           6251 ;	genPlus
                           6252 ;     genPlusIncr
   1829 74 90              6253 	mov	a,#0x90
                           6254 ;	Peephole 236.a	used r1 instead of ar1
   182B 29                 6255 	add	a,r1
                           6256 ;	genCall
   182C F9                 6257 	mov	r1,a
                           6258 ;	Peephole 244.c	loading dpl from a instead of r1
   182D F5 82              6259 	mov	dpl,a
   182F C0 02              6260 	push	ar2
   1831 C0 03              6261 	push	ar3
   1833 C0 04              6262 	push	ar4
   1835 C0 05              6263 	push	ar5
   1837 C0 06              6264 	push	ar6
   1839 C0 07              6265 	push	ar7
   183B C0 00              6266 	push	ar0
   183D C0 01              6267 	push	ar1
   183F 12s00r00           6268 	lcall	_lcdputcmd
   1842 D0 01              6269 	pop	ar1
   1844 D0 00              6270 	pop	ar0
   1846 D0 07              6271 	pop	ar7
   1848 D0 06              6272 	pop	ar6
   184A D0 05              6273 	pop	ar5
   184C D0 04              6274 	pop	ar4
   184E D0 03              6275 	pop	ar3
   1850 D0 02              6276 	pop	ar2
                           6277 ;	main.c:845: searchadd=(0x90+k);
                           6278 ;	genAssign
   1852 90s00rFA           6279 	mov	dptr,#_string_search_searchadd_1_1
   1855 E9                 6280 	mov	a,r1
   1856 F0                 6281 	movx	@dptr,a
                           6282 ;	main.c:846: k++;
                           6283 ;	genPlus
   1857 90s01r03           6284 	mov	dptr,#_string_search_k_1_1
                           6285 ;     genPlusIncr
   185A 74 01              6286 	mov	a,#0x01
                           6287 ;	Peephole 236.a	used r7 instead of ar7
   185C 2F                 6288 	add	a,r7
   185D F0                 6289 	movx	@dptr,a
                           6290 ;	Peephole 181	changed mov to clr
   185E E4                 6291 	clr	a
                           6292 ;	Peephole 236.b	used r0 instead of ar0
   185F 38                 6293 	addc	a,r0
   1860 A3                 6294 	inc	dptr
   1861 F0                 6295 	movx	@dptr,a
                           6296 ;	main.c:847: i++;
                           6297 ;	genPlus
   1862 90s01r09           6298 	mov	dptr,#_string_search_i_1_1
                           6299 ;     genPlusIncr
   1865 74 01              6300 	mov	a,#0x01
                           6301 ;	Peephole 236.a	used r5 instead of ar5
   1867 2D                 6302 	add	a,r5
   1868 F0                 6303 	movx	@dptr,a
                           6304 ;	Peephole 181	changed mov to clr
   1869 E4                 6305 	clr	a
                           6306 ;	Peephole 236.b	used r6 instead of ar6
   186A 3E                 6307 	addc	a,r6
   186B A3                 6308 	inc	dptr
   186C F0                 6309 	movx	@dptr,a
                           6310 ;	genIpop
   186D D0 01              6311 	pop	ar1
   186F D0 00              6312 	pop	ar0
   1871 02s19r05           6313 	ljmp	00128$
   1874                    6314 00118$:
                           6315 ;	main.c:849: else if(i<64)
                           6316 ;	genCmpLt
                           6317 ;	genCmp
   1874 C3                 6318 	clr	c
   1875 ED                 6319 	mov	a,r5
   1876 94 40              6320 	subb	a,#0x40
   1878 EE                 6321 	mov	a,r6
   1879 64 80              6322 	xrl	a,#0x80
   187B 94 80              6323 	subb	a,#0x80
                           6324 ;	genIfxJump
                           6325 ;	Peephole 108.a	removed ljmp by inverse jump logic
   187D 50 58              6326 	jnc	00115$
                           6327 ;	Peephole 300	removed redundant label 00194$
                           6328 ;	main.c:851: lcdputcmd(0xD0+m);
                           6329 ;	genIpush
   187F C0 00              6330 	push	ar0
   1881 C0 01              6331 	push	ar1
                           6332 ;	genAssign
   1883 90s01r05           6333 	mov	dptr,#_string_search_m_1_1
   1886 E0                 6334 	movx	a,@dptr
   1887 FF                 6335 	mov	r7,a
   1888 A3                 6336 	inc	dptr
   1889 E0                 6337 	movx	a,@dptr
   188A F8                 6338 	mov	r0,a
                           6339 ;	genCast
   188B 8F 01              6340 	mov	ar1,r7
                           6341 ;	genPlus
                           6342 ;     genPlusIncr
   188D 74 D0              6343 	mov	a,#0xD0
                           6344 ;	Peephole 236.a	used r1 instead of ar1
   188F 29                 6345 	add	a,r1
                           6346 ;	genCall
   1890 F9                 6347 	mov	r1,a
                           6348 ;	Peephole 244.c	loading dpl from a instead of r1
   1891 F5 82              6349 	mov	dpl,a
   1893 C0 02              6350 	push	ar2
   1895 C0 03              6351 	push	ar3
   1897 C0 04              6352 	push	ar4
   1899 C0 05              6353 	push	ar5
   189B C0 06              6354 	push	ar6
   189D C0 07              6355 	push	ar7
   189F C0 00              6356 	push	ar0
   18A1 C0 01              6357 	push	ar1
   18A3 12s00r00           6358 	lcall	_lcdputcmd
   18A6 D0 01              6359 	pop	ar1
   18A8 D0 00              6360 	pop	ar0
   18AA D0 07              6361 	pop	ar7
   18AC D0 06              6362 	pop	ar6
   18AE D0 05              6363 	pop	ar5
   18B0 D0 04              6364 	pop	ar4
   18B2 D0 03              6365 	pop	ar3
   18B4 D0 02              6366 	pop	ar2
                           6367 ;	main.c:852: searchadd=(0xD0+m);
                           6368 ;	genAssign
   18B6 90s00rFA           6369 	mov	dptr,#_string_search_searchadd_1_1
   18B9 E9                 6370 	mov	a,r1
   18BA F0                 6371 	movx	@dptr,a
                           6372 ;	main.c:853: m++;
                           6373 ;	genPlus
   18BB 90s01r05           6374 	mov	dptr,#_string_search_m_1_1
                           6375 ;     genPlusIncr
   18BE 74 01              6376 	mov	a,#0x01
                           6377 ;	Peephole 236.a	used r7 instead of ar7
   18C0 2F                 6378 	add	a,r7
   18C1 F0                 6379 	movx	@dptr,a
                           6380 ;	Peephole 181	changed mov to clr
   18C2 E4                 6381 	clr	a
                           6382 ;	Peephole 236.b	used r0 instead of ar0
   18C3 38                 6383 	addc	a,r0
   18C4 A3                 6384 	inc	dptr
   18C5 F0                 6385 	movx	@dptr,a
                           6386 ;	main.c:854: i++;
                           6387 ;	genPlus
   18C6 90s01r09           6388 	mov	dptr,#_string_search_i_1_1
                           6389 ;     genPlusIncr
   18C9 74 01              6390 	mov	a,#0x01
                           6391 ;	Peephole 236.a	used r5 instead of ar5
   18CB 2D                 6392 	add	a,r5
   18CC F0                 6393 	movx	@dptr,a
                           6394 ;	Peephole 181	changed mov to clr
   18CD E4                 6395 	clr	a
                           6396 ;	Peephole 236.b	used r6 instead of ar6
   18CE 3E                 6397 	addc	a,r6
   18CF A3                 6398 	inc	dptr
   18D0 F0                 6399 	movx	@dptr,a
                           6400 ;	genIpop
   18D1 D0 01              6401 	pop	ar1
   18D3 D0 00              6402 	pop	ar0
                           6403 ;	Peephole 112.b	changed ljmp to sjmp
   18D5 80 2E              6404 	sjmp	00128$
   18D7                    6405 00115$:
                           6406 ;	main.c:858: printf_tiny("********************************Search is finished*****************************\r\n");
                           6407 ;	genIpush
   18D7 C0 02              6408 	push	ar2
   18D9 C0 03              6409 	push	ar3
   18DB C0 04              6410 	push	ar4
   18DD C0 00              6411 	push	ar0
   18DF C0 01              6412 	push	ar1
   18E1 74rC9              6413 	mov	a,#__str_97
   18E3 C0 E0              6414 	push	acc
   18E5 74s10              6415 	mov	a,#(__str_97 >> 8)
   18E7 C0 E0              6416 	push	acc
                           6417 ;	genCall
   18E9 12s00r00           6418 	lcall	_printf_tiny
   18EC 15 81              6419 	dec	sp
   18EE 15 81              6420 	dec	sp
   18F0 D0 01              6421 	pop	ar1
   18F2 D0 00              6422 	pop	ar0
   18F4 D0 04              6423 	pop	ar4
   18F6 D0 03              6424 	pop	ar3
   18F8 D0 02              6425 	pop	ar2
                           6426 ;	main.c:859: TR2=0;
                           6427 ;	genAssign
   18FA C2 CA              6428 	clr	_TR2
                           6429 ;	main.c:860: flag=1;
                           6430 ;	genAssign
   18FC 90s00r31           6431 	mov	dptr,#_flag
   18FF 74 01              6432 	mov	a,#0x01
   1901 F0                 6433 	movx	@dptr,a
   1902 E4                 6434 	clr	a
   1903 A3                 6435 	inc	dptr
   1904 F0                 6436 	movx	@dptr,a
   1905                    6437 00128$:
                           6438 ;	main.c:862: if(flag==0)
                           6439 ;	genAssign
   1905 90s00r31           6440 	mov	dptr,#_flag
   1908 E0                 6441 	movx	a,@dptr
   1909 FD                 6442 	mov	r5,a
   190A A3                 6443 	inc	dptr
   190B E0                 6444 	movx	a,@dptr
                           6445 ;	genIfx
   190C FE                 6446 	mov	r6,a
                           6447 ;	Peephole 135	removed redundant mov
   190D 4D                 6448 	orl	a,r5
                           6449 ;	genIfxJump
   190E 60 03              6450 	jz	00195$
   1910 02s19rE4           6451 	ljmp	00130$
   1913                    6452 00195$:
                           6453 ;	main.c:864: lcdbusywait();
                           6454 ;	genIpush
   1913 C0 00              6455 	push	ar0
   1915 C0 01              6456 	push	ar1
                           6457 ;	genCall
   1917 C0 02              6458 	push	ar2
   1919 C0 03              6459 	push	ar3
   191B C0 04              6460 	push	ar4
   191D C0 00              6461 	push	ar0
   191F C0 01              6462 	push	ar1
   1921 12s00r00           6463 	lcall	_lcdbusywait
   1924 D0 01              6464 	pop	ar1
   1926 D0 00              6465 	pop	ar0
   1928 D0 04              6466 	pop	ar4
   192A D0 03              6467 	pop	ar3
   192C D0 02              6468 	pop	ar2
                           6469 ;	main.c:865: *(str_temp+r)=lcdread();
                           6470 ;	genAssign
   192E 90s01r07           6471 	mov	dptr,#_string_search_r_1_1
   1931 E0                 6472 	movx	a,@dptr
   1932 FD                 6473 	mov	r5,a
   1933 A3                 6474 	inc	dptr
   1934 E0                 6475 	movx	a,@dptr
   1935 FE                 6476 	mov	r6,a
                           6477 ;	genPlus
                           6478 ;	Peephole 236.g	used r5 instead of ar5
   1936 ED                 6479 	mov	a,r5
   1937 25*00              6480 	add	a,_string_search_sloc0_1_0
   1939 FD                 6481 	mov	r5,a
                           6482 ;	Peephole 236.g	used r6 instead of ar6
   193A EE                 6483 	mov	a,r6
   193B 35*01              6484 	addc	a,(_string_search_sloc0_1_0 + 1)
   193D FE                 6485 	mov	r6,a
   193E AF*02              6486 	mov	r7,(_string_search_sloc0_1_0 + 2)
                           6487 ;	genCall
   1940 C0 02              6488 	push	ar2
   1942 C0 03              6489 	push	ar3
   1944 C0 04              6490 	push	ar4
   1946 C0 05              6491 	push	ar5
   1948 C0 06              6492 	push	ar6
   194A C0 07              6493 	push	ar7
   194C C0 01              6494 	push	ar1
   194E 12s00r00           6495 	lcall	_lcdread
   1951 A8 82              6496 	mov	r0,dpl
   1953 D0 01              6497 	pop	ar1
   1955 D0 07              6498 	pop	ar7
   1957 D0 06              6499 	pop	ar6
   1959 D0 05              6500 	pop	ar5
   195B D0 04              6501 	pop	ar4
   195D D0 03              6502 	pop	ar3
   195F D0 02              6503 	pop	ar2
                           6504 ;	genPointerSet
                           6505 ;	genGenPointerSet
   1961 8D 82              6506 	mov	dpl,r5
   1963 8E 83              6507 	mov	dph,r6
   1965 8F F0              6508 	mov	b,r7
   1967 E8                 6509 	mov	a,r0
   1968 12s00r00           6510 	lcall	__gptrput
                           6511 ;	main.c:866: printf_tiny("Read character");
                           6512 ;	genIpush
   196B C0 02              6513 	push	ar2
   196D C0 03              6514 	push	ar3
   196F C0 04              6515 	push	ar4
   1971 C0 05              6516 	push	ar5
   1973 C0 06              6517 	push	ar6
   1975 C0 07              6518 	push	ar7
   1977 C0 00              6519 	push	ar0
   1979 C0 01              6520 	push	ar1
   197B 74r1B              6521 	mov	a,#__str_98
   197D C0 E0              6522 	push	acc
   197F 74s11              6523 	mov	a,#(__str_98 >> 8)
   1981 C0 E0              6524 	push	acc
                           6525 ;	genCall
   1983 12s00r00           6526 	lcall	_printf_tiny
   1986 15 81              6527 	dec	sp
   1988 15 81              6528 	dec	sp
   198A D0 01              6529 	pop	ar1
   198C D0 00              6530 	pop	ar0
   198E D0 07              6531 	pop	ar7
   1990 D0 06              6532 	pop	ar6
   1992 D0 05              6533 	pop	ar5
   1994 D0 04              6534 	pop	ar4
   1996 D0 03              6535 	pop	ar3
   1998 D0 02              6536 	pop	ar2
                           6537 ;	main.c:867: putchar(*(str_temp+r));
                           6538 ;	genPointerGet
                           6539 ;	genGenPointerGet
   199A 8D 82              6540 	mov	dpl,r5
   199C 8E 83              6541 	mov	dph,r6
   199E 8F F0              6542 	mov	b,r7
   19A0 12s00r00           6543 	lcall	__gptrget
                           6544 ;	genCall
   19A3 FD                 6545 	mov	r5,a
                           6546 ;	Peephole 244.c	loading dpl from a instead of r5
   19A4 F5 82              6547 	mov	dpl,a
   19A6 C0 02              6548 	push	ar2
   19A8 C0 03              6549 	push	ar3
   19AA C0 04              6550 	push	ar4
   19AC C0 00              6551 	push	ar0
   19AE C0 01              6552 	push	ar1
   19B0 12s00r00           6553 	lcall	_putchar
   19B3 D0 01              6554 	pop	ar1
   19B5 D0 00              6555 	pop	ar0
   19B7 D0 04              6556 	pop	ar4
   19B9 D0 03              6557 	pop	ar3
   19BB D0 02              6558 	pop	ar2
                           6559 ;	main.c:868: printf_tiny("\r\n");
                           6560 ;	genIpush
   19BD C0 02              6561 	push	ar2
   19BF C0 03              6562 	push	ar3
   19C1 C0 04              6563 	push	ar4
   19C3 C0 00              6564 	push	ar0
   19C5 C0 01              6565 	push	ar1
   19C7 74r2B              6566 	mov	a,#__str_1
   19C9 C0 E0              6567 	push	acc
   19CB 74s00              6568 	mov	a,#(__str_1 >> 8)
   19CD C0 E0              6569 	push	acc
                           6570 ;	genCall
   19CF 12s00r00           6571 	lcall	_printf_tiny
   19D2 15 81              6572 	dec	sp
   19D4 15 81              6573 	dec	sp
   19D6 D0 01              6574 	pop	ar1
   19D8 D0 00              6575 	pop	ar0
   19DA D0 04              6576 	pop	ar4
   19DC D0 03              6577 	pop	ar3
   19DE D0 02              6578 	pop	ar2
                           6579 ;	main.c:940: printf_tiny("*******************************total time value is s is %ds**********************************\r\n",time_value);
                           6580 ;	genIpop
   19E0 D0 01              6581 	pop	ar1
   19E2 D0 00              6582 	pop	ar0
                           6583 ;	main.c:868: printf_tiny("\r\n");
   19E4                    6584 00130$:
                           6585 ;	main.c:870: if(*(str_srch+r)==*(str_temp+r))
                           6586 ;	genIpush
   19E4 C0 00              6587 	push	ar0
   19E6 C0 01              6588 	push	ar1
                           6589 ;	genAssign
   19E8 90s01r07           6590 	mov	dptr,#_string_search_r_1_1
   19EB E0                 6591 	movx	a,@dptr
   19EC FD                 6592 	mov	r5,a
   19ED A3                 6593 	inc	dptr
   19EE E0                 6594 	movx	a,@dptr
   19EF FE                 6595 	mov	r6,a
                           6596 ;	genPlus
                           6597 ;	Peephole 236.g	used r5 instead of ar5
   19F0 ED                 6598 	mov	a,r5
                           6599 ;	Peephole 236.a	used r2 instead of ar2
   19F1 2A                 6600 	add	a,r2
   19F2 FF                 6601 	mov	r7,a
                           6602 ;	Peephole 236.g	used r6 instead of ar6
   19F3 EE                 6603 	mov	a,r6
                           6604 ;	Peephole 236.b	used r3 instead of ar3
   19F4 3B                 6605 	addc	a,r3
   19F5 F8                 6606 	mov	r0,a
   19F6 8C 01              6607 	mov	ar1,r4
                           6608 ;	genPointerGet
                           6609 ;	genGenPointerGet
   19F8 8F 82              6610 	mov	dpl,r7
   19FA 88 83              6611 	mov	dph,r0
   19FC 89 F0              6612 	mov	b,r1
   19FE 12s00r00           6613 	lcall	__gptrget
   1A01 F5*03              6614 	mov	_string_search_sloc1_1_0,a
                           6615 ;	genPlus
                           6616 ;	Peephole 236.g	used r5 instead of ar5
   1A03 ED                 6617 	mov	a,r5
   1A04 25*00              6618 	add	a,_string_search_sloc0_1_0
   1A06 F8                 6619 	mov	r0,a
                           6620 ;	Peephole 236.g	used r6 instead of ar6
   1A07 EE                 6621 	mov	a,r6
   1A08 35*01              6622 	addc	a,(_string_search_sloc0_1_0 + 1)
   1A0A F9                 6623 	mov	r1,a
   1A0B AF*02              6624 	mov	r7,(_string_search_sloc0_1_0 + 2)
                           6625 ;	genPointerGet
                           6626 ;	genGenPointerGet
   1A0D 88 82              6627 	mov	dpl,r0
   1A0F 89 83              6628 	mov	dph,r1
   1A11 8F F0              6629 	mov	b,r7
   1A13 12s00r00           6630 	lcall	__gptrget
   1A16 F8                 6631 	mov	r0,a
                           6632 ;	genCmpEq
                           6633 ;	gencjne
                           6634 ;	gencjneshort
   1A17 E5*03              6635 	mov	a,_string_search_sloc1_1_0
   1A19 B5 00 04           6636 	cjne	a,ar0,00196$
   1A1C 74 01              6637 	mov	a,#0x01
   1A1E 80 01              6638 	sjmp	00197$
   1A20                    6639 00196$:
   1A20 E4                 6640 	clr	a
   1A21                    6641 00197$:
                           6642 ;	genIpop
   1A21 D0 01              6643 	pop	ar1
   1A23 D0 00              6644 	pop	ar0
                           6645 ;	genIfx
                           6646 ;	genIfxJump
   1A25 70 03              6647 	jnz	00198$
   1A27 02s1Cr32           6648 	ljmp	00143$
   1A2A                    6649 00198$:
                           6650 ;	main.c:872: tempadd[r]=(searchadd & 0X7F);
                           6651 ;	genPlus
                           6652 ;	Peephole 236.g	used r5 instead of ar5
   1A2A ED                 6653 	mov	a,r5
   1A2B 24r95              6654 	add	a,#_string_search_tempadd_1_1
   1A2D FD                 6655 	mov	r5,a
                           6656 ;	Peephole 236.g	used r6 instead of ar6
   1A2E EE                 6657 	mov	a,r6
   1A2F 34s00              6658 	addc	a,#(_string_search_tempadd_1_1 >> 8)
   1A31 FE                 6659 	mov	r6,a
                           6660 ;	genAssign
   1A32 90s00rFA           6661 	mov	dptr,#_string_search_searchadd_1_1
   1A35 E0                 6662 	movx	a,@dptr
   1A36 FF                 6663 	mov	r7,a
                           6664 ;	genAnd
   1A37 53 07 7F           6665 	anl	ar7,#0x7F
                           6666 ;	genPointerSet
                           6667 ;     genFarPointerSet
   1A3A 8D 82              6668 	mov	dpl,r5
   1A3C 8E 83              6669 	mov	dph,r6
   1A3E EF                 6670 	mov	a,r7
   1A3F F0                 6671 	movx	@dptr,a
                           6672 ;	main.c:873: if(countsearch==0)
                           6673 ;	genAssign
   1A40 90s00rFF           6674 	mov	dptr,#_string_search_countsearch_1_1
   1A43 E0                 6675 	movx	a,@dptr
   1A44 FD                 6676 	mov	r5,a
   1A45 A3                 6677 	inc	dptr
   1A46 E0                 6678 	movx	a,@dptr
                           6679 ;	genIfx
   1A47 FE                 6680 	mov	r6,a
                           6681 ;	Peephole 135	removed redundant mov
   1A48 4D                 6682 	orl	a,r5
                           6683 ;	genIfxJump
   1A49 60 03              6684 	jz	00199$
   1A4B 02s1Br4A           6685 	ljmp	00141$
   1A4E                    6686 00199$:
                           6687 ;	main.c:875: tempsearchadd=(searchadd+0X01);
                           6688 ;	genAssign
   1A4E 90s00rFA           6689 	mov	dptr,#_string_search_searchadd_1_1
   1A51 E0                 6690 	movx	a,@dptr
                           6691 ;	genPlus
                           6692 ;     genPlusIncr
                           6693 ;	Peephole 185	changed order of increment (acc incremented also!)
   1A52 04                 6694 	inc	a
   1A53 FD                 6695 	mov	r5,a
                           6696 ;	genAssign
   1A54 90s00rF9           6697 	mov	dptr,#_string_search_tempsearchadd_1_1
   1A57 ED                 6698 	mov	a,r5
   1A58 F0                 6699 	movx	@dptr,a
                           6700 ;	main.c:876: printf_tiny("Temp search add is %x\r\n",tempsearchadd);
                           6701 ;	genCast
   1A59 7E 00              6702 	mov	r6,#0x00
                           6703 ;	genIpush
   1A5B C0 02              6704 	push	ar2
   1A5D C0 03              6705 	push	ar3
   1A5F C0 04              6706 	push	ar4
   1A61 C0 00              6707 	push	ar0
   1A63 C0 01              6708 	push	ar1
   1A65 C0 05              6709 	push	ar5
   1A67 C0 06              6710 	push	ar6
                           6711 ;	genIpush
   1A69 74r2A              6712 	mov	a,#__str_99
   1A6B C0 E0              6713 	push	acc
   1A6D 74s11              6714 	mov	a,#(__str_99 >> 8)
   1A6F C0 E0              6715 	push	acc
                           6716 ;	genCall
   1A71 12s00r00           6717 	lcall	_printf_tiny
   1A74 E5 81              6718 	mov	a,sp
   1A76 24 FC              6719 	add	a,#0xfc
   1A78 F5 81              6720 	mov	sp,a
   1A7A D0 01              6721 	pop	ar1
   1A7C D0 00              6722 	pop	ar0
   1A7E D0 04              6723 	pop	ar4
   1A80 D0 03              6724 	pop	ar3
   1A82 D0 02              6725 	pop	ar2
                           6726 ;	main.c:877: if(searchadd <0x90)
                           6727 ;	genAssign
   1A84 90s00rFA           6728 	mov	dptr,#_string_search_searchadd_1_1
   1A87 E0                 6729 	movx	a,@dptr
   1A88 FD                 6730 	mov	r5,a
                           6731 ;	genCmpLt
                           6732 ;	genCmp
   1A89 BD 90 00           6733 	cjne	r5,#0x90,00200$
   1A8C                    6734 00200$:
                           6735 ;	genIfxJump
                           6736 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1A8C 50 3B              6737 	jnc	00138$
                           6738 ;	Peephole 300	removed redundant label 00201$
                           6739 ;	main.c:879: counti=i;
                           6740 ;	genAssign
   1A8E 90s01r09           6741 	mov	dptr,#_string_search_i_1_1
   1A91 E0                 6742 	movx	a,@dptr
   1A92 FD                 6743 	mov	r5,a
   1A93 A3                 6744 	inc	dptr
   1A94 E0                 6745 	movx	a,@dptr
   1A95 FE                 6746 	mov	r6,a
                           6747 ;	genAssign
   1A96 90s00rFB           6748 	mov	dptr,#_string_search_counti_1_1
   1A99 ED                 6749 	mov	a,r5
   1A9A F0                 6750 	movx	@dptr,a
   1A9B A3                 6751 	inc	dptr
   1A9C EE                 6752 	mov	a,r6
   1A9D F0                 6753 	movx	@dptr,a
                           6754 ;	main.c:880: printf_tiny("Value of counti is %d\r\n",counti);
                           6755 ;	genIpush
   1A9E C0 02              6756 	push	ar2
   1AA0 C0 03              6757 	push	ar3
   1AA2 C0 04              6758 	push	ar4
   1AA4 C0 00              6759 	push	ar0
   1AA6 C0 01              6760 	push	ar1
   1AA8 C0 05              6761 	push	ar5
   1AAA C0 06              6762 	push	ar6
                           6763 ;	genIpush
   1AAC 74r42              6764 	mov	a,#__str_100
   1AAE C0 E0              6765 	push	acc
   1AB0 74s11              6766 	mov	a,#(__str_100 >> 8)
   1AB2 C0 E0              6767 	push	acc
                           6768 ;	genCall
   1AB4 12s00r00           6769 	lcall	_printf_tiny
   1AB7 E5 81              6770 	mov	a,sp
   1AB9 24 FC              6771 	add	a,#0xfc
   1ABB F5 81              6772 	mov	sp,a
   1ABD D0 01              6773 	pop	ar1
   1ABF D0 00              6774 	pop	ar0
   1AC1 D0 04              6775 	pop	ar4
   1AC3 D0 03              6776 	pop	ar3
   1AC5 D0 02              6777 	pop	ar2
                           6778 ;	Peephole 112.b	changed ljmp to sjmp
   1AC7 80 78              6779 	sjmp	00139$
   1AC9                    6780 00138$:
                           6781 ;	main.c:882: else if(searchadd <0xC0)
                           6782 ;	genAssign
   1AC9 90s00rFA           6783 	mov	dptr,#_string_search_searchadd_1_1
   1ACC E0                 6784 	movx	a,@dptr
   1ACD FD                 6785 	mov	r5,a
                           6786 ;	genCmpLt
                           6787 ;	genCmp
   1ACE BD C0 00           6788 	cjne	r5,#0xC0,00202$
   1AD1                    6789 00202$:
                           6790 ;	genIfxJump
                           6791 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1AD1 50 22              6792 	jnc	00135$
                           6793 ;	Peephole 300	removed redundant label 00203$
                           6794 ;	main.c:884: counti=i;
                           6795 ;	genAssign
   1AD3 90s01r09           6796 	mov	dptr,#_string_search_i_1_1
   1AD6 E0                 6797 	movx	a,@dptr
   1AD7 FD                 6798 	mov	r5,a
   1AD8 A3                 6799 	inc	dptr
   1AD9 E0                 6800 	movx	a,@dptr
   1ADA FE                 6801 	mov	r6,a
                           6802 ;	genAssign
   1ADB 90s00rFB           6803 	mov	dptr,#_string_search_counti_1_1
   1ADE ED                 6804 	mov	a,r5
   1ADF F0                 6805 	movx	@dptr,a
   1AE0 A3                 6806 	inc	dptr
   1AE1 EE                 6807 	mov	a,r6
   1AE2 F0                 6808 	movx	@dptr,a
                           6809 ;	main.c:885: count_index=k;
                           6810 ;	genAssign
   1AE3 90s01r03           6811 	mov	dptr,#_string_search_k_1_1
   1AE6 E0                 6812 	movx	a,@dptr
   1AE7 FD                 6813 	mov	r5,a
   1AE8 A3                 6814 	inc	dptr
   1AE9 E0                 6815 	movx	a,@dptr
   1AEA FE                 6816 	mov	r6,a
                           6817 ;	genAssign
   1AEB 90s00rFD           6818 	mov	dptr,#_string_search_count_index_1_1
   1AEE ED                 6819 	mov	a,r5
   1AEF F0                 6820 	movx	@dptr,a
   1AF0 A3                 6821 	inc	dptr
   1AF1 EE                 6822 	mov	a,r6
   1AF2 F0                 6823 	movx	@dptr,a
                           6824 ;	Peephole 112.b	changed ljmp to sjmp
   1AF3 80 4C              6825 	sjmp	00139$
   1AF5                    6826 00135$:
                           6827 ;	main.c:887: else if(searchadd <0XD0)
                           6828 ;	genAssign
   1AF5 90s00rFA           6829 	mov	dptr,#_string_search_searchadd_1_1
   1AF8 E0                 6830 	movx	a,@dptr
   1AF9 FD                 6831 	mov	r5,a
                           6832 ;	genCmpLt
                           6833 ;	genCmp
   1AFA BD D0 00           6834 	cjne	r5,#0xD0,00204$
   1AFD                    6835 00204$:
                           6836 ;	genIfxJump
                           6837 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1AFD 50 22              6838 	jnc	00132$
                           6839 ;	Peephole 300	removed redundant label 00205$
                           6840 ;	main.c:889: counti=i;
                           6841 ;	genAssign
   1AFF 90s01r09           6842 	mov	dptr,#_string_search_i_1_1
   1B02 E0                 6843 	movx	a,@dptr
   1B03 FD                 6844 	mov	r5,a
   1B04 A3                 6845 	inc	dptr
   1B05 E0                 6846 	movx	a,@dptr
   1B06 FE                 6847 	mov	r6,a
                           6848 ;	genAssign
   1B07 90s00rFB           6849 	mov	dptr,#_string_search_counti_1_1
   1B0A ED                 6850 	mov	a,r5
   1B0B F0                 6851 	movx	@dptr,a
   1B0C A3                 6852 	inc	dptr
   1B0D EE                 6853 	mov	a,r6
   1B0E F0                 6854 	movx	@dptr,a
                           6855 ;	main.c:890: count_index=j;
                           6856 ;	genAssign
   1B0F 90s01r01           6857 	mov	dptr,#_string_search_j_1_1
   1B12 E0                 6858 	movx	a,@dptr
   1B13 FD                 6859 	mov	r5,a
   1B14 A3                 6860 	inc	dptr
   1B15 E0                 6861 	movx	a,@dptr
   1B16 FE                 6862 	mov	r6,a
                           6863 ;	genAssign
   1B17 90s00rFD           6864 	mov	dptr,#_string_search_count_index_1_1
   1B1A ED                 6865 	mov	a,r5
   1B1B F0                 6866 	movx	@dptr,a
   1B1C A3                 6867 	inc	dptr
   1B1D EE                 6868 	mov	a,r6
   1B1E F0                 6869 	movx	@dptr,a
                           6870 ;	Peephole 112.b	changed ljmp to sjmp
   1B1F 80 20              6871 	sjmp	00139$
   1B21                    6872 00132$:
                           6873 ;	main.c:894: counti=i;
                           6874 ;	genAssign
   1B21 90s01r09           6875 	mov	dptr,#_string_search_i_1_1
   1B24 E0                 6876 	movx	a,@dptr
   1B25 FD                 6877 	mov	r5,a
   1B26 A3                 6878 	inc	dptr
   1B27 E0                 6879 	movx	a,@dptr
   1B28 FE                 6880 	mov	r6,a
                           6881 ;	genAssign
   1B29 90s00rFB           6882 	mov	dptr,#_string_search_counti_1_1
   1B2C ED                 6883 	mov	a,r5
   1B2D F0                 6884 	movx	@dptr,a
   1B2E A3                 6885 	inc	dptr
   1B2F EE                 6886 	mov	a,r6
   1B30 F0                 6887 	movx	@dptr,a
                           6888 ;	main.c:895: count_index=m;
                           6889 ;	genAssign
   1B31 90s01r05           6890 	mov	dptr,#_string_search_m_1_1
   1B34 E0                 6891 	movx	a,@dptr
   1B35 FD                 6892 	mov	r5,a
   1B36 A3                 6893 	inc	dptr
   1B37 E0                 6894 	movx	a,@dptr
   1B38 FE                 6895 	mov	r6,a
                           6896 ;	genAssign
   1B39 90s00rFD           6897 	mov	dptr,#_string_search_count_index_1_1
   1B3C ED                 6898 	mov	a,r5
   1B3D F0                 6899 	movx	@dptr,a
   1B3E A3                 6900 	inc	dptr
   1B3F EE                 6901 	mov	a,r6
   1B40 F0                 6902 	movx	@dptr,a
   1B41                    6903 00139$:
                           6904 ;	main.c:897: countsearch=1;
                           6905 ;	genAssign
   1B41 90s00rFF           6906 	mov	dptr,#_string_search_countsearch_1_1
   1B44 74 01              6907 	mov	a,#0x01
   1B46 F0                 6908 	movx	@dptr,a
   1B47 E4                 6909 	clr	a
   1B48 A3                 6910 	inc	dptr
   1B49 F0                 6911 	movx	@dptr,a
   1B4A                    6912 00141$:
                           6913 ;	main.c:899: printf_tiny("Address captured is %x\r\n",searchadd);
                           6914 ;	genIpush
   1B4A C0 00              6915 	push	ar0
   1B4C C0 01              6916 	push	ar1
                           6917 ;	genAssign
   1B4E 90s00rFA           6918 	mov	dptr,#_string_search_searchadd_1_1
   1B51 E0                 6919 	movx	a,@dptr
   1B52 FD                 6920 	mov	r5,a
                           6921 ;	genCast
   1B53 7E 00              6922 	mov	r6,#0x00
                           6923 ;	genIpush
   1B55 C0 02              6924 	push	ar2
   1B57 C0 03              6925 	push	ar3
   1B59 C0 04              6926 	push	ar4
   1B5B C0 00              6927 	push	ar0
   1B5D C0 01              6928 	push	ar1
   1B5F C0 05              6929 	push	ar5
   1B61 C0 06              6930 	push	ar6
                           6931 ;	genIpush
   1B63 74r5A              6932 	mov	a,#__str_101
   1B65 C0 E0              6933 	push	acc
   1B67 74s11              6934 	mov	a,#(__str_101 >> 8)
   1B69 C0 E0              6935 	push	acc
                           6936 ;	genCall
   1B6B 12s00r00           6937 	lcall	_printf_tiny
   1B6E E5 81              6938 	mov	a,sp
   1B70 24 FC              6939 	add	a,#0xfc
   1B72 F5 81              6940 	mov	sp,a
   1B74 D0 01              6941 	pop	ar1
   1B76 D0 00              6942 	pop	ar0
   1B78 D0 04              6943 	pop	ar4
   1B7A D0 03              6944 	pop	ar3
   1B7C D0 02              6945 	pop	ar2
                           6946 ;	main.c:900: printf_tiny("Address captured is %d\r\n",searchadd);
                           6947 ;	genAssign
   1B7E 90s00rFA           6948 	mov	dptr,#_string_search_searchadd_1_1
   1B81 E0                 6949 	movx	a,@dptr
   1B82 FD                 6950 	mov	r5,a
                           6951 ;	genCast
   1B83 7E 00              6952 	mov	r6,#0x00
                           6953 ;	genIpush
   1B85 C0 02              6954 	push	ar2
   1B87 C0 03              6955 	push	ar3
   1B89 C0 04              6956 	push	ar4
   1B8B C0 00              6957 	push	ar0
   1B8D C0 01              6958 	push	ar1
   1B8F C0 05              6959 	push	ar5
   1B91 C0 06              6960 	push	ar6
                           6961 ;	genIpush
   1B93 74r73              6962 	mov	a,#__str_102
   1B95 C0 E0              6963 	push	acc
   1B97 74s11              6964 	mov	a,#(__str_102 >> 8)
   1B99 C0 E0              6965 	push	acc
                           6966 ;	genCall
   1B9B 12s00r00           6967 	lcall	_printf_tiny
   1B9E E5 81              6968 	mov	a,sp
   1BA0 24 FC              6969 	add	a,#0xfc
   1BA2 F5 81              6970 	mov	sp,a
   1BA4 D0 01              6971 	pop	ar1
   1BA6 D0 00              6972 	pop	ar0
   1BA8 D0 04              6973 	pop	ar4
   1BAA D0 03              6974 	pop	ar3
   1BAC D0 02              6975 	pop	ar2
                           6976 ;	main.c:901: printf_tiny("temp Address captured is %x\r\n",tempadd[r]);
                           6977 ;	genAssign
   1BAE 90s01r07           6978 	mov	dptr,#_string_search_r_1_1
   1BB1 E0                 6979 	movx	a,@dptr
   1BB2 FD                 6980 	mov	r5,a
   1BB3 A3                 6981 	inc	dptr
   1BB4 E0                 6982 	movx	a,@dptr
   1BB5 FE                 6983 	mov	r6,a
                           6984 ;	genPlus
                           6985 ;	Peephole 236.g	used r5 instead of ar5
   1BB6 ED                 6986 	mov	a,r5
   1BB7 24r95              6987 	add	a,#_string_search_tempadd_1_1
   1BB9 F5 82              6988 	mov	dpl,a
                           6989 ;	Peephole 236.g	used r6 instead of ar6
   1BBB EE                 6990 	mov	a,r6
   1BBC 34s00              6991 	addc	a,#(_string_search_tempadd_1_1 >> 8)
   1BBE F5 83              6992 	mov	dph,a
                           6993 ;	genPointerGet
                           6994 ;	genFarPointerGet
   1BC0 E0                 6995 	movx	a,@dptr
   1BC1 FF                 6996 	mov	r7,a
                           6997 ;	genCast
   1BC2 78 00              6998 	mov	r0,#0x00
                           6999 ;	genIpush
   1BC4 C0 02              7000 	push	ar2
   1BC6 C0 03              7001 	push	ar3
   1BC8 C0 04              7002 	push	ar4
   1BCA C0 05              7003 	push	ar5
   1BCC C0 06              7004 	push	ar6
   1BCE C0 00              7005 	push	ar0
   1BD0 C0 01              7006 	push	ar1
   1BD2 C0 07              7007 	push	ar7
   1BD4 C0 00              7008 	push	ar0
                           7009 ;	genIpush
   1BD6 74r8C              7010 	mov	a,#__str_103
   1BD8 C0 E0              7011 	push	acc
   1BDA 74s11              7012 	mov	a,#(__str_103 >> 8)
   1BDC C0 E0              7013 	push	acc
                           7014 ;	genCall
   1BDE 12s00r00           7015 	lcall	_printf_tiny
   1BE1 E5 81              7016 	mov	a,sp
   1BE3 24 FC              7017 	add	a,#0xfc
   1BE5 F5 81              7018 	mov	sp,a
   1BE7 D0 01              7019 	pop	ar1
   1BE9 D0 00              7020 	pop	ar0
   1BEB D0 06              7021 	pop	ar6
   1BED D0 05              7022 	pop	ar5
   1BEF D0 04              7023 	pop	ar4
   1BF1 D0 03              7024 	pop	ar3
   1BF3 D0 02              7025 	pop	ar2
                           7026 ;	main.c:902: printf_tiny("MATCHED\r\n");
                           7027 ;	genIpush
   1BF5 C0 02              7028 	push	ar2
   1BF7 C0 03              7029 	push	ar3
   1BF9 C0 04              7030 	push	ar4
   1BFB C0 05              7031 	push	ar5
   1BFD C0 06              7032 	push	ar6
   1BFF C0 00              7033 	push	ar0
   1C01 C0 01              7034 	push	ar1
   1C03 74rAA              7035 	mov	a,#__str_104
   1C05 C0 E0              7036 	push	acc
   1C07 74s11              7037 	mov	a,#(__str_104 >> 8)
   1C09 C0 E0              7038 	push	acc
                           7039 ;	genCall
   1C0B 12s00r00           7040 	lcall	_printf_tiny
   1C0E 15 81              7041 	dec	sp
   1C10 15 81              7042 	dec	sp
   1C12 D0 01              7043 	pop	ar1
   1C14 D0 00              7044 	pop	ar0
   1C16 D0 06              7045 	pop	ar6
   1C18 D0 05              7046 	pop	ar5
   1C1A D0 04              7047 	pop	ar4
   1C1C D0 03              7048 	pop	ar3
   1C1E D0 02              7049 	pop	ar2
                           7050 ;	main.c:903: r++;
                           7051 ;	genPlus
   1C20 90s01r07           7052 	mov	dptr,#_string_search_r_1_1
                           7053 ;     genPlusIncr
   1C23 74 01              7054 	mov	a,#0x01
                           7055 ;	Peephole 236.a	used r5 instead of ar5
   1C25 2D                 7056 	add	a,r5
   1C26 F0                 7057 	movx	@dptr,a
                           7058 ;	Peephole 181	changed mov to clr
   1C27 E4                 7059 	clr	a
                           7060 ;	Peephole 236.b	used r6 instead of ar6
   1C28 3E                 7061 	addc	a,r6
   1C29 A3                 7062 	inc	dptr
   1C2A F0                 7063 	movx	@dptr,a
                           7064 ;	genIpop
   1C2B D0 01              7065 	pop	ar1
   1C2D D0 00              7066 	pop	ar0
   1C2F 02s16r14           7067 	ljmp	00146$
   1C32                    7068 00143$:
                           7069 ;	main.c:907: r=0;
                           7070 ;	genAssign
   1C32 90s01r07           7071 	mov	dptr,#_string_search_r_1_1
   1C35 E4                 7072 	clr	a
   1C36 F0                 7073 	movx	@dptr,a
   1C37 A3                 7074 	inc	dptr
   1C38 F0                 7075 	movx	@dptr,a
                           7076 ;	main.c:908: countsearch=0;
                           7077 ;	genAssign
   1C39 90s00rFF           7078 	mov	dptr,#_string_search_countsearch_1_1
   1C3C E4                 7079 	clr	a
   1C3D F0                 7080 	movx	@dptr,a
   1C3E A3                 7081 	inc	dptr
   1C3F F0                 7082 	movx	@dptr,a
   1C40 02s16r14           7083 	ljmp	00146$
   1C43                    7084 00148$:
                           7085 ;	main.c:913: if(flag==0)
                           7086 ;	genAssign
   1C43 90s00r31           7087 	mov	dptr,#_flag
   1C46 E0                 7088 	movx	a,@dptr
   1C47 FD                 7089 	mov	r5,a
   1C48 A3                 7090 	inc	dptr
   1C49 E0                 7091 	movx	a,@dptr
                           7092 ;	genIfx
   1C4A FE                 7093 	mov	r6,a
                           7094 ;	Peephole 135	removed redundant mov
   1C4B 4D                 7095 	orl	a,r5
                           7096 ;	genIfxJump
   1C4C 60 03              7097 	jz	00206$
   1C4E 02s1CrFB           7098 	ljmp	00150$
   1C51                    7099 00206$:
                           7100 ;	main.c:915: searchcount++;
                           7101 ;	genPlus
                           7102 ;     genPlusIncr
   1C51 08                 7103 	inc	r0
   1C52 B8 00 01           7104 	cjne	r0,#0x00,00207$
   1C55 09                 7105 	inc	r1
   1C56                    7106 00207$:
                           7107 ;	main.c:916: permadd[searchcount]=tempadd[0];
                           7108 ;	genPlus
                           7109 ;	Peephole 236.g	used r0 instead of ar0
   1C56 E8                 7110 	mov	a,r0
   1C57 24rC7              7111 	add	a,#_string_search_permadd_1_1
   1C59 FD                 7112 	mov	r5,a
                           7113 ;	Peephole 236.g	used r1 instead of ar1
   1C5A E9                 7114 	mov	a,r1
   1C5B 34s00              7115 	addc	a,#(_string_search_permadd_1_1 >> 8)
   1C5D FE                 7116 	mov	r6,a
                           7117 ;	genPointerGet
                           7118 ;	genFarPointerGet
   1C5E 90s00r95           7119 	mov	dptr,#_string_search_tempadd_1_1
   1C61 E0                 7120 	movx	a,@dptr
                           7121 ;	genPointerSet
                           7122 ;     genFarPointerSet
   1C62 FF                 7123 	mov	r7,a
   1C63 8D 82              7124 	mov	dpl,r5
   1C65 8E 83              7125 	mov	dph,r6
                           7126 ;	Peephole 136	removed redundant move
   1C67 F0                 7127 	movx	@dptr,a
                           7128 ;	main.c:917: printf_tiny("******************************************Found the text********************************\r\n");
                           7129 ;	genIpush
   1C68 C0 02              7130 	push	ar2
   1C6A C0 03              7131 	push	ar3
   1C6C C0 04              7132 	push	ar4
   1C6E C0 05              7133 	push	ar5
   1C70 C0 06              7134 	push	ar6
   1C72 C0 00              7135 	push	ar0
   1C74 C0 01              7136 	push	ar1
   1C76 74rB4              7137 	mov	a,#__str_105
   1C78 C0 E0              7138 	push	acc
   1C7A 74s11              7139 	mov	a,#(__str_105 >> 8)
   1C7C C0 E0              7140 	push	acc
                           7141 ;	genCall
   1C7E 12s00r00           7142 	lcall	_printf_tiny
   1C81 15 81              7143 	dec	sp
   1C83 15 81              7144 	dec	sp
   1C85 D0 01              7145 	pop	ar1
   1C87 D0 00              7146 	pop	ar0
   1C89 D0 06              7147 	pop	ar6
   1C8B D0 05              7148 	pop	ar5
   1C8D D0 04              7149 	pop	ar4
   1C8F D0 03              7150 	pop	ar3
   1C91 D0 02              7151 	pop	ar2
                           7152 ;	main.c:918: printf("******************************************Address of the string is: %02X********************************\r\n",permadd[searchcount]);
                           7153 ;	genPointerGet
                           7154 ;	genFarPointerGet
   1C93 8D 82              7155 	mov	dpl,r5
   1C95 8E 83              7156 	mov	dph,r6
   1C97 E0                 7157 	movx	a,@dptr
   1C98 FD                 7158 	mov	r5,a
                           7159 ;	genCast
   1C99 7E 00              7160 	mov	r6,#0x00
                           7161 ;	genIpush
   1C9B C0 02              7162 	push	ar2
   1C9D C0 03              7163 	push	ar3
   1C9F C0 04              7164 	push	ar4
   1CA1 C0 00              7165 	push	ar0
   1CA3 C0 01              7166 	push	ar1
   1CA5 C0 05              7167 	push	ar5
   1CA7 C0 06              7168 	push	ar6
                           7169 ;	genIpush
   1CA9 74r0F              7170 	mov	a,#__str_106
   1CAB C0 E0              7171 	push	acc
   1CAD 74s12              7172 	mov	a,#(__str_106 >> 8)
   1CAF C0 E0              7173 	push	acc
   1CB1 74 80              7174 	mov	a,#0x80
   1CB3 C0 E0              7175 	push	acc
                           7176 ;	genCall
   1CB5 12s00r00           7177 	lcall	_printf
   1CB8 E5 81              7178 	mov	a,sp
   1CBA 24 FB              7179 	add	a,#0xfb
   1CBC F5 81              7180 	mov	sp,a
   1CBE D0 01              7181 	pop	ar1
   1CC0 D0 00              7182 	pop	ar0
   1CC2 D0 04              7183 	pop	ar4
   1CC4 D0 03              7184 	pop	ar3
   1CC6 D0 02              7185 	pop	ar2
                           7186 ;	main.c:919: printf_tiny("**************************************Search count is %d**************************88\r\n",searchcount);
                           7187 ;	genIpush
   1CC8 C0 02              7188 	push	ar2
   1CCA C0 03              7189 	push	ar3
   1CCC C0 04              7190 	push	ar4
   1CCE C0 00              7191 	push	ar0
   1CD0 C0 01              7192 	push	ar1
   1CD2 C0 00              7193 	push	ar0
   1CD4 C0 01              7194 	push	ar1
                           7195 ;	genIpush
   1CD6 74r7A              7196 	mov	a,#__str_107
   1CD8 C0 E0              7197 	push	acc
   1CDA 74s12              7198 	mov	a,#(__str_107 >> 8)
   1CDC C0 E0              7199 	push	acc
                           7200 ;	genCall
   1CDE 12s00r00           7201 	lcall	_printf_tiny
   1CE1 E5 81              7202 	mov	a,sp
   1CE3 24 FC              7203 	add	a,#0xfc
   1CE5 F5 81              7204 	mov	sp,a
   1CE7 D0 01              7205 	pop	ar1
   1CE9 D0 00              7206 	pop	ar0
   1CEB D0 04              7207 	pop	ar4
   1CED D0 03              7208 	pop	ar3
   1CEF D0 02              7209 	pop	ar2
                           7210 ;	main.c:920: r=0;
                           7211 ;	genAssign
   1CF1 90s01r07           7212 	mov	dptr,#_string_search_r_1_1
   1CF4 E4                 7213 	clr	a
   1CF5 F0                 7214 	movx	@dptr,a
   1CF6 A3                 7215 	inc	dptr
   1CF7 F0                 7216 	movx	@dptr,a
                           7217 ;	main.c:921: goto back;
   1CF8 02s16r14           7218 	ljmp	00146$
   1CFB                    7219 00150$:
                           7220 ;	main.c:925: time_value=TH2;
                           7221 ;	genCast
   1CFB AA CD              7222 	mov	r2,_TH2
                           7223 ;	main.c:926: time_value= time_value<<8;
                           7224 ;	genLeftShift
                           7225 ;	genLeftShiftLiteral
                           7226 ;	genlshTwo
                           7227 ;	peephole 177.e	removed redundant move
   1CFD 8A 03              7228 	mov	ar3,r2
   1CFF 7A 00              7229 	mov	r2,#0x00
                           7230 ;	main.c:927: time_value|=TL2;
                           7231 ;	genCast
   1D01 AC CC              7232 	mov	r4,_TL2
   1D03 7D 00              7233 	mov	r5,#0x00
                           7234 ;	genOr
   1D05 90s00r8F           7235 	mov	dptr,#_time_value
   1D08 EC                 7236 	mov	a,r4
   1D09 4A                 7237 	orl	a,r2
   1D0A F0                 7238 	movx	@dptr,a
   1D0B ED                 7239 	mov	a,r5
   1D0C 4B                 7240 	orl	a,r3
   1D0D A3                 7241 	inc	dptr
   1D0E F0                 7242 	movx	@dptr,a
                           7243 ;	main.c:928: printf_tiny("Number of times interrupt is %d\r\n",t2flag);
                           7244 ;	genIpush
   1D0F 90s00r8D           7245 	mov	dptr,#_t2flag
   1D12 E0                 7246 	movx	a,@dptr
   1D13 C0 E0              7247 	push	acc
   1D15 A3                 7248 	inc	dptr
   1D16 E0                 7249 	movx	a,@dptr
   1D17 C0 E0              7250 	push	acc
                           7251 ;	genIpush
   1D19 74rD1              7252 	mov	a,#__str_108
   1D1B C0 E0              7253 	push	acc
   1D1D 74s12              7254 	mov	a,#(__str_108 >> 8)
   1D1F C0 E0              7255 	push	acc
                           7256 ;	genCall
   1D21 12s00r00           7257 	lcall	_printf_tiny
   1D24 E5 81              7258 	mov	a,sp
   1D26 24 FC              7259 	add	a,#0xfc
   1D28 F5 81              7260 	mov	sp,a
                           7261 ;	main.c:929: printf_tiny("load value is %x\r\n",time_value);
                           7262 ;	genIpush
   1D2A 90s00r8F           7263 	mov	dptr,#_time_value
   1D2D E0                 7264 	movx	a,@dptr
   1D2E C0 E0              7265 	push	acc
   1D30 A3                 7266 	inc	dptr
   1D31 E0                 7267 	movx	a,@dptr
   1D32 C0 E0              7268 	push	acc
                           7269 ;	genIpush
   1D34 74rF3              7270 	mov	a,#__str_109
   1D36 C0 E0              7271 	push	acc
   1D38 74s12              7272 	mov	a,#(__str_109 >> 8)
   1D3A C0 E0              7273 	push	acc
                           7274 ;	genCall
   1D3C 12s00r00           7275 	lcall	_printf_tiny
   1D3F E5 81              7276 	mov	a,sp
   1D41 24 FC              7277 	add	a,#0xfc
   1D43 F5 81              7278 	mov	sp,a
                           7279 ;	main.c:930: time_value=(65536-time_value);
                           7280 ;	genAssign
   1D45 90s00r8F           7281 	mov	dptr,#_time_value
   1D48 E0                 7282 	movx	a,@dptr
   1D49 FA                 7283 	mov	r2,a
   1D4A A3                 7284 	inc	dptr
   1D4B E0                 7285 	movx	a,@dptr
   1D4C FB                 7286 	mov	r3,a
                           7287 ;	genCast
                           7288 ;	genMinus
                           7289 ;	Peephole 3.a	changed mov to clr
                           7290 ;	Peephole 3.b	changed mov to clr
   1D4D E4                 7291 	clr	a
   1D4E FC                 7292 	mov	r4,a
   1D4F FD                 7293 	mov	r5,a
   1D50 C3                 7294 	clr	c
                           7295 ;	Peephole 236.l	used r2 instead of ar2
   1D51 9A                 7296 	subb	a,r2
   1D52 FA                 7297 	mov	r2,a
                           7298 ;	Peephole 181	changed mov to clr
   1D53 E4                 7299 	clr	a
                           7300 ;	Peephole 236.l	used r3 instead of ar3
   1D54 9B                 7301 	subb	a,r3
   1D55 FB                 7302 	mov	r3,a
   1D56 74 01              7303 	mov	a,#0x01
                           7304 ;	Peephole 236.l	used r4 instead of ar4
   1D58 9C                 7305 	subb	a,r4
   1D59 FC                 7306 	mov	r4,a
                           7307 ;	Peephole 181	changed mov to clr
   1D5A E4                 7308 	clr	a
                           7309 ;	Peephole 236.l	used r5 instead of ar5
   1D5B 9D                 7310 	subb	a,r5
   1D5C FD                 7311 	mov	r5,a
                           7312 ;	genCast
   1D5D 90s00r8F           7313 	mov	dptr,#_time_value
   1D60 EA                 7314 	mov	a,r2
   1D61 F0                 7315 	movx	@dptr,a
   1D62 A3                 7316 	inc	dptr
   1D63 EB                 7317 	mov	a,r3
   1D64 F0                 7318 	movx	@dptr,a
                           7319 ;	main.c:931: printf_tiny("load value is %x\r\n",time_value);
                           7320 ;	genIpush
   1D65 90s00r8F           7321 	mov	dptr,#_time_value
   1D68 E0                 7322 	movx	a,@dptr
   1D69 C0 E0              7323 	push	acc
   1D6B A3                 7324 	inc	dptr
   1D6C E0                 7325 	movx	a,@dptr
   1D6D C0 E0              7326 	push	acc
                           7327 ;	genIpush
   1D6F 74rF3              7328 	mov	a,#__str_109
   1D71 C0 E0              7329 	push	acc
   1D73 74s12              7330 	mov	a,#(__str_109 >> 8)
   1D75 C0 E0              7331 	push	acc
                           7332 ;	genCall
   1D77 12s00r00           7333 	lcall	_printf_tiny
   1D7A E5 81              7334 	mov	a,sp
   1D7C 24 FC              7335 	add	a,#0xfc
   1D7E F5 81              7336 	mov	sp,a
                           7337 ;	main.c:932: time_value=(time_value*(1.085));
                           7338 ;	genAssign
   1D80 90s00r8F           7339 	mov	dptr,#_time_value
   1D83 E0                 7340 	movx	a,@dptr
   1D84 FA                 7341 	mov	r2,a
   1D85 A3                 7342 	inc	dptr
   1D86 E0                 7343 	movx	a,@dptr
   1D87 FB                 7344 	mov	r3,a
                           7345 ;	genCall
   1D88 8A 82              7346 	mov	dpl,r2
   1D8A 8B 83              7347 	mov	dph,r3
   1D8C 12s00r00           7348 	lcall	___uint2fs
   1D8F AA 82              7349 	mov	r2,dpl
   1D91 AB 83              7350 	mov	r3,dph
   1D93 AC F0              7351 	mov	r4,b
   1D95 FD                 7352 	mov	r5,a
                           7353 ;	genIpush
   1D96 74 48              7354 	mov	a,#0x48
   1D98 C0 E0              7355 	push	acc
   1D9A 74 E1              7356 	mov	a,#0xE1
   1D9C C0 E0              7357 	push	acc
   1D9E 74 8A              7358 	mov	a,#0x8A
   1DA0 C0 E0              7359 	push	acc
   1DA2 74 3F              7360 	mov	a,#0x3F
   1DA4 C0 E0              7361 	push	acc
                           7362 ;	genCall
   1DA6 8A 82              7363 	mov	dpl,r2
   1DA8 8B 83              7364 	mov	dph,r3
   1DAA 8C F0              7365 	mov	b,r4
   1DAC ED                 7366 	mov	a,r5
   1DAD 12s00r00           7367 	lcall	___fsmul
   1DB0 AA 82              7368 	mov	r2,dpl
   1DB2 AB 83              7369 	mov	r3,dph
   1DB4 AC F0              7370 	mov	r4,b
   1DB6 FD                 7371 	mov	r5,a
   1DB7 E5 81              7372 	mov	a,sp
   1DB9 24 FC              7373 	add	a,#0xfc
   1DBB F5 81              7374 	mov	sp,a
                           7375 ;	genCall
   1DBD 8A 82              7376 	mov	dpl,r2
   1DBF 8B 83              7377 	mov	dph,r3
   1DC1 8C F0              7378 	mov	b,r4
   1DC3 ED                 7379 	mov	a,r5
   1DC4 12s00r00           7380 	lcall	___fs2uint
   1DC7 E5 82              7381 	mov	a,dpl
   1DC9 85 83 F0           7382 	mov	b,dph
                           7383 ;	genAssign
   1DCC 90s00r8F           7384 	mov	dptr,#_time_value
   1DCF F0                 7385 	movx	@dptr,a
   1DD0 A3                 7386 	inc	dptr
   1DD1 E5 F0              7387 	mov	a,b
   1DD3 F0                 7388 	movx	@dptr,a
                           7389 ;	main.c:933: time_value=time_value/1000;
                           7390 ;	genAssign
   1DD4 90s00r8F           7391 	mov	dptr,#_time_value
   1DD7 E0                 7392 	movx	a,@dptr
   1DD8 FA                 7393 	mov	r2,a
   1DD9 A3                 7394 	inc	dptr
   1DDA E0                 7395 	movx	a,@dptr
   1DDB FB                 7396 	mov	r3,a
                           7397 ;	genAssign
   1DDC 90s00r00           7398 	mov	dptr,#__divuint_PARM_2
   1DDF 74 E8              7399 	mov	a,#0xE8
   1DE1 F0                 7400 	movx	@dptr,a
   1DE2 A3                 7401 	inc	dptr
   1DE3 74 03              7402 	mov	a,#0x03
   1DE5 F0                 7403 	movx	@dptr,a
                           7404 ;	genCall
   1DE6 8A 82              7405 	mov	dpl,r2
   1DE8 8B 83              7406 	mov	dph,r3
   1DEA 12s00r00           7407 	lcall	__divuint
   1DED E5 82              7408 	mov	a,dpl
   1DEF 85 83 F0           7409 	mov	b,dph
                           7410 ;	genAssign
   1DF2 90s00r8F           7411 	mov	dptr,#_time_value
   1DF5 F0                 7412 	movx	@dptr,a
   1DF6 A3                 7413 	inc	dptr
   1DF7 E5 F0              7414 	mov	a,b
   1DF9 F0                 7415 	movx	@dptr,a
                           7416 ;	main.c:934: printf_tiny("time value is us is %d\r\n",time_value);
                           7417 ;	genIpush
   1DFA 90s00r8F           7418 	mov	dptr,#_time_value
   1DFD E0                 7419 	movx	a,@dptr
   1DFE C0 E0              7420 	push	acc
   1E00 A3                 7421 	inc	dptr
   1E01 E0                 7422 	movx	a,@dptr
   1E02 C0 E0              7423 	push	acc
                           7424 ;	genIpush
   1E04 74r06              7425 	mov	a,#__str_110
   1E06 C0 E0              7426 	push	acc
   1E08 74s13              7427 	mov	a,#(__str_110 >> 8)
   1E0A C0 E0              7428 	push	acc
                           7429 ;	genCall
   1E0C 12s00r00           7430 	lcall	_printf_tiny
   1E0F E5 81              7431 	mov	a,sp
   1E11 24 FC              7432 	add	a,#0xfc
   1E13 F5 81              7433 	mov	sp,a
                           7434 ;	main.c:935: t2flag= t2flag*71.1;
                           7435 ;	genAssign
   1E15 90s00r8D           7436 	mov	dptr,#_t2flag
   1E18 E0                 7437 	movx	a,@dptr
   1E19 FA                 7438 	mov	r2,a
   1E1A A3                 7439 	inc	dptr
   1E1B E0                 7440 	movx	a,@dptr
   1E1C FB                 7441 	mov	r3,a
                           7442 ;	genCall
   1E1D 8A 82              7443 	mov	dpl,r2
   1E1F 8B 83              7444 	mov	dph,r3
   1E21 12s00r00           7445 	lcall	___uint2fs
   1E24 AA 82              7446 	mov	r2,dpl
   1E26 AB 83              7447 	mov	r3,dph
   1E28 AC F0              7448 	mov	r4,b
   1E2A FD                 7449 	mov	r5,a
                           7450 ;	genIpush
   1E2B 74 33              7451 	mov	a,#0x33
   1E2D C0 E0              7452 	push	acc
   1E2F C0 E0              7453 	push	acc
   1E31 74 8E              7454 	mov	a,#0x8E
   1E33 C0 E0              7455 	push	acc
   1E35 74 42              7456 	mov	a,#0x42
   1E37 C0 E0              7457 	push	acc
                           7458 ;	genCall
   1E39 8A 82              7459 	mov	dpl,r2
   1E3B 8B 83              7460 	mov	dph,r3
   1E3D 8C F0              7461 	mov	b,r4
   1E3F ED                 7462 	mov	a,r5
   1E40 12s00r00           7463 	lcall	___fsmul
   1E43 AA 82              7464 	mov	r2,dpl
   1E45 AB 83              7465 	mov	r3,dph
   1E47 AC F0              7466 	mov	r4,b
   1E49 FD                 7467 	mov	r5,a
   1E4A E5 81              7468 	mov	a,sp
   1E4C 24 FC              7469 	add	a,#0xfc
   1E4E F5 81              7470 	mov	sp,a
                           7471 ;	genCall
   1E50 8A 82              7472 	mov	dpl,r2
   1E52 8B 83              7473 	mov	dph,r3
   1E54 8C F0              7474 	mov	b,r4
   1E56 ED                 7475 	mov	a,r5
   1E57 12s00r00           7476 	lcall	___fs2uint
   1E5A E5 82              7477 	mov	a,dpl
   1E5C 85 83 F0           7478 	mov	b,dph
                           7479 ;	genAssign
   1E5F 90s00r8D           7480 	mov	dptr,#_t2flag
   1E62 F0                 7481 	movx	@dptr,a
   1E63 A3                 7482 	inc	dptr
   1E64 E5 F0              7483 	mov	a,b
   1E66 F0                 7484 	movx	@dptr,a
                           7485 ;	main.c:936: time_value= (time_value+t2flag);
                           7486 ;	genAssign
   1E67 90s00r8D           7487 	mov	dptr,#_t2flag
   1E6A E0                 7488 	movx	a,@dptr
   1E6B FA                 7489 	mov	r2,a
   1E6C A3                 7490 	inc	dptr
   1E6D E0                 7491 	movx	a,@dptr
   1E6E FB                 7492 	mov	r3,a
                           7493 ;	genAssign
   1E6F 90s00r8F           7494 	mov	dptr,#_time_value
   1E72 E0                 7495 	movx	a,@dptr
   1E73 FC                 7496 	mov	r4,a
   1E74 A3                 7497 	inc	dptr
   1E75 E0                 7498 	movx	a,@dptr
   1E76 FD                 7499 	mov	r5,a
                           7500 ;	genPlus
   1E77 90s00r8F           7501 	mov	dptr,#_time_value
                           7502 ;	Peephole 236.g	used r2 instead of ar2
   1E7A EA                 7503 	mov	a,r2
                           7504 ;	Peephole 236.a	used r4 instead of ar4
   1E7B 2C                 7505 	add	a,r4
   1E7C F0                 7506 	movx	@dptr,a
                           7507 ;	Peephole 236.g	used r3 instead of ar3
   1E7D EB                 7508 	mov	a,r3
                           7509 ;	Peephole 236.b	used r5 instead of ar5
   1E7E 3D                 7510 	addc	a,r5
   1E7F A3                 7511 	inc	dptr
   1E80 F0                 7512 	movx	@dptr,a
                           7513 ;	main.c:937: printf_tiny("Number of times interrupt is %d\r\n",t2flag);
                           7514 ;	genIpush
   1E81 C0 02              7515 	push	ar2
   1E83 C0 03              7516 	push	ar3
                           7517 ;	genIpush
   1E85 74rD1              7518 	mov	a,#__str_108
   1E87 C0 E0              7519 	push	acc
   1E89 74s12              7520 	mov	a,#(__str_108 >> 8)
   1E8B C0 E0              7521 	push	acc
                           7522 ;	genCall
   1E8D 12s00r00           7523 	lcall	_printf_tiny
   1E90 E5 81              7524 	mov	a,sp
   1E92 24 FC              7525 	add	a,#0xfc
   1E94 F5 81              7526 	mov	sp,a
                           7527 ;	main.c:938: printf_tiny("*******************************total time value is ms is %dms******************************\r\n",time_value);
                           7528 ;	genIpush
   1E96 90s00r8F           7529 	mov	dptr,#_time_value
   1E99 E0                 7530 	movx	a,@dptr
   1E9A C0 E0              7531 	push	acc
   1E9C A3                 7532 	inc	dptr
   1E9D E0                 7533 	movx	a,@dptr
   1E9E C0 E0              7534 	push	acc
                           7535 ;	genIpush
   1EA0 74r1F              7536 	mov	a,#__str_111
   1EA2 C0 E0              7537 	push	acc
   1EA4 74s13              7538 	mov	a,#(__str_111 >> 8)
   1EA6 C0 E0              7539 	push	acc
                           7540 ;	genCall
   1EA8 12s00r00           7541 	lcall	_printf_tiny
   1EAB E5 81              7542 	mov	a,sp
   1EAD 24 FC              7543 	add	a,#0xfc
   1EAF F5 81              7544 	mov	sp,a
                           7545 ;	main.c:939: time_value = time_value/1000;
                           7546 ;	genAssign
   1EB1 90s00r8F           7547 	mov	dptr,#_time_value
   1EB4 E0                 7548 	movx	a,@dptr
   1EB5 FA                 7549 	mov	r2,a
   1EB6 A3                 7550 	inc	dptr
   1EB7 E0                 7551 	movx	a,@dptr
   1EB8 FB                 7552 	mov	r3,a
                           7553 ;	genAssign
   1EB9 90s00r00           7554 	mov	dptr,#__divuint_PARM_2
   1EBC 74 E8              7555 	mov	a,#0xE8
   1EBE F0                 7556 	movx	@dptr,a
   1EBF A3                 7557 	inc	dptr
   1EC0 74 03              7558 	mov	a,#0x03
   1EC2 F0                 7559 	movx	@dptr,a
                           7560 ;	genCall
   1EC3 8A 82              7561 	mov	dpl,r2
   1EC5 8B 83              7562 	mov	dph,r3
   1EC7 12s00r00           7563 	lcall	__divuint
   1ECA E5 82              7564 	mov	a,dpl
   1ECC 85 83 F0           7565 	mov	b,dph
                           7566 ;	genAssign
   1ECF 90s00r8F           7567 	mov	dptr,#_time_value
   1ED2 F0                 7568 	movx	@dptr,a
   1ED3 A3                 7569 	inc	dptr
   1ED4 E5 F0              7570 	mov	a,b
   1ED6 F0                 7571 	movx	@dptr,a
                           7572 ;	main.c:940: printf_tiny("*******************************total time value is s is %ds**********************************\r\n",time_value);
                           7573 ;	genIpush
   1ED7 90s00r8F           7574 	mov	dptr,#_time_value
   1EDA E0                 7575 	movx	a,@dptr
   1EDB C0 E0              7576 	push	acc
   1EDD A3                 7577 	inc	dptr
   1EDE E0                 7578 	movx	a,@dptr
   1EDF C0 E0              7579 	push	acc
                           7580 ;	genIpush
   1EE1 74r7D              7581 	mov	a,#__str_112
   1EE3 C0 E0              7582 	push	acc
   1EE5 74s13              7583 	mov	a,#(__str_112 >> 8)
   1EE7 C0 E0              7584 	push	acc
                           7585 ;	genCall
   1EE9 12s00r00           7586 	lcall	_printf_tiny
   1EEC E5 81              7587 	mov	a,sp
   1EEE 24 FC              7588 	add	a,#0xfc
   1EF0 F5 81              7589 	mov	sp,a
                           7590 ;	Peephole 300	removed redundant label 00151$
   1EF2 22                 7591 	ret
                           7592 ;------------------------------------------------------------
                           7593 ;Allocation info for local variables in function 'searchtimer_init'
                           7594 ;------------------------------------------------------------
                           7595 ;------------------------------------------------------------
                           7596 ;	main.c:945: void searchtimer_init()
                           7597 ;	-----------------------------------------
                           7598 ;	 function searchtimer_init
                           7599 ;	-----------------------------------------
   1EF3                    7600 _searchtimer_init:
                           7601 ;	main.c:947: T2MOD |= 0x00;  //Set Timer 0 to 16 bit Timer
                           7602 ;	genAssign
   1EF3 85 C9 C9           7603 	mov	_T2MOD,_T2MOD
                           7604 ;	main.c:948: TH2 =   0x00;  //load the counter value into the timer
                           7605 ;	genAssign
   1EF6 75 CD 00           7606 	mov	_TH2,#0x00
                           7607 ;	main.c:949: TL2 =   0x00;
                           7608 ;	genAssign
   1EF9 75 CC 00           7609 	mov	_TL2,#0x00
                           7610 ;	main.c:950: IE  |= 0xA3;   //Enable Global interrupt, Timer 0 Interrupt and External interrupt
                           7611 ;	genOr
   1EFC 43 A8 A3           7612 	orl	_IE,#0xA3
                           7613 ;	Peephole 300	removed redundant label 00101$
   1EFF 22                 7614 	ret
                           7615 	.area CSEG    (CODE)
                           7616 	.area CONST   (CODE)
   0000                    7617 __str_0:
   0000 0D                 7618 	.db 0x0D
   0001 0A                 7619 	.db 0x0A
   0002 2A 2A 2A 2A 2A 2A  7620 	.ascii "****************WELCOME***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 57 45
        4C 43 4F 4D 45 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0028 0D                 7621 	.db 0x0D
   0029 0A                 7622 	.db 0x0A
   002A 00                 7623 	.db 0x00
   002B                    7624 __str_1:
   002B 0D                 7625 	.db 0x0D
   002C 0A                 7626 	.db 0x0A
   002D 00                 7627 	.db 0x00
   002E                    7628 __str_2:
   002E 0D                 7629 	.db 0x0D
   002F 0A                 7630 	.db 0x0A
   0030 2A 2A 2A 2A 2A 2A  7631 	.ascii "******** MENU ********"
        2A 2A 20 4D 45 4E
        55 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0046 0D                 7632 	.db 0x0D
   0047 0A                 7633 	.db 0x0A
   0048 00                 7634 	.db 0x00
   0049                    7635 __str_3:
   0049 2A 2A 2A 2A 2A 2A  7636 	.ascii "******** SELECT 'L' FOR LCD    ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 4C
        27 20 46 4F 52 20
        4C 43 44 20 20 20
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0073 0D                 7637 	.db 0x0D
   0074 0A                 7638 	.db 0x0A
   0075 00                 7639 	.db 0x00
   0076                    7640 __str_4:
   0076 2A 2A 2A 2A 2A 2A  7641 	.ascii "******** SELECT 'E' FOR EEPROM ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 45
        27 20 46 4F 52 20
        45 45 50 52 4F 4D
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   00A0 0D                 7642 	.db 0x0D
   00A1 0A                 7643 	.db 0x0A
   00A2 00                 7644 	.db 0x00
   00A3                    7645 __str_5:
   00A3 2A 2A 2A 2A 2A 2A  7646 	.ascii "******** SELECT 'C' FOR CLOCK   ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 43
        27 20 46 4F 52 20
        43 4C 4F 43 4B 20
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   00CE 0D                 7647 	.db 0x0D
   00CF 0A                 7648 	.db 0x0A
   00D0 00                 7649 	.db 0x00
   00D1                    7650 __str_6:
   00D1 2A 2A 2A 2A 2A 2A  7651 	.ascii "******** SELECT 'I' FOR IO EXPANDER   ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 49
        27 20 46 4F 52 20
        49 4F 20 45 58 50
        41 4E 44 45 52 20
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0102 0D                 7652 	.db 0x0D
   0103 0A                 7653 	.db 0x0A
   0104 00                 7654 	.db 0x00
   0105                    7655 __str_7:
   0105 54 68 65 20 63 6F  7656 	.ascii "The command you entered is"
        6D 6D 61 6E 64 20
        79 6F 75 20 65 6E
        74 65 72 65 64 20
        69 73
   011F 09                 7657 	.db 0x09
   0120 00                 7658 	.db 0x00
   0121                    7659 __str_8:
   0121 2A 2A 2A 2A 2A 2A  7660 	.ascii "************ LCD MENU **********"
        2A 2A 2A 2A 2A 2A
        20 4C 43 44 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0141 0D                 7661 	.db 0x0D
   0142 0A                 7662 	.db 0x0A
   0143 00                 7663 	.db 0x00
   0144                    7664 __str_9:
   0144 2A 2A 2A 2A 2A 2A  7665 	.ascii "********* SELECT 'C' for CGRAM DUMP ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        43 27 20 66 6F 72
        20 43 47 52 41 4D
        20 44 55 4D 50 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0173 0D                 7666 	.db 0x0D
   0174 0A                 7667 	.db 0x0A
   0175 00                 7668 	.db 0x00
   0176                    7669 __str_10:
   0176 2A 2A 2A 2A 2A 2A  7670 	.ascii "********* SELECT 'D' for DDRAM DUMP ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        44 27 20 66 6F 72
        20 44 44 52 41 4D
        20 44 55 4D 50 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   01A5 0D                 7671 	.db 0x0D
   01A6 0A                 7672 	.db 0x0A
   01A7 00                 7673 	.db 0x00
   01A8                    7674 __str_11:
   01A8 2A 2A 2A 2A 2A 2A  7675 	.ascii "********* SELECT 'P' for LCD PUT STRING  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        50 27 20 66 6F 72
        20 4C 43 44 20 50
        55 54 20 53 54 52
        49 4E 47 20 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   01DC 0D                 7676 	.db 0x0D
   01DD 0A                 7677 	.db 0x0A
   01DE 00                 7678 	.db 0x00
   01DF                    7679 __str_12:
   01DF 2A 2A 2A 2A 2A 2A  7680 	.ascii "********* SELECT 'L' for LCD CLEAR  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        4C 27 20 66 6F 72
        20 4C 43 44 20 43
        4C 45 41 52 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   020E 0D                 7681 	.db 0x0D
   020F 0A                 7682 	.db 0x0A
   0210 00                 7683 	.db 0x00
   0211                    7684 __str_13:
   0211 2A 2A 2A 2A 2A 2A  7685 	.ascii "********* SELECT 'R' for CUSTOM CHARACTER CREATE ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        43 52 45 41 54 45
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   024D 0D                 7686 	.db 0x0D
   024E 0A                 7687 	.db 0x0A
   024F 00                 7688 	.db 0x00
   0250                    7689 __str_14:
   0250 2A 2A 2A 2A 2A 2A  7690 	.ascii "********* SELECT 'H' for CUSTOM CHARACTER DISPLAY **********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        48 27 20 66 6F 72
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        44 49 53 50 4C 41
        59 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   028C 2A                 7691 	.ascii "*"
   028D 0D                 7692 	.db 0x0D
   028E 0A                 7693 	.db 0x0A
   028F 00                 7694 	.db 0x00
   0290                    7695 __str_15:
   0290 2A 2A 2A 2A 2A 2A  7696 	.ascii "********* SELECT 'F' for LCD FUN LOGO DISPLAY ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        46 27 20 66 6F 72
        20 4C 43 44 20 46
        55 4E 20 4C 4F 47
        4F 20 44 49 53 50
        4C 41 59 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   02C9 0D                 7697 	.db 0x0D
   02CA 0A                 7698 	.db 0x0A
   02CB 00                 7699 	.db 0x00
   02CC                    7700 __str_16:
   02CC 2A 2A 2A 2A 2A 2A  7701 	.ascii "********* SELECT 'S' for STRING SEARCH  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 53 54 52 49 4E
        47 20 53 45 41 52
        43 48 20 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   02FF 0D                 7702 	.db 0x0D
   0300 0A                 7703 	.db 0x0A
   0301 00                 7704 	.db 0x00
   0302                    7705 __str_17:
   0302 2A 2A 2A 2A 2A 2A  7706 	.ascii "********* SELECT 'A' for LCD READ ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        41 27 20 66 6F 72
        20 4C 43 44 20 52
        45 41 44 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   032F 0D                 7707 	.db 0x0D
   0330 0A                 7708 	.db 0x0A
   0331 00                 7709 	.db 0x00
   0332                    7710 __str_18:
   0332 2A 2A 2A 2A 2A 2A  7711 	.ascii "********* SELECT 'M' for MAIN MENU  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        4D 27 20 66 6F 72
        20 4D 41 49 4E 20
        4D 45 4E 55 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0361 0D                 7712 	.db 0x0D
   0362 0A                 7713 	.db 0x0A
   0363 00                 7714 	.db 0x00
   0364                    7715 __str_19:
   0364 2A 2A 2A 2A 2A 2A  7716 	.ascii "************CGRAM DUMP MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        43 47 52 41 4D 20
        44 55 4D 50 20 4D
        4F 44 45 20 49 4E
        20 4C 43 44 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0393 0D                 7717 	.db 0x0D
   0394 0A                 7718 	.db 0x0A
   0395 00                 7719 	.db 0x00
   0396                    7720 __str_20:
   0396 2A 2A 2A 2A 2A 2A  7721 	.ascii "************DDRAM DUMP MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        44 44 52 41 4D 20
        44 55 4D 50 20 4D
        4F 44 45 20 49 4E
        20 4C 43 44 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   03C5 0D                 7722 	.db 0x0D
   03C6 0A                 7723 	.db 0x0A
   03C7 00                 7724 	.db 0x00
   03C8                    7725 __str_21:
   03C8 2A 2A 2A 2A 2A 2A  7726 	.ascii "************LCD PUT STRING*************"
        2A 2A 2A 2A 2A 2A
        4C 43 44 20 50 55
        54 20 53 54 52 49
        4E 47 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   03EF 0D                 7727 	.db 0x0D
   03F0 0A                 7728 	.db 0x0A
   03F1 00                 7729 	.db 0x00
   03F2                    7730 __str_22:
   03F2 42 43 42 43 42 43  7731 	.ascii "BCBCBCED"
        45 44
   03FA 00                 7732 	.db 0x00
   03FB                    7733 __str_23:
   03FB 2A 2A 2A 2A 2A 2A  7734 	.ascii "********Back to  Main Menu**********"
        2A 2A 42 61 63 6B
        20 74 6F 20 20 4D
        61 69 6E 20 4D 65
        6E 75 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   041F 00                 7735 	.db 0x00
   0420                    7736 __str_24:
   0420 2A 2A 2A 2A 2A 2A  7737 	.ascii "************CLEAR LCD MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        43 4C 45 41 52 20
        4C 43 44 20 4D 4F
        44 45 20 49 4E 20
        4C 43 44 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   044E 0D                 7738 	.db 0x0D
   044F 0A                 7739 	.db 0x0A
   0450 00                 7740 	.db 0x00
   0451                    7741 __str_25:
   0451 2A 2A 2A 2A 2A 2A  7742 	.ascii "******** CUSTOM CHARACTER DISPLAY MODE *********"
        2A 2A 20 43 55 53
        54 4F 4D 20 43 48
        41 52 41 43 54 45
        52 20 44 49 53 50
        4C 41 59 20 4D 4F
        44 45 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0481 00                 7743 	.db 0x00
   0482                    7744 __str_26:
   0482 2A 2A 2A 2A 2A 2A  7745 	.ascii "************ CUSTOM CHARACTER CREATE MODE *************"
        2A 2A 2A 2A 2A 2A
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        43 52 45 41 54 45
        20 4D 4F 44 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   04B9 0D                 7746 	.db 0x0D
   04BA 0A                 7747 	.db 0x0A
   04BB 00                 7748 	.db 0x00
   04BC                    7749 __str_27:
   04BC 2A 2A 2A 2A 2A 2A  7750 	.ascii "************ LCD FUN LOGO DISPLAY *************"
        2A 2A 2A 2A 2A 2A
        20 4C 43 44 20 46
        55 4E 20 4C 4F 47
        4F 20 44 49 53 50
        4C 41 59 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   04EB 0D                 7751 	.db 0x0D
   04EC 0A                 7752 	.db 0x0A
   04ED 00                 7753 	.db 0x00
   04EE                    7754 __str_28:
   04EE 2A 2A 2A 2A 2A 2A  7755 	.ascii "************ STRING SEARCH *************"
        2A 2A 2A 2A 2A 2A
        20 53 54 52 49 4E
        47 20 53 45 41 52
        43 48 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0516 0D                 7756 	.db 0x0D
   0517 0A                 7757 	.db 0x0A
   0518 00                 7758 	.db 0x00
   0519                    7759 __str_29:
   0519 2A 2A 2A 2A 2A 2A  7760 	.ascii "************ LCD READ *************"
        2A 2A 2A 2A 2A 2A
        20 4C 43 44 20 52
        45 41 44 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   053C 0D                 7761 	.db 0x0D
   053D 0A                 7762 	.db 0x0A
   053E 00                 7763 	.db 0x00
   053F                    7764 __str_30:
   053F 4C 43 44 20 52 45  7765 	.ascii "LCD READ IS GIVING:"
        41 44 20 49 53 20
        47 49 56 49 4E 47
        3A
   0552 00                 7766 	.db 0x00
   0553                    7767 __str_31:
   0553 50 6C 65 61 73 65  7768 	.ascii "Please enter a valid command"
        20 65 6E 74 65 72
        20 61 20 76 61 6C
        69 64 20 63 6F 6D
        6D 61 6E 64
   056F 0D                 7769 	.db 0x0D
   0570 0A                 7770 	.db 0x0A
   0571 00                 7771 	.db 0x00
   0572                    7772 __str_32:
   0572 2A 2A 2A 2A 2A 2A  7773 	.ascii "********* EEPROM MENU *********"
        2A 2A 2A 20 45 45
        50 52 4F 4D 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0591 0D                 7774 	.db 0x0D
   0592 0A                 7775 	.db 0x0A
   0593 00                 7776 	.db 0x00
   0594                    7777 __str_33:
   0594 2A 2A 2A 2A 2A 2A  7778 	.ascii "********* SELECT 'W' for WRITE BYTE ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        57 27 20 66 6F 72
        20 57 52 49 54 45
        20 42 59 54 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   05C3 0D                 7779 	.db 0x0D
   05C4 0A                 7780 	.db 0x0A
   05C5 00                 7781 	.db 0x00
   05C6                    7782 __str_34:
   05C6 2A 2A 2A 2A 2A 2A  7783 	.ascii "********* SELECT 'R' for READ BYTE  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 52 45 41 44 20
        42 59 54 45 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   05F5 0D                 7784 	.db 0x0D
   05F6 0A                 7785 	.db 0x0A
   05F7 00                 7786 	.db 0x00
   05F8                    7787 __str_35:
   05F8 2A 2A 2A 2A 2A 2A  7788 	.ascii "********* SELECT 'H' for HEXDUMP    ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        48 27 20 66 6F 72
        20 48 45 58 44 55
        4D 50 20 20 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0627 0D                 7789 	.db 0x0D
   0628 0A                 7790 	.db 0x0A
   0629 00                 7791 	.db 0x00
   062A                    7792 __str_36:
   062A 2A 2A 2A 2A 2A 2A  7793 	.ascii "******** SELECT 'M' for MAIN MENU ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 4D
        27 20 66 6F 72 20
        4D 41 49 4E 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0657 0D                 7794 	.db 0x0D
   0658 0A                 7795 	.db 0x0A
   0659 00                 7796 	.db 0x00
   065A                    7797 __str_37:
   065A 2A 2A 2A 2A 2A 2A  7798 	.ascii "***********WRITE BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 57
        52 49 54 45 20 42
        59 54 45 20 4D 4F
        44 45 20 49 4E 20
        45 45 50 52 4F 4D
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0688 0D                 7799 	.db 0x0D
   0689 0A                 7800 	.db 0x0A
   068A 00                 7801 	.db 0x00
   068B                    7802 __str_38:
   068B 2A 2A 2A 2A 2A 2A  7803 	.ascii "***********READ BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 52
        45 41 44 20 42 59
        54 45 20 4D 4F 44
        45 20 49 4E 20 45
        45 50 52 4F 4D 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   06B8 0D                 7804 	.db 0x0D
   06B9 0A                 7805 	.db 0x0A
   06BA 00                 7806 	.db 0x00
   06BB                    7807 __str_39:
   06BB 2A 2A 2A 2A 2A 2A  7808 	.ascii "***********HEXDUMP BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 48
        45 58 44 55 4D 50
        20 42 59 54 45 20
        4D 4F 44 45 20 49
        4E 20 45 45 50 52
        4F 4D 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   06EB 0D                 7809 	.db 0x0D
   06EC 0A                 7810 	.db 0x0A
   06ED 00                 7811 	.db 0x00
   06EE                    7812 __str_40:
   06EE 2A 2A 2A 2A 2A 2A  7813 	.ascii "********Back to Main Menu**********"
        2A 2A 42 61 63 6B
        20 74 6F 20 4D 61
        69 6E 20 4D 65 6E
        75 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0711 00                 7814 	.db 0x00
   0712                    7815 __str_41:
   0712 2A 2A 2A 2A 2A 2A  7816 	.ascii "********* CLOCK MENU *********"
        2A 2A 2A 20 43 4C
        4F 43 4B 20 4D 45
        4E 55 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0730 0D                 7817 	.db 0x0D
   0731 0A                 7818 	.db 0x0A
   0732 00                 7819 	.db 0x00
   0733                    7820 __str_42:
   0733 2A 2A 2A 2A 2A 2A  7821 	.ascii "********* SELECT 'R' for CLOCK RESET ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 52 45 53 45 54
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0763 0D                 7822 	.db 0x0D
   0764 0A                 7823 	.db 0x0A
   0765 00                 7824 	.db 0x00
   0766                    7825 __str_43:
   0766 2A 2A 2A 2A 2A 2A  7826 	.ascii "********* SELECT 'S' for CLOCK STOP  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 53 54 4F 50 20
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0796 0D                 7827 	.db 0x0D
   0797 0A                 7828 	.db 0x0A
   0798 00                 7829 	.db 0x00
   0799                    7830 __str_44:
   0799 2A 2A 2A 2A 2A 2A  7831 	.ascii "********* SELECT 'T' for CLOCK RESTART   ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        54 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 52 45 53 54 41
        52 54 20 20 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   07CD 0D                 7832 	.db 0x0D
   07CE 0A                 7833 	.db 0x0A
   07CF 00                 7834 	.db 0x00
   07D0                    7835 __str_45:
   07D0 2A 2A 2A 2A 2A 2A  7836 	.ascii "*********** CLOCK RESET **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        52 45 53 45 54 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   07F2 0D                 7837 	.db 0x0D
   07F3 0A                 7838 	.db 0x0A
   07F4 00                 7839 	.db 0x00
   07F5                    7840 __str_46:
   07F5 2A 2A 2A 2A 2A 2A  7841 	.ascii "*********** CLOCK STOP **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        53 54 4F 50 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0816 0D                 7842 	.db 0x0D
   0817 0A                 7843 	.db 0x0A
   0818 00                 7844 	.db 0x00
   0819                    7845 __str_47:
   0819 2A 2A 2A 2A 2A 2A  7846 	.ascii "*********** CLOCK RESTART **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        52 45 53 54 41 52
        54 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   083D 0D                 7847 	.db 0x0D
   083E 0A                 7848 	.db 0x0A
   083F 00                 7849 	.db 0x00
   0840                    7850 __str_48:
   0840 2A 2A 2A 2A 2A 2A  7851 	.ascii "********* I/O EXPANDER MENU *********"
        2A 2A 2A 20 49 2F
        4F 20 45 58 50 41
        4E 44 45 52 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0865 0D                 7852 	.db 0x0D
   0866 0A                 7853 	.db 0x0A
   0867 00                 7854 	.db 0x00
   0868                    7855 __str_49:
   0868 2A 2A 2A 2A 2A 2A  7856 	.ascii "********* SELECT 'W' for I/O EXPANDER WRITE  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        57 27 20 66 6F 72
        20 49 2F 4F 20 45
        58 50 41 4E 44 45
        52 20 57 52 49 54
        45 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   08A0 0D                 7857 	.db 0x0D
   08A1 0A                 7858 	.db 0x0A
   08A2 00                 7859 	.db 0x00
   08A3                    7860 __str_50:
   08A3 2A 2A 2A 2A 2A 2A  7861 	.ascii "********* SELECT 'R' for I/O EXPANDER STATUS READ  *********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 49 2F 4F 20 45
        58 50 41 4E 44 45
        52 20 53 54 41 54
        55 53 20 52 45 41
        44 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   08DF 2A 2A              7862 	.ascii "**"
   08E1 0D                 7863 	.db 0x0D
   08E2 0A                 7864 	.db 0x0A
   08E3 00                 7865 	.db 0x00
   08E4                    7866 __str_51:
   08E4 2A 2A 2A 2A 2A 2A  7867 	.ascii "********* SELECT 'D' for I/O PORT PIN DIRECTION CHANGE   ***"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        44 27 20 66 6F 72
        20 49 2F 4F 20 50
        4F 52 54 20 50 49
        4E 20 44 49 52 45
        43 54 49 4F 4E 20
        43 48 41 4E 47 45
        20 20 20 2A 2A 2A
   0920 2A 2A 2A 2A 2A 2A  7868 	.ascii "********"
        2A 2A
   0928 0D                 7869 	.db 0x0D
   0929 0A                 7870 	.db 0x0A
   092A 00                 7871 	.db 0x00
   092B                    7872 __str_52:
   092B 2A 2A 2A 2A 2A 2A  7873 	.ascii "********* SELECT 'C' for I/O COUNTER RESET   ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        43 27 20 66 6F 72
        20 49 2F 4F 20 43
        4F 55 4E 54 45 52
        20 52 45 53 45 54
        20 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0963 0D                 7874 	.db 0x0D
   0964 0A                 7875 	.db 0x0A
   0965 00                 7876 	.db 0x00
   0966                    7877 __str_53:
   0966 2A 2A 2A 2A 2A 2A  7878 	.ascii "********* SELECT 'I' for I/O DISPLAY DIRECTION STATUS   ****"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        49 27 20 66 6F 72
        20 49 2F 4F 20 44
        49 53 50 4C 41 59
        20 44 49 52 45 43
        54 49 4F 4E 20 53
        54 41 54 55 53 20
        20 20 2A 2A 2A 2A
   09A2 2A 2A 2A 2A 2A 2A  7879 	.ascii "*******"
        2A
   09A9 0D                 7880 	.db 0x0D
   09AA 0A                 7881 	.db 0x0A
   09AB 00                 7882 	.db 0x00
   09AC                    7883 __str_54:
   09AC 2A 2A 2A 2A 2A 2A  7884 	.ascii "********* SELECT 'S' for I/O DISPLAY DATA STATUS  **********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 49 2F 4F 20 44
        49 53 50 4C 41 59
        20 44 41 54 41 20
        53 54 41 54 55 53
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   09E8 2A                 7885 	.ascii "*"
   09E9 0D                 7886 	.db 0x0D
   09EA 0A                 7887 	.db 0x0A
   09EB 00                 7888 	.db 0x00
   09EC                    7889 __str_55:
   09EC 2A 2A 2A 2A 2A 2A  7890 	.ascii "*********** I/O EXPANDER WRITE BYTE **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 45 58
        50 41 4E 44 45 52
        20 57 52 49 54 45
        20 42 59 54 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0A1A 0D                 7891 	.db 0x0D
   0A1B 0A                 7892 	.db 0x0A
   0A1C 00                 7893 	.db 0x00
   0A1D                    7894 __str_56:
   0A1D 45 6E 74 65 72 20  7895 	.ascii "Enter a output port pin number between 1 to 3 you want to wr"
        61 20 6F 75 74 70
        75 74 20 70 6F 72
        74 20 70 69 6E 20
        6E 75 6D 62 65 72
        20 62 65 74 77 65
        65 6E 20 31 20 74
        6F 20 33 20 79 6F
        75 20 77 61 6E 74
        20 74 6F 20 77 72
   0A59 69 74 65 20 74 6F  7896 	.ascii "ite to"
   0A5F 0D                 7897 	.db 0x0D
   0A60 0A                 7898 	.db 0x0A
   0A61 00                 7899 	.db 0x00
   0A62                    7900 __str_57:
   0A62 54 68 65 20 70 69  7901 	.ascii "The pin you have selected is:"
        6E 20 79 6F 75 20
        68 61 76 65 20 73
        65 6C 65 63 74 65
        64 20 69 73 3A
   0A7F 00                 7902 	.db 0x00
   0A80                    7903 __str_58:
   0A80 50 6C 65 61 73 65  7904 	.ascii "Please Enter a Output Pin between 1 to 3"
        20 45 6E 74 65 72
        20 61 20 4F 75 74
        70 75 74 20 50 69
        6E 20 62 65 74 77
        65 65 6E 20 31 20
        74 6F 20 33
   0AA8 0D                 7905 	.db 0x0D
   0AA9 0A                 7906 	.db 0x0A
   0AAA 00                 7907 	.db 0x00
   0AAB                    7908 __str_59:
   0AAB 0A                 7909 	.db 0x0A
   0AAC 0A                 7910 	.db 0x0A
   0AAD 0D                 7911 	.db 0x0D
   0AAE 09                 7912 	.db 0x09
   0AAF 20 53 65 6C 65 63  7913 	.ascii " Select a bit to write to the pin:  0. and  1. "
        74 20 61 20 62 69
        74 20 74 6F 20 77
        72 69 74 65 20 74
        6F 20 74 68 65 20
        70 69 6E 3A 20 20
        30 2E 20 61 6E 64
        20 20 31 2E 20
   0ADE 0D                 7914 	.db 0x0D
   0ADF 0A                 7915 	.db 0x0A
   0AE0 09                 7916 	.db 0x09
   0AE1 00                 7917 	.db 0x00
   0AE2                    7918 __str_60:
   0AE2 54 68 65 20 62 69  7919 	.ascii "The bit you have selected is:"
        74 20 79 6F 75 20
        68 61 76 65 20 73
        65 6C 65 63 74 65
        64 20 69 73 3A
   0AFF 00                 7920 	.db 0x00
   0B00                    7921 __str_61:
   0B00 0A                 7922 	.db 0x0A
   0B01 0A                 7923 	.db 0x0A
   0B02 0D                 7924 	.db 0x0D
   0B03 20 2A 2D 45 52 52  7925 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0B0D 0A                 7926 	.db 0x0A
   0B0E 0D                 7927 	.db 0x0D
   0B0F 09                 7928 	.db 0x09
   0B10 20 45 6E 74 65 72  7929 	.ascii " Enter a valid number between 0 or 1: "
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 6F 72 20 31
        3A 20
   0B36 0D                 7930 	.db 0x0D
   0B37 0A                 7931 	.db 0x0A
   0B38 00                 7932 	.db 0x00
   0B39                    7933 __str_62:
   0B39 2A 2A 2A 2A 2A 2A  7934 	.ascii "*********** I/O EXPANDER READ BYTE  **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 45 58
        50 41 4E 44 45 52
        20 52 45 41 44 20
        42 59 54 45 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0B67 0D                 7935 	.db 0x0D
   0B68 0A                 7936 	.db 0x0A
   0B69 00                 7937 	.db 0x00
   0B6A                    7938 __str_63:
   0B6A 54 68 65 20 73 74  7939 	.ascii "The status of I/O expander is %X "
        61 74 75 73 20 6F
        66 20 49 2F 4F 20
        65 78 70 61 6E 64
        65 72 20 69 73 20
        25 58 20
   0B8B 00                 7940 	.db 0x00
   0B8C                    7941 __str_64:
   0B8C 2A 2A 2A 2A 2A 2A  7942 	.ascii "*********** I/O PORT PIN DIRECTION CHANGE **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 50 4F
        52 54 20 50 49 4E
        20 44 49 52 45 43
        54 49 4F 4E 20 43
        48 41 4E 47 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0BC0 0D                 7943 	.db 0x0D
   0BC1 0A                 7944 	.db 0x0A
   0BC2 00                 7945 	.db 0x00
   0BC3                    7946 __str_65:
   0BC3 2A 2A 2A 2A 2A 2A  7947 	.ascii "*********** I/O COUNTER RESET **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 43 4F
        55 4E 54 45 52 20
        52 45 53 45 54 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0BEB 0D                 7948 	.db 0x0D
   0BEC 0A                 7949 	.db 0x0A
   0BED 00                 7950 	.db 0x00
   0BEE                    7951 __str_66:
   0BEE 2A 2A 2A 2A 2A 2A  7952 	.ascii "*********** I/O DISPLAY DIRECTION STATUS **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 44 49
        53 50 4C 41 59 20
        44 49 52 45 43 54
        49 4F 4E 20 53 54
        41 54 55 53 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0C21 0D                 7953 	.db 0x0D
   0C22 0A                 7954 	.db 0x0A
   0C23 00                 7955 	.db 0x00
   0C24                    7956 __str_67:
   0C24 2A 2A 2A 2A 2A 2A  7957 	.ascii "*********** I/O DISPLAY DATA STATUS **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 44 49
        53 50 4C 41 59 20
        44 41 54 41 20 53
        54 41 54 55 53 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0C52 0D                 7958 	.db 0x0D
   0C53 0A                 7959 	.db 0x0A
   0C54 00                 7960 	.db 0x00
   0C55                    7961 __str_68:
   0C55 45 6E 74 65 72 20  7962 	.ascii "Enter a valid command"
        61 20 76 61 6C 69
        64 20 63 6F 6D 6D
        61 6E 64
   0C6A 0D                 7963 	.db 0x0D
   0C6B 0A                 7964 	.db 0x0A
   0C6C 00                 7965 	.db 0x00
   0C6D                    7966 __str_69:
   0C6D 0A                 7967 	.db 0x0A
   0C6E 0A                 7968 	.db 0x0A
   0C6F 0D                 7969 	.db 0x0D
   0C70 20 45 6E 74 65 72  7970 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF"
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
   0CA6 0D                 7971 	.db 0x0D
   0CA7 0A                 7972 	.db 0x0A
   0CA8 00                 7973 	.db 0x00
   0CA9                    7974 __str_70:
   0CA9 41 64 64 72 65 73  7975 	.ascii "Address Entered is: "
        73 20 45 6E 74 65
        72 65 64 20 69 73
        3A 20
   0CBD 00                 7976 	.db 0x00
   0CBE                    7977 __str_71:
   0CBE 0A                 7978 	.db 0x0A
   0CBF 0A                 7979 	.db 0x0A
   0CC0 0D                 7980 	.db 0x0D
   0CC1 20 2A 2D 45 52 52  7981 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0CCB 09                 7982 	.db 0x09
   0CCC 20 50 6C 65 61 73  7983 	.ascii " Please Enter valid Address between 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 61 6E
        64 20 37 46
   0CFA 46                 7984 	.ascii "F"
   0CFB 0D                 7985 	.db 0x0D
   0CFC 0A                 7986 	.db 0x0A
   0CFD 20                 7987 	.ascii " "
   0CFE 00                 7988 	.db 0x00
   0CFF                    7989 __str_72:
   0CFF 0A                 7990 	.db 0x0A
   0D00 0A                 7991 	.db 0x0A
   0D01 0D                 7992 	.db 0x0D
   0D02 20 45 6E 74 65 72  7993 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   0D34 00                 7994 	.db 0x00
   0D35                    7995 __str_73:
   0D35 44 61 74 61 20 45  7996 	.ascii "Data Entered is: "
        6E 74 65 72 65 64
        20 69 73 3A 20
   0D46 00                 7997 	.db 0x00
   0D47                    7998 __str_74:
   0D47 0A                 7999 	.db 0x0A
   0D48 0A                 8000 	.db 0x0A
   0D49 0D                 8001 	.db 0x0D
   0D4A 20 2A 2D 45 52 52  8002 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0D54 09                 8003 	.db 0x09
   0D55 20 50 6C 65 61 73  8004 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   0D83 65 74 77 65 65 6E  8005 	.ascii "etween 00 to FF"
        20 30 30 20 74 6F
        20 46 46
   0D92 0D                 8006 	.db 0x0D
   0D93 0A                 8007 	.db 0x0A
   0D94 00                 8008 	.db 0x00
   0D95                    8009 __str_75:
   0D95 54 68 65 20 62 79  8010 	.ascii "The byte in the specified address is %x"
        74 65 20 69 6E 20
        74 68 65 20 73 70
        65 63 69 66 69 65
        64 20 61 64 64 72
        65 73 73 20 69 73
        20 25 78
   0DBC 0D                 8011 	.db 0x0D
   0DBD 0A                 8012 	.db 0x0A
   0DBE 00                 8013 	.db 0x00
   0DBF                    8014 __str_76:
   0DBF 25 30 33 58 3A 20  8015 	.ascii "%03X: %02X"
        25 30 32 58
   0DC9 0D                 8016 	.db 0x0D
   0DCA 0A                 8017 	.db 0x0A
   0DCB 00                 8018 	.db 0x00
   0DCC                    8019 __str_77:
   0DCC 0A                 8020 	.db 0x0A
   0DCD 0A                 8021 	.db 0x0A
   0DCE 0D                 8022 	.db 0x0D
   0DCF 20 45 6E 74 65 72  8023 	.ascii " Enter start Address in Hex in HHH format between 000 to "
        20 73 74 61 72 74
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20
   0E08 37 46 46           8024 	.ascii "7FF"
   0E0B 0D                 8025 	.db 0x0D
   0E0C 0A                 8026 	.db 0x0A
   0E0D 00                 8027 	.db 0x00
   0E0E                    8028 __str_78:
   0E0E 0A                 8029 	.db 0x0A
   0E0F 0A                 8030 	.db 0x0A
   0E10 0D                 8031 	.db 0x0D
   0E11 20 45 6E 74 65 72  8032 	.ascii " Enter end Address in Hex in HHH format between 000 to 7F"
        20 65 6E 64 20 41
        64 64 72 65 73 73
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 48 20 66 6F 72
        6D 61 74 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 74 6F
        20 37 46
   0E4A 46                 8033 	.ascii "F"
   0E4B 0D                 8034 	.db 0x0D
   0E4C 0A                 8035 	.db 0x0A
   0E4D 00                 8036 	.db 0x00
   0E4E                    8037 __str_79:
   0E4E 0D                 8038 	.db 0x0D
   0E4F 0A                 8039 	.db 0x0A
   0E50 2A 2A 2A 2A 2A 2A  8040 	.ascii "************Sequential Read************"
        2A 2A 2A 2A 2A 2A
        53 65 71 75 65 6E
        74 69 61 6C 20 52
        65 61 64 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0E77 0D                 8041 	.db 0x0D
   0E78 0A                 8042 	.db 0x0A
   0E79 00                 8043 	.db 0x00
   0E7A                    8044 __str_80:
   0E7A 50 6C 65 61 73 65  8045 	.ascii "Please Enter a Higher End Address"
        20 45 6E 74 65 72
        20 61 20 48 69 67
        68 65 72 20 45 6E
        64 20 41 64 64 72
        65 73 73
   0E9B 0D                 8046 	.db 0x0D
   0E9C 0A                 8047 	.db 0x0A
   0E9D 00                 8048 	.db 0x00
   0E9E                    8049 __str_81:
   0E9E 0A                 8050 	.db 0x0A
   0E9F 0A                 8051 	.db 0x0A
   0EA0 0D                 8052 	.db 0x0D
   0EA1 09                 8053 	.db 0x09
   0EA2 20 53 65 6C 65 63  8054 	.ascii " Select Character code between 0 to 7: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 3A 20
   0EC9 09                 8055 	.db 0x09
   0ECA 00                 8056 	.db 0x00
   0ECB                    8057 __str_82:
   0ECB 0A                 8058 	.db 0x0A
   0ECC 0A                 8059 	.db 0x0A
   0ECD 0D                 8060 	.db 0x0D
   0ECE 20 2A 2D 45 52 52  8061 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0ED8 0A                 8062 	.db 0x0A
   0ED9 0D                 8063 	.db 0x0D
   0EDA 09                 8064 	.db 0x09
   0EDB 20 45 6E 74 65 72  8065 	.ascii " Enter a valid number between 0 to 7"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 37
   0EFF 00                 8066 	.db 0x00
   0F00                    8067 __str_83:
   0F00 0A                 8068 	.db 0x0A
   0F01 0A                 8069 	.db 0x0A
   0F02 0D                 8070 	.db 0x0D
   0F03 09                 8071 	.db 0x09
   0F04 20 45 6E 74 65 72  8072 	.ascii " Enter pixel map in HEX in HH format from 00 to 1F: "
        20 70 69 78 65 6C
        20 6D 61 70 20 69
        6E 20 48 45 58 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 66 72 6F 6D 20
        30 30 20 74 6F 20
        31 46 3A 20
   0F38 09                 8073 	.db 0x09
   0F39 00                 8074 	.db 0x00
   0F3A                    8075 __str_84:
   0F3A 0A                 8076 	.db 0x0A
   0F3B 0D                 8077 	.db 0x0D
   0F3C 09                 8078 	.db 0x09
   0F3D 20 44 61 74 61 20  8079 	.ascii " Data in row number %d: "
        69 6E 20 72 6F 77
        20 6E 75 6D 62 65
        72 20 25 64 3A 20
   0F55 09                 8080 	.db 0x09
   0F56 00                 8081 	.db 0x00
   0F57                    8082 __str_85:
   0F57 0A                 8083 	.db 0x0A
   0F58 0A                 8084 	.db 0x0A
   0F59 0D                 8085 	.db 0x0D
   0F5A 20 2A 2D 45 52 52  8086 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0F64 0A                 8087 	.db 0x0A
   0F65 0D                 8088 	.db 0x0D
   0F66 09                 8089 	.db 0x09
   0F67 20 45 6E 74 65 72  8090 	.ascii " Enter a valid HEX number between 00 to 1F i"
        20 61 20 76 61 6C
        69 64 20 48 45 58
        20 6E 75 6D 62 65
        72 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 31 46
        20 69
   0F93 6E 20 48 48 20 66  8091 	.ascii "n HH format:"
        6F 72 6D 61 74 3A
   0F9F 09                 8092 	.db 0x09
   0FA0 00                 8093 	.db 0x00
   0FA1                    8094 __str_86:
   0FA1 0A                 8095 	.db 0x0A
   0FA2 0D                 8096 	.db 0x0D
   0FA3 09                 8097 	.db 0x09
   0FA4 09                 8098 	.db 0x09
   0FA5 20 20 20 20 20 20  8099 	.ascii "      "
   0FAB 09                 8100 	.db 0x09
   0FAC 31 32 33 34 35     8101 	.ascii "12345"
   0FB1 00                 8102 	.db 0x00
   0FB2                    8103 __str_87:
   0FB2 0A                 8104 	.db 0x0A
   0FB3 0D                 8105 	.db 0x0D
   0FB4 09                 8106 	.db 0x09
   0FB5 09                 8107 	.db 0x09
   0FB6 52 4F 57 20 25 64  8108 	.ascii "ROW %d:"
        3A
   0FBD 09                 8109 	.db 0x09
   0FBE 00                 8110 	.db 0x00
   0FBF                    8111 __str_88:
   0FBF 25 63              8112 	.ascii "%c"
   0FC1 00                 8113 	.db 0x00
   0FC2                    8114 __str_89:
   0FC2 0A                 8115 	.db 0x0A
   0FC3 0A                 8116 	.db 0x0A
   0FC4 0D                 8117 	.db 0x0D
   0FC5 09                 8118 	.db 0x09
   0FC6 20 53 65 6C 65 63  8119 	.ascii " Select Character code between 0 to 7 to display: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 20 74 6F 20 64
        69 73 70 6C 61 79
        3A 20
   0FF8 09                 8120 	.db 0x09
   0FF9 00                 8121 	.db 0x00
   0FFA                    8122 __str_90:
   0FFA 50 25 64 20 70 69  8123 	.ascii "P%d pin is a input pin"
        6E 20 69 73 20 61
        20 69 6E 70 75 74
        20 70 69 6E
   1010 0D                 8124 	.db 0x0D
   1011 0A                 8125 	.db 0x0A
   1012 00                 8126 	.db 0x00
   1013                    8127 __str_91:
   1013 50 25 64 20 70 69  8128 	.ascii "P%d pin is a output pin"
        6E 20 69 73 20 61
        20 6F 75 74 70 75
        74 20 70 69 6E
   102A 0D                 8129 	.db 0x0D
   102B 0A                 8130 	.db 0x0A
   102C 00                 8131 	.db 0x00
   102D                    8132 __str_92:
   102D 44 61 74 61 20 61  8133 	.ascii "Data at Port Pin %d is %x"
        74 20 50 6F 72 74
        20 50 69 6E 20 25
        64 20 69 73 20 25
        78
   1046 0D                 8134 	.db 0x0D
   1047 0A                 8135 	.db 0x0A
   1048 00                 8136 	.db 0x00
   1049                    8137 __str_93:
   1049 45 6E 74 65 72 20  8138 	.ascii "Enter the string you want to search"
        74 68 65 20 73 74
        72 69 6E 67 20 79
        6F 75 20 77 61 6E
        74 20 74 6F 20 73
        65 61 72 63 68
   106C 00                 8139 	.db 0x00
   106D                    8140 __str_94:
   106D 54 68 65 20 73 74  8141 	.ascii "The string you want to search is: "
        72 69 6E 67 20 79
        6F 75 20 77 61 6E
        74 20 74 6F 20 73
        65 61 72 63 68 20
        69 73 3A 20
   108F 00                 8142 	.db 0x00
   1090                    8143 __str_95:
   1090 4C 65 6E 67 74 68  8144 	.ascii "Length of the string to search is %d"
        20 6F 66 20 74 68
        65 20 73 74 72 69
        6E 67 20 74 6F 20
        73 65 61 72 63 68
        20 69 73 20 25 64
   10B4 0D                 8145 	.db 0x0D
   10B5 0A                 8146 	.db 0x0A
   10B6 00                 8147 	.db 0x00
   10B7                    8148 __str_96:
   10B7 49 6E 20 63 6F 75  8149 	.ascii "In count search"
        6E 74 20 73 65 61
        72 63 68
   10C6 0D                 8150 	.db 0x0D
   10C7 0A                 8151 	.db 0x0A
   10C8 00                 8152 	.db 0x00
   10C9                    8153 __str_97:
   10C9 2A 2A 2A 2A 2A 2A  8154 	.ascii "********************************Search is finished**********"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 53 65 61 72
        63 68 20 69 73 20
        66 69 6E 69 73 68
        65 64 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   1105 2A 2A 2A 2A 2A 2A  8155 	.ascii "*******************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   1118 0D                 8156 	.db 0x0D
   1119 0A                 8157 	.db 0x0A
   111A 00                 8158 	.db 0x00
   111B                    8159 __str_98:
   111B 52 65 61 64 20 63  8160 	.ascii "Read character"
        68 61 72 61 63 74
        65 72
   1129 00                 8161 	.db 0x00
   112A                    8162 __str_99:
   112A 54 65 6D 70 20 73  8163 	.ascii "Temp search add is %x"
        65 61 72 63 68 20
        61 64 64 20 69 73
        20 25 78
   113F 0D                 8164 	.db 0x0D
   1140 0A                 8165 	.db 0x0A
   1141 00                 8166 	.db 0x00
   1142                    8167 __str_100:
   1142 56 61 6C 75 65 20  8168 	.ascii "Value of counti is %d"
        6F 66 20 63 6F 75
        6E 74 69 20 69 73
        20 25 64
   1157 0D                 8169 	.db 0x0D
   1158 0A                 8170 	.db 0x0A
   1159 00                 8171 	.db 0x00
   115A                    8172 __str_101:
   115A 41 64 64 72 65 73  8173 	.ascii "Address captured is %x"
        73 20 63 61 70 74
        75 72 65 64 20 69
        73 20 25 78
   1170 0D                 8174 	.db 0x0D
   1171 0A                 8175 	.db 0x0A
   1172 00                 8176 	.db 0x00
   1173                    8177 __str_102:
   1173 41 64 64 72 65 73  8178 	.ascii "Address captured is %d"
        73 20 63 61 70 74
        75 72 65 64 20 69
        73 20 25 64
   1189 0D                 8179 	.db 0x0D
   118A 0A                 8180 	.db 0x0A
   118B 00                 8181 	.db 0x00
   118C                    8182 __str_103:
   118C 74 65 6D 70 20 41  8183 	.ascii "temp Address captured is %x"
        64 64 72 65 73 73
        20 63 61 70 74 75
        72 65 64 20 69 73
        20 25 78
   11A7 0D                 8184 	.db 0x0D
   11A8 0A                 8185 	.db 0x0A
   11A9 00                 8186 	.db 0x00
   11AA                    8187 __str_104:
   11AA 4D 41 54 43 48 45  8188 	.ascii "MATCHED"
        44
   11B1 0D                 8189 	.db 0x0D
   11B2 0A                 8190 	.db 0x0A
   11B3 00                 8191 	.db 0x00
   11B4                    8192 __str_105:
   11B4 2A 2A 2A 2A 2A 2A  8193 	.ascii "******************************************Found the text****"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        46 6F 75 6E 64 20
        74 68 65 20 74 65
        78 74 2A 2A 2A 2A
   11F0 2A 2A 2A 2A 2A 2A  8194 	.ascii "****************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   120C 0D                 8195 	.db 0x0D
   120D 0A                 8196 	.db 0x0A
   120E 00                 8197 	.db 0x00
   120F                    8198 __str_106:
   120F 2A 2A 2A 2A 2A 2A  8199 	.ascii "******************************************Address of the str"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        41 64 64 72 65 73
        73 20 6F 66 20 74
        68 65 20 73 74 72
   124B 69 6E 67 20 69 73  8200 	.ascii "ing is: %02X********************************"
        3A 20 25 30 32 58
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   1277 0D                 8201 	.db 0x0D
   1278 0A                 8202 	.db 0x0A
   1279 00                 8203 	.db 0x00
   127A                    8204 __str_107:
   127A 2A 2A 2A 2A 2A 2A  8205 	.ascii "**************************************Search count is %d****"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 53 65 61 72
        63 68 20 63 6F 75
        6E 74 20 69 73 20
        25 64 2A 2A 2A 2A
   12B6 2A 2A 2A 2A 2A 2A  8206 	.ascii "**********************88"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 38 38
   12CE 0D                 8207 	.db 0x0D
   12CF 0A                 8208 	.db 0x0A
   12D0 00                 8209 	.db 0x00
   12D1                    8210 __str_108:
   12D1 4E 75 6D 62 65 72  8211 	.ascii "Number of times interrupt is %d"
        20 6F 66 20 74 69
        6D 65 73 20 69 6E
        74 65 72 72 75 70
        74 20 69 73 20 25
        64
   12F0 0D                 8212 	.db 0x0D
   12F1 0A                 8213 	.db 0x0A
   12F2 00                 8214 	.db 0x00
   12F3                    8215 __str_109:
   12F3 6C 6F 61 64 20 76  8216 	.ascii "load value is %x"
        61 6C 75 65 20 69
        73 20 25 78
   1303 0D                 8217 	.db 0x0D
   1304 0A                 8218 	.db 0x0A
   1305 00                 8219 	.db 0x00
   1306                    8220 __str_110:
   1306 74 69 6D 65 20 76  8221 	.ascii "time value is us is %d"
        61 6C 75 65 20 69
        73 20 75 73 20 69
        73 20 25 64
   131C 0D                 8222 	.db 0x0D
   131D 0A                 8223 	.db 0x0A
   131E 00                 8224 	.db 0x00
   131F                    8225 __str_111:
   131F 2A 2A 2A 2A 2A 2A  8226 	.ascii "*******************************total time value is ms is %dm"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 74 6F 74 61 6C
        20 74 69 6D 65 20
        76 61 6C 75 65 20
        69 73 20 6D 73 20
        69 73 20 25 64 6D
   135B 73 2A 2A 2A 2A 2A  8227 	.ascii "s******************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   137A 0D                 8228 	.db 0x0D
   137B 0A                 8229 	.db 0x0A
   137C 00                 8230 	.db 0x00
   137D                    8231 __str_112:
   137D 2A 2A 2A 2A 2A 2A  8232 	.ascii "*******************************total time value is s is %ds*"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 74 6F 74 61 6C
        20 74 69 6D 65 20
        76 61 6C 75 65 20
        69 73 20 73 20 69
        73 20 25 64 73 2A
   13B9 2A 2A 2A 2A 2A 2A  8233 	.ascii "*********************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   13DA 0D                 8234 	.db 0x0D
   13DB 0A                 8235 	.db 0x0A
   13DC 00                 8236 	.db 0x00
   13DD                    8237 __str_113:
   13DD 30 31 32           8238 	.ascii "012"
   13E0 00                 8239 	.db 0x00
   13E1                    8240 __str_114:
   13E1 45 4D 42 45 44 44  8241 	.ascii "EMBEDDED SYSTEM DESIGN LAB 4 REQUIRED ELEMENTS"
        45 44 20 53 59 53
        54 45 4D 20 44 45
        53 49 47 4E 20 4C
        41 42 20 34 20 52
        45 51 55 49 52 45
        44 20 45 4C 45 4D
        45 4E 54 53
   140F 00                 8242 	.db 0x00
                           8243 	.area XINIT   (CODE)
   0000                    8244 __xinit__name:
   0000 30 31 32           8245 	.ascii "012"
   0003                    8246 __xinit__str:
   0003 45 4D 42 45 44 44  8247 	.ascii "EMBEDDED SYSTEM DESIGN LAB 4 REQUIRED ELEMENTS"
        45 44 20 53 59 53
        54 45 4D 20 44 45
        53 49 47 4E 20 4C
        41 42 20 34 20 52
        45 51 55 49 52 45
        44 20 45 4C 45 4D
        45 4E 54 53
   0031 00                 8248 	.db 0x00
   0032 00                 8249 	.db 0x00
   0033 00                 8250 	.db 0x00
   0034 00                 8251 	.db 0x00
   0035                    8252 __xinit__time:
   0035 00                 8253 	.db #0x00
   0036                    8254 __xinit__timers:
   0036 00 00              8255 	.byte #0x00,#0x00
   0038                    8256 __xinit__io_counter:
   0038 00 00              8257 	.byte #0x00,#0x00
