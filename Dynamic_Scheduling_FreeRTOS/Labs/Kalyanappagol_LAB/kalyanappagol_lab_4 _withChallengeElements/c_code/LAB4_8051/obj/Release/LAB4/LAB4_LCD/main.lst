                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Mon Apr 24 20:04:32 2017
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _string_search
                             13 	.globl _timer2_isr
                             14 	.globl _external_isr
                             15 	.globl _timer_isr
                             16 	.globl _lcd_displaycustom
                             17 	.globl _lcdcreate_custom
                             18 	.globl _main
                             19 	.globl __sdcc_external_startup
                             20 	.globl _TF1
                             21 	.globl _TR1
                             22 	.globl _TF0
                             23 	.globl _TR0
                             24 	.globl _IE1
                             25 	.globl _IT1
                             26 	.globl _IE0
                             27 	.globl _IT0
                             28 	.globl _SM0
                             29 	.globl _SM1
                             30 	.globl _SM2
                             31 	.globl _REN
                             32 	.globl _TB8
                             33 	.globl _RB8
                             34 	.globl _TI
                             35 	.globl _RI
                             36 	.globl _CY
                             37 	.globl _AC
                             38 	.globl _F0
                             39 	.globl _RS1
                             40 	.globl _RS0
                             41 	.globl _OV
                             42 	.globl _F1
                             43 	.globl _P
                             44 	.globl _RD
                             45 	.globl _WR
                             46 	.globl _T1
                             47 	.globl _T0
                             48 	.globl _INT1
                             49 	.globl _INT0
                             50 	.globl _TXD0
                             51 	.globl _TXD
                             52 	.globl _RXD0
                             53 	.globl _RXD
                             54 	.globl _P3_7
                             55 	.globl _P3_6
                             56 	.globl _P3_5
                             57 	.globl _P3_4
                             58 	.globl _P3_3
                             59 	.globl _P3_2
                             60 	.globl _P3_1
                             61 	.globl _P3_0
                             62 	.globl _P2_7
                             63 	.globl _P2_6
                             64 	.globl _P2_5
                             65 	.globl _P2_4
                             66 	.globl _P2_3
                             67 	.globl _P2_2
                             68 	.globl _P2_1
                             69 	.globl _P2_0
                             70 	.globl _P1_7
                             71 	.globl _P1_6
                             72 	.globl _P1_5
                             73 	.globl _P1_4
                             74 	.globl _P1_3
                             75 	.globl _P1_2
                             76 	.globl _P1_1
                             77 	.globl _P1_0
                             78 	.globl _P0_7
                             79 	.globl _P0_6
                             80 	.globl _P0_5
                             81 	.globl _P0_4
                             82 	.globl _P0_3
                             83 	.globl _P0_2
                             84 	.globl _P0_1
                             85 	.globl _P0_0
                             86 	.globl _PS
                             87 	.globl _PT1
                             88 	.globl _PX1
                             89 	.globl _PT0
                             90 	.globl _PX0
                             91 	.globl _EA
                             92 	.globl _ES
                             93 	.globl _ET1
                             94 	.globl _EX1
                             95 	.globl _ET0
                             96 	.globl _EX0
                             97 	.globl _BREG_F7
                             98 	.globl _BREG_F6
                             99 	.globl _BREG_F5
                            100 	.globl _BREG_F4
                            101 	.globl _BREG_F3
                            102 	.globl _BREG_F2
                            103 	.globl _BREG_F1
                            104 	.globl _BREG_F0
                            105 	.globl _P5_7
                            106 	.globl _P5_6
                            107 	.globl _P5_5
                            108 	.globl _P5_4
                            109 	.globl _P5_3
                            110 	.globl _P5_2
                            111 	.globl _P5_1
                            112 	.globl _P5_0
                            113 	.globl _P4_7
                            114 	.globl _P4_6
                            115 	.globl _P4_5
                            116 	.globl _P4_4
                            117 	.globl _P4_3
                            118 	.globl _P4_2
                            119 	.globl _P4_1
                            120 	.globl _P4_0
                            121 	.globl _PX0L
                            122 	.globl _PT0L
                            123 	.globl _PX1L
                            124 	.globl _PT1L
                            125 	.globl _PLS
                            126 	.globl _PT2L
                            127 	.globl _PPCL
                            128 	.globl _EC
                            129 	.globl _CCF0
                            130 	.globl _CCF1
                            131 	.globl _CCF2
                            132 	.globl _CCF3
                            133 	.globl _CCF4
                            134 	.globl _CR
                            135 	.globl _CF
                            136 	.globl _TF2
                            137 	.globl _EXF2
                            138 	.globl _RCLK
                            139 	.globl _TCLK
                            140 	.globl _EXEN2
                            141 	.globl _TR2
                            142 	.globl _C_T2
                            143 	.globl _CP_RL2
                            144 	.globl _T2CON_7
                            145 	.globl _T2CON_6
                            146 	.globl _T2CON_5
                            147 	.globl _T2CON_4
                            148 	.globl _T2CON_3
                            149 	.globl _T2CON_2
                            150 	.globl _T2CON_1
                            151 	.globl _T2CON_0
                            152 	.globl _PT2
                            153 	.globl _ET2
                            154 	.globl _TMOD
                            155 	.globl _TL1
                            156 	.globl _TL0
                            157 	.globl _TH1
                            158 	.globl _TH0
                            159 	.globl _TCON
                            160 	.globl _SP
                            161 	.globl _SCON
                            162 	.globl _SBUF0
                            163 	.globl _SBUF
                            164 	.globl _PSW
                            165 	.globl _PCON
                            166 	.globl _P3
                            167 	.globl _P2
                            168 	.globl _P1
                            169 	.globl _P0
                            170 	.globl _IP
                            171 	.globl _IE
                            172 	.globl _DP0L
                            173 	.globl _DPL
                            174 	.globl _DP0H
                            175 	.globl _DPH
                            176 	.globl _B
                            177 	.globl _ACC
                            178 	.globl _EECON
                            179 	.globl _KBF
                            180 	.globl _KBE
                            181 	.globl _KBLS
                            182 	.globl _BRL
                            183 	.globl _BDRCON
                            184 	.globl _T2MOD
                            185 	.globl _SPDAT
                            186 	.globl _SPSTA
                            187 	.globl _SPCON
                            188 	.globl _SADEN
                            189 	.globl _SADDR
                            190 	.globl _WDTPRG
                            191 	.globl _WDTRST
                            192 	.globl _P5
                            193 	.globl _P4
                            194 	.globl _IPH1
                            195 	.globl _IPL1
                            196 	.globl _IPH0
                            197 	.globl _IPL0
                            198 	.globl _IEN1
                            199 	.globl _IEN0
                            200 	.globl _CMOD
                            201 	.globl _CL
                            202 	.globl _CH
                            203 	.globl _CCON
                            204 	.globl _CCAPM4
                            205 	.globl _CCAPM3
                            206 	.globl _CCAPM2
                            207 	.globl _CCAPM1
                            208 	.globl _CCAPM0
                            209 	.globl _CCAP4L
                            210 	.globl _CCAP3L
                            211 	.globl _CCAP2L
                            212 	.globl _CCAP1L
                            213 	.globl _CCAP0L
                            214 	.globl _CCAP4H
                            215 	.globl _CCAP3H
                            216 	.globl _CCAP2H
                            217 	.globl _CCAP1H
                            218 	.globl _CCAP0H
                            219 	.globl _CKCKON1
                            220 	.globl _CKCKON0
                            221 	.globl _CKRL
                            222 	.globl _AUXR1
                            223 	.globl _AUXR
                            224 	.globl _TH2
                            225 	.globl _TL2
                            226 	.globl _RCAP2H
                            227 	.globl _RCAP2L
                            228 	.globl _T2CON
                            229 	.globl _io_counter
                            230 	.globl _timers
                            231 	.globl _time
                            232 	.globl _str
                            233 	.globl _name
                            234 	.globl _time_value
                            235 	.globl _t2flag
                            236 	.globl _pinstatus
                            237 	.globl _nmi
                            238 	.globl _nsec
                            239 	.globl _nms
                            240 	.globl _disp
                            241 	.globl _ccode
                            242 	.globl _row_val
                            243 	.globl _dataread
                            244 	.globl _iow_status
                            245 	.globl _initialstatus
                            246 	.globl _cursor_position
                            247 	.globl _dir1
                            248 	.globl _pin1
                            249 	.globl _iord
                            250 	.globl _icmd
                            251 	.globl _ccmd
                            252 	.globl _lcmd
                            253 	.globl _ecmd
                            254 	.globl _cmd
                            255 	.globl _seq_data
                            256 	.globl _templcdread
                            257 	.globl _num
                            258 	.globl _lcdcount
                            259 	.globl _tflag
                            260 	.globl _dir1_int
                            261 	.globl _pin1_int
                            262 	.globl _iodatastore_int
                            263 	.globl _flag3
                            264 	.globl _flag2
                            265 	.globl _flag1
                            266 	.globl _flag
                            267 	.globl _bytelen
                            268 	.globl _bytesize
                            269 	.globl _endadd_int
                            270 	.globl _startadd_int
                            271 	.globl _datastore_int
                            272 	.globl _wordadd_int
                            273 	.globl _b
                            274 	.globl _d
                            275 	.globl _c
                            276 	.globl _store
                            277 	.globl _cnt
                            278 	.globl _io_datastore
                            279 	.globl _rd
                            280 	.globl _end_address
                            281 	.globl _start_address
                            282 	.globl _datastore
                            283 	.globl _wordaddress
                            284 	.globl _mi
                            285 	.globl _sec
                            286 	.globl _ms
                            287 	.globl _ewrite
                            288 	.globl _eread
                            289 	.globl _eseqread
                            290 	.globl _statusreport
                            291 	.globl _displaystatus
                            292 	.globl _displaydata
                            293 	.globl _searchtimer_init
                            294 ;--------------------------------------------------------
                            295 ; special function registers
                            296 ;--------------------------------------------------------
                            297 	.area RSEG    (DATA)
                    00C8    298 _T2CON	=	0x00c8
                    00CA    299 _RCAP2L	=	0x00ca
                    00CB    300 _RCAP2H	=	0x00cb
                    00CC    301 _TL2	=	0x00cc
                    00CD    302 _TH2	=	0x00cd
                    008E    303 _AUXR	=	0x008e
                    00A2    304 _AUXR1	=	0x00a2
                    0097    305 _CKRL	=	0x0097
                    008F    306 _CKCKON0	=	0x008f
                    008F    307 _CKCKON1	=	0x008f
                    00FA    308 _CCAP0H	=	0x00fa
                    00FB    309 _CCAP1H	=	0x00fb
                    00FC    310 _CCAP2H	=	0x00fc
                    00FD    311 _CCAP3H	=	0x00fd
                    00FE    312 _CCAP4H	=	0x00fe
                    00EA    313 _CCAP0L	=	0x00ea
                    00EB    314 _CCAP1L	=	0x00eb
                    00EC    315 _CCAP2L	=	0x00ec
                    00ED    316 _CCAP3L	=	0x00ed
                    00EE    317 _CCAP4L	=	0x00ee
                    00DA    318 _CCAPM0	=	0x00da
                    00DB    319 _CCAPM1	=	0x00db
                    00DC    320 _CCAPM2	=	0x00dc
                    00DD    321 _CCAPM3	=	0x00dd
                    00DE    322 _CCAPM4	=	0x00de
                    00D8    323 _CCON	=	0x00d8
                    00F9    324 _CH	=	0x00f9
                    00E9    325 _CL	=	0x00e9
                    00D9    326 _CMOD	=	0x00d9
                    00A8    327 _IEN0	=	0x00a8
                    00B1    328 _IEN1	=	0x00b1
                    00B8    329 _IPL0	=	0x00b8
                    00B7    330 _IPH0	=	0x00b7
                    00B2    331 _IPL1	=	0x00b2
                    00B3    332 _IPH1	=	0x00b3
                    00C0    333 _P4	=	0x00c0
                    00D8    334 _P5	=	0x00d8
                    00A6    335 _WDTRST	=	0x00a6
                    00A7    336 _WDTPRG	=	0x00a7
                    00A9    337 _SADDR	=	0x00a9
                    00B9    338 _SADEN	=	0x00b9
                    00C3    339 _SPCON	=	0x00c3
                    00C4    340 _SPSTA	=	0x00c4
                    00C5    341 _SPDAT	=	0x00c5
                    00C9    342 _T2MOD	=	0x00c9
                    009B    343 _BDRCON	=	0x009b
                    009A    344 _BRL	=	0x009a
                    009C    345 _KBLS	=	0x009c
                    009D    346 _KBE	=	0x009d
                    009E    347 _KBF	=	0x009e
                    00D2    348 _EECON	=	0x00d2
                    00E0    349 _ACC	=	0x00e0
                    00F0    350 _B	=	0x00f0
                    0083    351 _DPH	=	0x0083
                    0083    352 _DP0H	=	0x0083
                    0082    353 _DPL	=	0x0082
                    0082    354 _DP0L	=	0x0082
                    00A8    355 _IE	=	0x00a8
                    00B8    356 _IP	=	0x00b8
                    0080    357 _P0	=	0x0080
                    0090    358 _P1	=	0x0090
                    00A0    359 _P2	=	0x00a0
                    00B0    360 _P3	=	0x00b0
                    0087    361 _PCON	=	0x0087
                    00D0    362 _PSW	=	0x00d0
                    0099    363 _SBUF	=	0x0099
                    0099    364 _SBUF0	=	0x0099
                    0098    365 _SCON	=	0x0098
                    0081    366 _SP	=	0x0081
                    0088    367 _TCON	=	0x0088
                    008C    368 _TH0	=	0x008c
                    008D    369 _TH1	=	0x008d
                    008A    370 _TL0	=	0x008a
                    008B    371 _TL1	=	0x008b
                    0089    372 _TMOD	=	0x0089
                            373 ;--------------------------------------------------------
                            374 ; special function bits
                            375 ;--------------------------------------------------------
                            376 	.area RSEG    (DATA)
                    00AD    377 _ET2	=	0x00ad
                    00BD    378 _PT2	=	0x00bd
                    00C8    379 _T2CON_0	=	0x00c8
                    00C9    380 _T2CON_1	=	0x00c9
                    00CA    381 _T2CON_2	=	0x00ca
                    00CB    382 _T2CON_3	=	0x00cb
                    00CC    383 _T2CON_4	=	0x00cc
                    00CD    384 _T2CON_5	=	0x00cd
                    00CE    385 _T2CON_6	=	0x00ce
                    00CF    386 _T2CON_7	=	0x00cf
                    00C8    387 _CP_RL2	=	0x00c8
                    00C9    388 _C_T2	=	0x00c9
                    00CA    389 _TR2	=	0x00ca
                    00CB    390 _EXEN2	=	0x00cb
                    00CC    391 _TCLK	=	0x00cc
                    00CD    392 _RCLK	=	0x00cd
                    00CE    393 _EXF2	=	0x00ce
                    00CF    394 _TF2	=	0x00cf
                    00DF    395 _CF	=	0x00df
                    00DE    396 _CR	=	0x00de
                    00DC    397 _CCF4	=	0x00dc
                    00DB    398 _CCF3	=	0x00db
                    00DA    399 _CCF2	=	0x00da
                    00D9    400 _CCF1	=	0x00d9
                    00D8    401 _CCF0	=	0x00d8
                    00AE    402 _EC	=	0x00ae
                    00BE    403 _PPCL	=	0x00be
                    00BD    404 _PT2L	=	0x00bd
                    00BC    405 _PLS	=	0x00bc
                    00BB    406 _PT1L	=	0x00bb
                    00BA    407 _PX1L	=	0x00ba
                    00B9    408 _PT0L	=	0x00b9
                    00B8    409 _PX0L	=	0x00b8
                    00C0    410 _P4_0	=	0x00c0
                    00C1    411 _P4_1	=	0x00c1
                    00C2    412 _P4_2	=	0x00c2
                    00C3    413 _P4_3	=	0x00c3
                    00C4    414 _P4_4	=	0x00c4
                    00C5    415 _P4_5	=	0x00c5
                    00C6    416 _P4_6	=	0x00c6
                    00C7    417 _P4_7	=	0x00c7
                    00D8    418 _P5_0	=	0x00d8
                    00D9    419 _P5_1	=	0x00d9
                    00DA    420 _P5_2	=	0x00da
                    00DB    421 _P5_3	=	0x00db
                    00DC    422 _P5_4	=	0x00dc
                    00DD    423 _P5_5	=	0x00dd
                    00DE    424 _P5_6	=	0x00de
                    00DF    425 _P5_7	=	0x00df
                    00F0    426 _BREG_F0	=	0x00f0
                    00F1    427 _BREG_F1	=	0x00f1
                    00F2    428 _BREG_F2	=	0x00f2
                    00F3    429 _BREG_F3	=	0x00f3
                    00F4    430 _BREG_F4	=	0x00f4
                    00F5    431 _BREG_F5	=	0x00f5
                    00F6    432 _BREG_F6	=	0x00f6
                    00F7    433 _BREG_F7	=	0x00f7
                    00A8    434 _EX0	=	0x00a8
                    00A9    435 _ET0	=	0x00a9
                    00AA    436 _EX1	=	0x00aa
                    00AB    437 _ET1	=	0x00ab
                    00AC    438 _ES	=	0x00ac
                    00AF    439 _EA	=	0x00af
                    00B8    440 _PX0	=	0x00b8
                    00B9    441 _PT0	=	0x00b9
                    00BA    442 _PX1	=	0x00ba
                    00BB    443 _PT1	=	0x00bb
                    00BC    444 _PS	=	0x00bc
                    0080    445 _P0_0	=	0x0080
                    0081    446 _P0_1	=	0x0081
                    0082    447 _P0_2	=	0x0082
                    0083    448 _P0_3	=	0x0083
                    0084    449 _P0_4	=	0x0084
                    0085    450 _P0_5	=	0x0085
                    0086    451 _P0_6	=	0x0086
                    0087    452 _P0_7	=	0x0087
                    0090    453 _P1_0	=	0x0090
                    0091    454 _P1_1	=	0x0091
                    0092    455 _P1_2	=	0x0092
                    0093    456 _P1_3	=	0x0093
                    0094    457 _P1_4	=	0x0094
                    0095    458 _P1_5	=	0x0095
                    0096    459 _P1_6	=	0x0096
                    0097    460 _P1_7	=	0x0097
                    00A0    461 _P2_0	=	0x00a0
                    00A1    462 _P2_1	=	0x00a1
                    00A2    463 _P2_2	=	0x00a2
                    00A3    464 _P2_3	=	0x00a3
                    00A4    465 _P2_4	=	0x00a4
                    00A5    466 _P2_5	=	0x00a5
                    00A6    467 _P2_6	=	0x00a6
                    00A7    468 _P2_7	=	0x00a7
                    00B0    469 _P3_0	=	0x00b0
                    00B1    470 _P3_1	=	0x00b1
                    00B2    471 _P3_2	=	0x00b2
                    00B3    472 _P3_3	=	0x00b3
                    00B4    473 _P3_4	=	0x00b4
                    00B5    474 _P3_5	=	0x00b5
                    00B6    475 _P3_6	=	0x00b6
                    00B7    476 _P3_7	=	0x00b7
                    00B0    477 _RXD	=	0x00b0
                    00B0    478 _RXD0	=	0x00b0
                    00B1    479 _TXD	=	0x00b1
                    00B1    480 _TXD0	=	0x00b1
                    00B2    481 _INT0	=	0x00b2
                    00B3    482 _INT1	=	0x00b3
                    00B4    483 _T0	=	0x00b4
                    00B5    484 _T1	=	0x00b5
                    00B6    485 _WR	=	0x00b6
                    00B7    486 _RD	=	0x00b7
                    00D0    487 _P	=	0x00d0
                    00D1    488 _F1	=	0x00d1
                    00D2    489 _OV	=	0x00d2
                    00D3    490 _RS0	=	0x00d3
                    00D4    491 _RS1	=	0x00d4
                    00D5    492 _F0	=	0x00d5
                    00D6    493 _AC	=	0x00d6
                    00D7    494 _CY	=	0x00d7
                    0098    495 _RI	=	0x0098
                    0099    496 _TI	=	0x0099
                    009A    497 _RB8	=	0x009a
                    009B    498 _TB8	=	0x009b
                    009C    499 _REN	=	0x009c
                    009D    500 _SM2	=	0x009d
                    009E    501 _SM1	=	0x009e
                    009F    502 _SM0	=	0x009f
                    0088    503 _IT0	=	0x0088
                    0089    504 _IE0	=	0x0089
                    008A    505 _IT1	=	0x008a
                    008B    506 _IE1	=	0x008b
                    008C    507 _TR0	=	0x008c
                    008D    508 _TF0	=	0x008d
                    008E    509 _TR1	=	0x008e
                    008F    510 _TF1	=	0x008f
                            511 ;--------------------------------------------------------
                            512 ; overlayable register banks
                            513 ;--------------------------------------------------------
                            514 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     515 	.ds 8
                            516 ;--------------------------------------------------------
                            517 ; internal ram data
                            518 ;--------------------------------------------------------
                            519 	.area DSEG    (DATA)
   0000                     520 _string_search_sloc0_1_0:
   0000                     521 	.ds 2
   0002                     522 _string_search_sloc1_1_0:
   0002                     523 	.ds 2
   0004                     524 _string_search_sloc2_1_0:
   0004                     525 	.ds 2
   0006                     526 _string_search_sloc3_1_0:
   0006                     527 	.ds 3
   0009                     528 _string_search_sloc4_1_0:
   0009                     529 	.ds 1
   000A                     530 _string_search_sloc5_1_0:
   000A                     531 	.ds 2
                            532 ;--------------------------------------------------------
                            533 ; overlayable items in internal ram 
                            534 ;--------------------------------------------------------
                            535 	.area OSEG    (OVR,DATA)
                            536 ;--------------------------------------------------------
                            537 ; Stack segment in internal ram 
                            538 ;--------------------------------------------------------
                            539 	.area	SSEG	(DATA)
   0000                     540 __start__stack:
   0000                     541 	.ds	1
                            542 
                            543 ;--------------------------------------------------------
                            544 ; indirectly addressable internal ram data
                            545 ;--------------------------------------------------------
                            546 	.area ISEG    (DATA)
                            547 ;--------------------------------------------------------
                            548 ; bit data
                            549 ;--------------------------------------------------------
                            550 	.area BSEG    (BIT)
                            551 ;--------------------------------------------------------
                            552 ; paged external ram data
                            553 ;--------------------------------------------------------
                            554 	.area PSEG    (PAG,XDATA)
                            555 ;--------------------------------------------------------
                            556 ; external ram data
                            557 ;--------------------------------------------------------
                            558 	.area XSEG    (XDATA)
   0000                     559 _ms::
   0000                     560 	.ds 1
   0001                     561 _sec::
   0001                     562 	.ds 1
   0002                     563 _mi::
   0002                     564 	.ds 1
   0003                     565 _wordaddress::
   0003                     566 	.ds 3
   0006                     567 _datastore::
   0006                     568 	.ds 3
   0009                     569 _start_address::
   0009                     570 	.ds 3
   000C                     571 _end_address::
   000C                     572 	.ds 3
   000F                     573 _rd::
   000F                     574 	.ds 1
   0010                     575 _io_datastore::
   0010                     576 	.ds 3
   0013                     577 _cnt::
   0013                     578 	.ds 3
   0016                     579 _store::
   0016                     580 	.ds 1
   0017                     581 _c::
   0017                     582 	.ds 4
   001B                     583 _d::
   001B                     584 	.ds 5
   0020                     585 _b::
   0020                     586 	.ds 5
   0025                     587 _wordadd_int::
   0025                     588 	.ds 2
   0027                     589 _datastore_int::
   0027                     590 	.ds 2
   0029                     591 _startadd_int::
   0029                     592 	.ds 2
   002B                     593 _endadd_int::
   002B                     594 	.ds 2
   002D                     595 _bytesize::
   002D                     596 	.ds 2
   002F                     597 _bytelen::
   002F                     598 	.ds 2
   0031                     599 _flag::
   0031                     600 	.ds 2
   0033                     601 _flag1::
   0033                     602 	.ds 2
   0035                     603 _flag2::
   0035                     604 	.ds 2
   0037                     605 _flag3::
   0037                     606 	.ds 2
   0039                     607 _iodatastore_int::
   0039                     608 	.ds 2
   003B                     609 _pin1_int::
   003B                     610 	.ds 2
   003D                     611 _dir1_int::
   003D                     612 	.ds 2
   003F                     613 _tflag::
   003F                     614 	.ds 2
   0041                     615 _lcdcount::
   0041                     616 	.ds 2
   0043                     617 _num::
   0043                     618 	.ds 2
   0045                     619 _templcdread::
   0045                     620 	.ds 2
   0047                     621 _seq_data::
   0047                     622 	.ds 10
   0051                     623 _cmd::
   0051                     624 	.ds 1
   0052                     625 _ecmd::
   0052                     626 	.ds 1
   0053                     627 _lcmd::
   0053                     628 	.ds 1
   0054                     629 _ccmd::
   0054                     630 	.ds 1
   0055                     631 _icmd::
   0055                     632 	.ds 1
   0056                     633 _iord::
   0056                     634 	.ds 1
   0057                     635 _pin1::
   0057                     636 	.ds 3
   005A                     637 _dir1::
   005A                     638 	.ds 3
   005D                     639 _cursor_position::
   005D                     640 	.ds 1
   005E                     641 _initialstatus::
   005E                     642 	.ds 1
   005F                     643 _iow_status::
   005F                     644 	.ds 1
   0060                     645 _dataread::
   0060                     646 	.ds 1
   0061                     647 _row_val::
   0061                     648 	.ds 8
   0069                     649 _ccode::
   0069                     650 	.ds 1
   006A                     651 _disp::
   006A                     652 	.ds 8
   0072                     653 _nms::
   0072                     654 	.ds 6
   0078                     655 _nsec::
   0078                     656 	.ds 6
   007E                     657 _nmi::
   007E                     658 	.ds 6
   0084                     659 _pinstatus::
   0084                     660 	.ds 9
   008D                     661 _t2flag::
   008D                     662 	.ds 2
   008F                     663 _time_value::
   008F                     664 	.ds 2
   0091                     665 _statusreport_status_1_1:
   0091                     666 	.ds 1
   0092                     667 _string_search_str_temp_1_1:
   0092                     668 	.ds 3
   0095                     669 _string_search_tempadd_1_1:
   0095                     670 	.ds 50
   00C7                     671 _string_search_permadd_1_1:
   00C7                     672 	.ds 50
   00F9                     673 _string_search_searchadd_1_1:
   00F9                     674 	.ds 1
   00FA                     675 _string_search_r_1_1:
   00FA                     676 	.ds 2
   00FC                     677 _string_search_i_1_1:
   00FC                     678 	.ds 2
                            679 ;--------------------------------------------------------
                            680 ; external initialized ram data
                            681 ;--------------------------------------------------------
                            682 	.area XISEG   (XDATA)
   0000                     683 _name::
   0000                     684 	.ds 3
   0003                     685 _str::
   0003                     686 	.ds 50
   0035                     687 _time::
   0035                     688 	.ds 1
   0036                     689 _timers::
   0036                     690 	.ds 2
   0038                     691 _io_counter::
   0038                     692 	.ds 2
                            693 	.area HOME    (CODE)
                            694 	.area GSINIT0 (CODE)
                            695 	.area GSINIT1 (CODE)
                            696 	.area GSINIT2 (CODE)
                            697 	.area GSINIT3 (CODE)
                            698 	.area GSINIT4 (CODE)
                            699 	.area GSINIT5 (CODE)
                            700 	.area GSINIT  (CODE)
                            701 	.area GSFINAL (CODE)
                            702 	.area CSEG    (CODE)
                            703 ;--------------------------------------------------------
                            704 ; interrupt vector 
                            705 ;--------------------------------------------------------
                            706 	.area HOME    (CODE)
   0000                     707 __interrupt_vect:
   0000 02s00r00            708 	ljmp	__sdcc_gsinit_startup
   0003 02s13r52            709 	ljmp	_external_isr
   0006                     710 	.ds	5
   000B 02s12rE9            711 	ljmp	_timer_isr
   000E                     712 	.ds	5
   0013 32                  713 	reti
   0014                     714 	.ds	7
   001B 32                  715 	reti
   001C                     716 	.ds	7
   0023 32                  717 	reti
   0024                     718 	.ds	7
   002B 02s13rC1            719 	ljmp	_timer2_isr
                            720 ;--------------------------------------------------------
                            721 ; global & static initialisations
                            722 ;--------------------------------------------------------
                            723 	.area HOME    (CODE)
                            724 	.area GSINIT  (CODE)
                            725 	.area GSFINAL (CODE)
                            726 	.area GSINIT  (CODE)
                            727 	.globl __sdcc_gsinit_startup
                            728 	.globl __sdcc_program_startup
                            729 	.globl __start__stack
                            730 	.globl __mcs51_genXINIT
                            731 	.globl __mcs51_genXRAMCLEAR
                            732 	.globl __mcs51_genRAMCLEAR
                            733 	.area GSFINAL (CODE)
   0000 02s00r00            734 	ljmp	__sdcc_program_startup
                            735 ;--------------------------------------------------------
                            736 ; Home
                            737 ;--------------------------------------------------------
                            738 	.area HOME    (CODE)
                            739 	.area CSEG    (CODE)
   0000                     740 __sdcc_program_startup:
   0000 12s00r0C            741 	lcall	_main
                            742 ;	return from main will lock up
   0003 80 FE               743 	sjmp .
                            744 ;--------------------------------------------------------
                            745 ; code
                            746 ;--------------------------------------------------------
                            747 	.area CSEG    (CODE)
                            748 ;------------------------------------------------------------
                            749 ;Allocation info for local variables in function '_sdcc_external_startup'
                            750 ;------------------------------------------------------------
                            751 ;------------------------------------------------------------
                            752 ;	main.c:59: _sdcc_external_startup()  //This function changes the size of Internal RAM to 1KB
                            753 ;	-----------------------------------------
                            754 ;	 function _sdcc_external_startup
                            755 ;	-----------------------------------------
   0005                     756 __sdcc_external_startup:
                    0002    757 	ar2 = 0x02
                    0003    758 	ar3 = 0x03
                    0004    759 	ar4 = 0x04
                    0005    760 	ar5 = 0x05
                    0006    761 	ar6 = 0x06
                    0007    762 	ar7 = 0x07
                    0000    763 	ar0 = 0x00
                    0001    764 	ar1 = 0x01
                            765 ;	main.c:61: AUXR |= 0x0C;
                            766 ;	genOr
   0005 43 8E 0C            767 	orl	_AUXR,#0x0C
                            768 ;	main.c:62: return 0;
                            769 ;	genRet
                            770 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            771 	mov	dptr,#0x0000
                            772 ;	Peephole 300	removed redundant label 00101$
   000B 22                  773 	ret
                            774 ;------------------------------------------------------------
                            775 ;Allocation info for local variables in function 'main'
                            776 ;------------------------------------------------------------
                            777 ;i                         Allocated with name '_main_i_1_1'
                            778 ;------------------------------------------------------------
                            779 ;	main.c:69: void main()
                            780 ;	-----------------------------------------
                            781 ;	 function main
                            782 ;	-----------------------------------------
   000C                     783 _main:
                            784 ;	main.c:73: tflag=0;
                            785 ;	genAssign
   000C 90s00r3F            786 	mov	dptr,#_tflag
   000F E4                  787 	clr	a
   0010 F0                  788 	movx	@dptr,a
   0011 A3                  789 	inc	dptr
   0012 F0                  790 	movx	@dptr,a
                            791 ;	main.c:74: io_counter=0;
                            792 ;	genAssign
   0013 90s00r38            793 	mov	dptr,#_io_counter
   0016 E4                  794 	clr	a
   0017 F0                  795 	movx	@dptr,a
   0018 A3                  796 	inc	dptr
   0019 F0                  797 	movx	@dptr,a
                            798 ;	main.c:75: lcdcount=0;
                            799 ;	genAssign
   001A 90s00r41            800 	mov	dptr,#_lcdcount
   001D E4                  801 	clr	a
   001E F0                  802 	movx	@dptr,a
   001F A3                  803 	inc	dptr
   0020 F0                  804 	movx	@dptr,a
                            805 ;	main.c:76: t2flag=0;
                            806 ;	genAssign
   0021 90s00r8D            807 	mov	dptr,#_t2flag
   0024 E4                  808 	clr	a
   0025 F0                  809 	movx	@dptr,a
   0026 A3                  810 	inc	dptr
   0027 F0                  811 	movx	@dptr,a
                            812 ;	main.c:77: time_value=0;
                            813 ;	genAssign
   0028 90s00r8F            814 	mov	dptr,#_time_value
   002B E4                  815 	clr	a
   002C F0                  816 	movx	@dptr,a
   002D A3                  817 	inc	dptr
   002E F0                  818 	movx	@dptr,a
                            819 ;	main.c:78: cursor_position=0x80;
                            820 ;	genAssign
   002F 90s00r5D            821 	mov	dptr,#_cursor_position
   0032 74 80               822 	mov	a,#0x80
   0034 F0                  823 	movx	@dptr,a
                            824 ;	main.c:79: initialstatus=0x01; //initial status of port pins of the IO expander
                            825 ;	genAssign
   0035 90s00r5E            826 	mov	dptr,#_initialstatus
   0038 74 01               827 	mov	a,#0x01
   003A F0                  828 	movx	@dptr,a
                            829 ;	main.c:81: init_hardware();   //Function to Initialise the hardware for Serial Communication
                            830 ;	genCall
   003B 12s00r00            831 	lcall	_init_hardware
                            832 ;	main.c:82: printf_tiny("\r\n****************WELCOME***************\r\n");
                            833 ;	genIpush
   003E 74r00               834 	mov	a,#__str_0
   0040 C0 E0               835 	push	acc
   0042 74s00               836 	mov	a,#(__str_0 >> 8)
   0044 C0 E0               837 	push	acc
                            838 ;	genCall
   0046 12s00r00            839 	lcall	_printf_tiny
   0049 15 81               840 	dec	sp
   004B 15 81               841 	dec	sp
                            842 ;	main.c:83: timer_init();                                   // Initialize the Timer
                            843 ;	genCall
   004D 12s00r00            844 	lcall	_timer_init
                            845 ;	main.c:84: eereset();                                       // EEPROM is reset at every powerup
                            846 ;	genCall
   0050 12s00r00            847 	lcall	_eereset
                            848 ;	main.c:85: lcd_init();                                    //LCD initialisation
                            849 ;	genCall
   0053 12s00r00            850 	lcall	_lcd_init
                            851 ;	main.c:86: lcd_setup();                                   //LCD initial setup
                            852 ;	genCall
   0056 12s00r00            853 	lcall	_lcd_setup
                            854 ;	main.c:87: clock_reset();
                            855 ;	genCall
   0059 12s00r00            856 	lcall	_clock_reset
                            857 ;	main.c:89: statusreport(initialstatus);
                            858 ;	genAssign
   005C 90s00r5E            859 	mov	dptr,#_initialstatus
   005F E0                  860 	movx	a,@dptr
                            861 ;	genCall
   0060 FA                  862 	mov	r2,a
                            863 ;	Peephole 244.c	loading dpl from a instead of r2
   0061 F5 82               864 	mov	dpl,a
   0063 12s11r6F            865 	lcall	_statusreport
                            866 ;	main.c:90: IOEX_Write(initialstatus);
                            867 ;	genAssign
   0066 90s00r5E            868 	mov	dptr,#_initialstatus
   0069 E0                  869 	movx	a,@dptr
                            870 ;	genCall
   006A FA                  871 	mov	r2,a
                            872 ;	Peephole 244.c	loading dpl from a instead of r2
   006B F5 82               873 	mov	dpl,a
   006D 12s00r00            874 	lcall	_IOEX_Write
                            875 ;	main.c:94: do{
   0070                     876 00215$:
                            877 ;	main.c:95: printf_tiny("\r\n");
                            878 ;	genIpush
   0070 74r2B               879 	mov	a,#__str_1
   0072 C0 E0               880 	push	acc
   0074 74s00               881 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               882 	push	acc
                            883 ;	genCall
   0078 12s00r00            884 	lcall	_printf_tiny
   007B 15 81               885 	dec	sp
   007D 15 81               886 	dec	sp
                            887 ;	main.c:96: printf_tiny("\r\n******** MENU ********\r\n");
                            888 ;	genIpush
   007F 74r2E               889 	mov	a,#__str_2
   0081 C0 E0               890 	push	acc
   0083 74s00               891 	mov	a,#(__str_2 >> 8)
   0085 C0 E0               892 	push	acc
                            893 ;	genCall
   0087 12s00r00            894 	lcall	_printf_tiny
   008A 15 81               895 	dec	sp
   008C 15 81               896 	dec	sp
                            897 ;	main.c:97: printf_tiny("******** SELECT 'L' FOR LCD    ***********\r\n");
                            898 ;	genIpush
   008E 74r49               899 	mov	a,#__str_3
   0090 C0 E0               900 	push	acc
   0092 74s00               901 	mov	a,#(__str_3 >> 8)
   0094 C0 E0               902 	push	acc
                            903 ;	genCall
   0096 12s00r00            904 	lcall	_printf_tiny
   0099 15 81               905 	dec	sp
   009B 15 81               906 	dec	sp
                            907 ;	main.c:98: printf_tiny("******** SELECT 'E' FOR EEPROM ***********\r\n");
                            908 ;	genIpush
   009D 74r76               909 	mov	a,#__str_4
   009F C0 E0               910 	push	acc
   00A1 74s00               911 	mov	a,#(__str_4 >> 8)
   00A3 C0 E0               912 	push	acc
                            913 ;	genCall
   00A5 12s00r00            914 	lcall	_printf_tiny
   00A8 15 81               915 	dec	sp
   00AA 15 81               916 	dec	sp
                            917 ;	main.c:99: printf_tiny("******** SELECT 'C' FOR CLOCK   ***********\r\n");
                            918 ;	genIpush
   00AC 74rA3               919 	mov	a,#__str_5
   00AE C0 E0               920 	push	acc
   00B0 74s00               921 	mov	a,#(__str_5 >> 8)
   00B2 C0 E0               922 	push	acc
                            923 ;	genCall
   00B4 12s00r00            924 	lcall	_printf_tiny
   00B7 15 81               925 	dec	sp
   00B9 15 81               926 	dec	sp
                            927 ;	main.c:100: printf_tiny("******** SELECT 'I' FOR I\O EXPANDER   ***********\r\n");
                            928 ;	genIpush
   00BB 74rD1               929 	mov	a,#__str_6
   00BD C0 E0               930 	push	acc
   00BF 74s00               931 	mov	a,#(__str_6 >> 8)
   00C1 C0 E0               932 	push	acc
                            933 ;	genCall
   00C3 12s00r00            934 	lcall	_printf_tiny
   00C6 15 81               935 	dec	sp
   00C8 15 81               936 	dec	sp
                            937 ;	main.c:101: cmd=getchar();    // Obtain the command character
                            938 ;	genCall
   00CA 12s00r00            939 	lcall	_getchar
   00CD E5 82               940 	mov	a,dpl
                            941 ;	genAssign
   00CF 90s00r51            942 	mov	dptr,#_cmd
   00D2 F0                  943 	movx	@dptr,a
                            944 ;	main.c:102: printf_tiny("The command you entered is\t");
                            945 ;	genIpush
   00D3 74r05               946 	mov	a,#__str_7
   00D5 C0 E0               947 	push	acc
   00D7 74s01               948 	mov	a,#(__str_7 >> 8)
   00D9 C0 E0               949 	push	acc
                            950 ;	genCall
   00DB 12s00r00            951 	lcall	_printf_tiny
   00DE 15 81               952 	dec	sp
   00E0 15 81               953 	dec	sp
                            954 ;	main.c:103: putchar(cmd);
                            955 ;	genAssign
   00E2 90s00r51            956 	mov	dptr,#_cmd
   00E5 E0                  957 	movx	a,@dptr
                            958 ;	genCall
   00E6 FA                  959 	mov	r2,a
                            960 ;	Peephole 244.c	loading dpl from a instead of r2
   00E7 F5 82               961 	mov	dpl,a
   00E9 12s00r00            962 	lcall	_putchar
                            963 ;	main.c:104: printf_tiny("\r\n");
                            964 ;	genIpush
   00EC 74r2B               965 	mov	a,#__str_1
   00EE C0 E0               966 	push	acc
   00F0 74s00               967 	mov	a,#(__str_1 >> 8)
   00F2 C0 E0               968 	push	acc
                            969 ;	genCall
   00F4 12s00r00            970 	lcall	_printf_tiny
   00F7 15 81               971 	dec	sp
   00F9 15 81               972 	dec	sp
                            973 ;	main.c:105: if(cmd=='L')
                            974 ;	genAssign
   00FB 90s00r51            975 	mov	dptr,#_cmd
   00FE E0                  976 	movx	a,@dptr
   00FF FA                  977 	mov	r2,a
                            978 ;	genCmpEq
                            979 ;	gencjneshort
   0100 BA 4C 02            980 	cjne	r2,#0x4C,00265$
   0103 80 03               981 	sjmp	00266$
   0105                     982 00265$:
   0105 02s03r20            983 	ljmp	00213$
   0108                     984 00266$:
                            985 ;	main.c:107: do{
                            986 ;	genAssign
   0108 90s00r33            987 	mov	dptr,#_flag1
   010B E4                  988 	clr	a
   010C F0                  989 	movx	@dptr,a
   010D A3                  990 	inc	dptr
   010E F0                  991 	movx	@dptr,a
   010F                     992 00128$:
                            993 ;	main.c:108: printf_tiny("************ LCD MENU **********\r\n");
                            994 ;	genIpush
   010F 74r21               995 	mov	a,#__str_8
   0111 C0 E0               996 	push	acc
   0113 74s01               997 	mov	a,#(__str_8 >> 8)
   0115 C0 E0               998 	push	acc
                            999 ;	genCall
   0117 12s00r00           1000 	lcall	_printf_tiny
   011A 15 81              1001 	dec	sp
   011C 15 81              1002 	dec	sp
                           1003 ;	main.c:109: printf_tiny("********* SELECT 'C' for CGRAM DUMP ***********\r\n");
                           1004 ;	genIpush
   011E 74r44              1005 	mov	a,#__str_9
   0120 C0 E0              1006 	push	acc
   0122 74s01              1007 	mov	a,#(__str_9 >> 8)
   0124 C0 E0              1008 	push	acc
                           1009 ;	genCall
   0126 12s00r00           1010 	lcall	_printf_tiny
   0129 15 81              1011 	dec	sp
   012B 15 81              1012 	dec	sp
                           1013 ;	main.c:110: printf_tiny("********* SELECT 'D' for DDRAM DUMP ***********\r\n");
                           1014 ;	genIpush
   012D 74r76              1015 	mov	a,#__str_10
   012F C0 E0              1016 	push	acc
   0131 74s01              1017 	mov	a,#(__str_10 >> 8)
   0133 C0 E0              1018 	push	acc
                           1019 ;	genCall
   0135 12s00r00           1020 	lcall	_printf_tiny
   0138 15 81              1021 	dec	sp
   013A 15 81              1022 	dec	sp
                           1023 ;	main.c:111: printf_tiny("********* SELECT 'P' for LCD PUT STRING  ***********\r\n");
                           1024 ;	genIpush
   013C 74rA8              1025 	mov	a,#__str_11
   013E C0 E0              1026 	push	acc
   0140 74s01              1027 	mov	a,#(__str_11 >> 8)
   0142 C0 E0              1028 	push	acc
                           1029 ;	genCall
   0144 12s00r00           1030 	lcall	_printf_tiny
   0147 15 81              1031 	dec	sp
   0149 15 81              1032 	dec	sp
                           1033 ;	main.c:112: printf_tiny("********* SELECT 'L' for LCD CLEAR  ***********\r\n");
                           1034 ;	genIpush
   014B 74rDF              1035 	mov	a,#__str_12
   014D C0 E0              1036 	push	acc
   014F 74s01              1037 	mov	a,#(__str_12 >> 8)
   0151 C0 E0              1038 	push	acc
                           1039 ;	genCall
   0153 12s00r00           1040 	lcall	_printf_tiny
   0156 15 81              1041 	dec	sp
   0158 15 81              1042 	dec	sp
                           1043 ;	main.c:113: printf_tiny("********* SELECT 'R' for CUSTOM CHARACTER CREATE ***********\r\n");
                           1044 ;	genIpush
   015A 74r11              1045 	mov	a,#__str_13
   015C C0 E0              1046 	push	acc
   015E 74s02              1047 	mov	a,#(__str_13 >> 8)
   0160 C0 E0              1048 	push	acc
                           1049 ;	genCall
   0162 12s00r00           1050 	lcall	_printf_tiny
   0165 15 81              1051 	dec	sp
   0167 15 81              1052 	dec	sp
                           1053 ;	main.c:114: printf_tiny("********* SELECT 'H' for CUSTOM CHARACTER DISPLAY ***********\r\n");
                           1054 ;	genIpush
   0169 74r50              1055 	mov	a,#__str_14
   016B C0 E0              1056 	push	acc
   016D 74s02              1057 	mov	a,#(__str_14 >> 8)
   016F C0 E0              1058 	push	acc
                           1059 ;	genCall
   0171 12s00r00           1060 	lcall	_printf_tiny
   0174 15 81              1061 	dec	sp
   0176 15 81              1062 	dec	sp
                           1063 ;	main.c:115: printf_tiny("********* SELECT 'F' for LCD FUN LOGO DISPLAY ***********\r\n");
                           1064 ;	genIpush
   0178 74r90              1065 	mov	a,#__str_15
   017A C0 E0              1066 	push	acc
   017C 74s02              1067 	mov	a,#(__str_15 >> 8)
   017E C0 E0              1068 	push	acc
                           1069 ;	genCall
   0180 12s00r00           1070 	lcall	_printf_tiny
   0183 15 81              1071 	dec	sp
   0185 15 81              1072 	dec	sp
                           1073 ;	main.c:116: printf_tiny("********* SELECT 'S' for STRING SEARCH  ***********\r\n");
                           1074 ;	genIpush
   0187 74rCC              1075 	mov	a,#__str_16
   0189 C0 E0              1076 	push	acc
   018B 74s02              1077 	mov	a,#(__str_16 >> 8)
   018D C0 E0              1078 	push	acc
                           1079 ;	genCall
   018F 12s00r00           1080 	lcall	_printf_tiny
   0192 15 81              1081 	dec	sp
   0194 15 81              1082 	dec	sp
                           1083 ;	main.c:117: printf_tiny("********* SELECT 'M' for MAIN MENU  ***********\r\n");
                           1084 ;	genIpush
   0196 74r02              1085 	mov	a,#__str_17
   0198 C0 E0              1086 	push	acc
   019A 74s03              1087 	mov	a,#(__str_17 >> 8)
   019C C0 E0              1088 	push	acc
                           1089 ;	genCall
   019E 12s00r00           1090 	lcall	_printf_tiny
   01A1 15 81              1091 	dec	sp
   01A3 15 81              1092 	dec	sp
                           1093 ;	main.c:119: lcmd=getchar(); //Obtain the command character for LCD
                           1094 ;	genCall
   01A5 12s00r00           1095 	lcall	_getchar
   01A8 E5 82              1096 	mov	a,dpl
                           1097 ;	genAssign
   01AA 90s00r53           1098 	mov	dptr,#_lcmd
   01AD F0                 1099 	movx	@dptr,a
                           1100 ;	main.c:120: printf_tiny("The command you entered is\t");
                           1101 ;	genIpush
   01AE 74r05              1102 	mov	a,#__str_7
   01B0 C0 E0              1103 	push	acc
   01B2 74s01              1104 	mov	a,#(__str_7 >> 8)
   01B4 C0 E0              1105 	push	acc
                           1106 ;	genCall
   01B6 12s00r00           1107 	lcall	_printf_tiny
   01B9 15 81              1108 	dec	sp
   01BB 15 81              1109 	dec	sp
                           1110 ;	main.c:121: putchar(lcmd);
                           1111 ;	genAssign
   01BD 90s00r53           1112 	mov	dptr,#_lcmd
   01C0 E0                 1113 	movx	a,@dptr
                           1114 ;	genCall
   01C1 FB                 1115 	mov	r3,a
                           1116 ;	Peephole 244.c	loading dpl from a instead of r3
   01C2 F5 82              1117 	mov	dpl,a
   01C4 12s00r00           1118 	lcall	_putchar
                           1119 ;	main.c:122: printf_tiny("\r\n");
                           1120 ;	genIpush
   01C7 74r2B              1121 	mov	a,#__str_1
   01C9 C0 E0              1122 	push	acc
   01CB 74s00              1123 	mov	a,#(__str_1 >> 8)
   01CD C0 E0              1124 	push	acc
                           1125 ;	genCall
   01CF 12s00r00           1126 	lcall	_printf_tiny
   01D2 15 81              1127 	dec	sp
   01D4 15 81              1128 	dec	sp
                           1129 ;	main.c:123: if(lcmd=='C')
                           1130 ;	genAssign
   01D6 90s00r53           1131 	mov	dptr,#_lcmd
   01D9 E0                 1132 	movx	a,@dptr
   01DA FB                 1133 	mov	r3,a
                           1134 ;	genCmpEq
                           1135 ;	gencjneshort
                           1136 ;	Peephole 112.b	changed ljmp to sjmp
                           1137 ;	Peephole 198.b	optimized misc jump sequence
   01DB BB 43 1C           1138 	cjne	r3,#0x43,00126$
                           1139 ;	Peephole 200.b	removed redundant sjmp
                           1140 ;	Peephole 300	removed redundant label 00267$
                           1141 ;	Peephole 300	removed redundant label 00268$
                           1142 ;	main.c:125: printf_tiny("************CGRAM DUMP MODE IN LCD*************\r\n");
                           1143 ;	genIpush
   01DE 74r34              1144 	mov	a,#__str_18
   01E0 C0 E0              1145 	push	acc
   01E2 74s03              1146 	mov	a,#(__str_18 >> 8)
   01E4 C0 E0              1147 	push	acc
                           1148 ;	genCall
   01E6 12s00r00           1149 	lcall	_printf_tiny
   01E9 15 81              1150 	dec	sp
   01EB 15 81              1151 	dec	sp
                           1152 ;	main.c:126: CGRAM_dump(); //Function call for CGRAM dump
                           1153 ;	genCall
   01ED 12s00r00           1154 	lcall	_CGRAM_dump
                           1155 ;	main.c:127: flag3=0;
                           1156 ;	genAssign
   01F0 90s00r37           1157 	mov	dptr,#_flag3
   01F3 E4                 1158 	clr	a
   01F4 F0                 1159 	movx	@dptr,a
   01F5 A3                 1160 	inc	dptr
   01F6 F0                 1161 	movx	@dptr,a
   01F7 02s03r0C           1162 	ljmp	00127$
   01FA                    1163 00126$:
                           1164 ;	main.c:129: else if(lcmd=='D')
                           1165 ;	genCmpEq
                           1166 ;	gencjneshort
                           1167 ;	Peephole 112.b	changed ljmp to sjmp
                           1168 ;	Peephole 198.b	optimized misc jump sequence
   01FA BB 44 1C           1169 	cjne	r3,#0x44,00123$
                           1170 ;	Peephole 200.b	removed redundant sjmp
                           1171 ;	Peephole 300	removed redundant label 00269$
                           1172 ;	Peephole 300	removed redundant label 00270$
                           1173 ;	main.c:131: printf_tiny("************DDRAM DUMP MODE IN LCD*************\r\n");
                           1174 ;	genIpush
   01FD 74r66              1175 	mov	a,#__str_19
   01FF C0 E0              1176 	push	acc
   0201 74s03              1177 	mov	a,#(__str_19 >> 8)
   0203 C0 E0              1178 	push	acc
                           1179 ;	genCall
   0205 12s00r00           1180 	lcall	_printf_tiny
   0208 15 81              1181 	dec	sp
   020A 15 81              1182 	dec	sp
                           1183 ;	main.c:132: DDRAM_dump(); //Function call for DDRAM dump
                           1184 ;	genCall
   020C 12s00r00           1185 	lcall	_DDRAM_dump
                           1186 ;	main.c:133: flag3=0;
                           1187 ;	genAssign
   020F 90s00r37           1188 	mov	dptr,#_flag3
   0212 E4                 1189 	clr	a
   0213 F0                 1190 	movx	@dptr,a
   0214 A3                 1191 	inc	dptr
   0215 F0                 1192 	movx	@dptr,a
   0216 02s03r0C           1193 	ljmp	00127$
   0219                    1194 00123$:
                           1195 ;	main.c:135: else if(lcmd=='P')
                           1196 ;	genCmpEq
                           1197 ;	gencjneshort
                           1198 ;	Peephole 112.b	changed ljmp to sjmp
                           1199 ;	Peephole 198.b	optimized misc jump sequence
   0219 BB 50 22           1200 	cjne	r3,#0x50,00120$
                           1201 ;	Peephole 200.b	removed redundant sjmp
                           1202 ;	Peephole 300	removed redundant label 00271$
                           1203 ;	Peephole 300	removed redundant label 00272$
                           1204 ;	main.c:137: printf_tiny("************LCD PUT STRING*************\r\n");
                           1205 ;	genIpush
   021C 74r98              1206 	mov	a,#__str_20
   021E C0 E0              1207 	push	acc
   0220 74s03              1208 	mov	a,#(__str_20 >> 8)
   0222 C0 E0              1209 	push	acc
                           1210 ;	genCall
   0224 12s00r00           1211 	lcall	_printf_tiny
   0227 15 81              1212 	dec	sp
   0229 15 81              1213 	dec	sp
                           1214 ;	main.c:138: lcdputstr("ESD LAB"); //Function call to put string on the LCD
                           1215 ;	genCall
                           1216 ;	Peephole 182.a	used 16 bit load of DPTR
   022B 90s03rC2           1217 	mov	dptr,#__str_21
   022E 75 F0 80           1218 	mov	b,#0x80
   0231 12s00r00           1219 	lcall	_lcdputstr
                           1220 ;	main.c:139: flag3=0;
                           1221 ;	genAssign
   0234 90s00r37           1222 	mov	dptr,#_flag3
   0237 E4                 1223 	clr	a
   0238 F0                 1224 	movx	@dptr,a
   0239 A3                 1225 	inc	dptr
   023A F0                 1226 	movx	@dptr,a
   023B 02s03r0C           1227 	ljmp	00127$
   023E                    1228 00120$:
                           1229 ;	main.c:141: else if(lcmd=='M')
                           1230 ;	genCmpEq
                           1231 ;	gencjneshort
                           1232 ;	Peephole 112.b	changed ljmp to sjmp
                           1233 ;	Peephole 198.b	optimized misc jump sequence
   023E BB 4D 19           1234 	cjne	r3,#0x4D,00117$
                           1235 ;	Peephole 200.b	removed redundant sjmp
                           1236 ;	Peephole 300	removed redundant label 00273$
                           1237 ;	Peephole 300	removed redundant label 00274$
                           1238 ;	main.c:143: printf_tiny("********Back to  Main Menu**********");
                           1239 ;	genIpush
   0241 74rCA              1240 	mov	a,#__str_22
   0243 C0 E0              1241 	push	acc
   0245 74s03              1242 	mov	a,#(__str_22 >> 8)
   0247 C0 E0              1243 	push	acc
                           1244 ;	genCall
   0249 12s00r00           1245 	lcall	_printf_tiny
   024C 15 81              1246 	dec	sp
   024E 15 81              1247 	dec	sp
                           1248 ;	main.c:144: flag3=0;
                           1249 ;	genAssign
   0250 90s00r37           1250 	mov	dptr,#_flag3
   0253 E4                 1251 	clr	a
   0254 F0                 1252 	movx	@dptr,a
   0255 A3                 1253 	inc	dptr
   0256 F0                 1254 	movx	@dptr,a
   0257 02s03r0C           1255 	ljmp	00127$
   025A                    1256 00117$:
                           1257 ;	main.c:146: else if(lcmd=='L')
                           1258 ;	genCmpEq
                           1259 ;	gencjneshort
                           1260 ;	Peephole 112.b	changed ljmp to sjmp
                           1261 ;	Peephole 198.b	optimized misc jump sequence
   025A BB 4C 1C           1262 	cjne	r3,#0x4C,00114$
                           1263 ;	Peephole 200.b	removed redundant sjmp
                           1264 ;	Peephole 300	removed redundant label 00275$
                           1265 ;	Peephole 300	removed redundant label 00276$
                           1266 ;	main.c:148: printf_tiny("************CLEAR LCD MODE IN LCD*************\r\n");
                           1267 ;	genIpush
   025D 74rEF              1268 	mov	a,#__str_23
   025F C0 E0              1269 	push	acc
   0261 74s03              1270 	mov	a,#(__str_23 >> 8)
   0263 C0 E0              1271 	push	acc
                           1272 ;	genCall
   0265 12s00r00           1273 	lcall	_printf_tiny
   0268 15 81              1274 	dec	sp
   026A 15 81              1275 	dec	sp
                           1276 ;	main.c:149: lcdclear();  //Function Call for LCD Clear
                           1277 ;	genCall
   026C 12s00r00           1278 	lcall	_lcdclear
                           1279 ;	main.c:150: flag3=0;
                           1280 ;	genAssign
   026F 90s00r37           1281 	mov	dptr,#_flag3
   0272 E4                 1282 	clr	a
   0273 F0                 1283 	movx	@dptr,a
   0274 A3                 1284 	inc	dptr
   0275 F0                 1285 	movx	@dptr,a
   0276 02s03r0C           1286 	ljmp	00127$
   0279                    1287 00114$:
                           1288 ;	main.c:152: else if(lcmd=='H')
                           1289 ;	genCmpEq
                           1290 ;	gencjneshort
                           1291 ;	Peephole 112.b	changed ljmp to sjmp
                           1292 ;	Peephole 198.b	optimized misc jump sequence
   0279 BB 48 1B           1293 	cjne	r3,#0x48,00111$
                           1294 ;	Peephole 200.b	removed redundant sjmp
                           1295 ;	Peephole 300	removed redundant label 00277$
                           1296 ;	Peephole 300	removed redundant label 00278$
                           1297 ;	main.c:154: printf_tiny("******** CUSTOM CHARACTER DISPLAY MODE *********");
                           1298 ;	genIpush
   027C 74r20              1299 	mov	a,#__str_24
   027E C0 E0              1300 	push	acc
   0280 74s04              1301 	mov	a,#(__str_24 >> 8)
   0282 C0 E0              1302 	push	acc
                           1303 ;	genCall
   0284 12s00r00           1304 	lcall	_printf_tiny
   0287 15 81              1305 	dec	sp
   0289 15 81              1306 	dec	sp
                           1307 ;	main.c:155: lcd_displaycustom(); //Function call for Custom character display
                           1308 ;	genCall
   028B 12s10rF8           1309 	lcall	_lcd_displaycustom
                           1310 ;	main.c:156: flag3=0;
                           1311 ;	genAssign
   028E 90s00r37           1312 	mov	dptr,#_flag3
   0291 E4                 1313 	clr	a
   0292 F0                 1314 	movx	@dptr,a
   0293 A3                 1315 	inc	dptr
   0294 F0                 1316 	movx	@dptr,a
                           1317 ;	Peephole 112.b	changed ljmp to sjmp
   0295 80 75              1318 	sjmp	00127$
   0297                    1319 00111$:
                           1320 ;	main.c:158: else if(lcmd=='R')
                           1321 ;	genCmpEq
                           1322 ;	gencjneshort
                           1323 ;	Peephole 112.b	changed ljmp to sjmp
                           1324 ;	Peephole 198.b	optimized misc jump sequence
   0297 BB 52 1B           1325 	cjne	r3,#0x52,00108$
                           1326 ;	Peephole 200.b	removed redundant sjmp
                           1327 ;	Peephole 300	removed redundant label 00279$
                           1328 ;	Peephole 300	removed redundant label 00280$
                           1329 ;	main.c:160: printf_tiny("************ CUSTOM CHARACTER CREATE MODE *************\r\n");
                           1330 ;	genIpush
   029A 74r51              1331 	mov	a,#__str_25
   029C C0 E0              1332 	push	acc
   029E 74s04              1333 	mov	a,#(__str_25 >> 8)
   02A0 C0 E0              1334 	push	acc
                           1335 ;	genCall
   02A2 12s00r00           1336 	lcall	_printf_tiny
   02A5 15 81              1337 	dec	sp
   02A7 15 81              1338 	dec	sp
                           1339 ;	main.c:161: lcdcreate_custom(); //Function call for creating custom characters
                           1340 ;	genCall
   02A9 12s0Er85           1341 	lcall	_lcdcreate_custom
                           1342 ;	main.c:162: flag3=0;
                           1343 ;	genAssign
   02AC 90s00r37           1344 	mov	dptr,#_flag3
   02AF E4                 1345 	clr	a
   02B0 F0                 1346 	movx	@dptr,a
   02B1 A3                 1347 	inc	dptr
   02B2 F0                 1348 	movx	@dptr,a
                           1349 ;	Peephole 112.b	changed ljmp to sjmp
   02B3 80 57              1350 	sjmp	00127$
   02B5                    1351 00108$:
                           1352 ;	main.c:164: else if(lcmd=='F')
                           1353 ;	genCmpEq
                           1354 ;	gencjneshort
                           1355 ;	Peephole 112.b	changed ljmp to sjmp
                           1356 ;	Peephole 198.b	optimized misc jump sequence
   02B5 BB 46 1B           1357 	cjne	r3,#0x46,00105$
                           1358 ;	Peephole 200.b	removed redundant sjmp
                           1359 ;	Peephole 300	removed redundant label 00281$
                           1360 ;	Peephole 300	removed redundant label 00282$
                           1361 ;	main.c:166: printf_tiny("************ LCD FUN LOGO DISPLAY *************\r\n");
                           1362 ;	genIpush
   02B8 74r8B              1363 	mov	a,#__str_26
   02BA C0 E0              1364 	push	acc
   02BC 74s04              1365 	mov	a,#(__str_26 >> 8)
   02BE C0 E0              1366 	push	acc
                           1367 ;	genCall
   02C0 12s00r00           1368 	lcall	_printf_tiny
   02C3 15 81              1369 	dec	sp
   02C5 15 81              1370 	dec	sp
                           1371 ;	main.c:167: logo_creator();  //Function call to create a fun logo
                           1372 ;	genCall
   02C7 12s00r00           1373 	lcall	_logo_creator
                           1374 ;	main.c:168: flag3=0;
                           1375 ;	genAssign
   02CA 90s00r37           1376 	mov	dptr,#_flag3
   02CD E4                 1377 	clr	a
   02CE F0                 1378 	movx	@dptr,a
   02CF A3                 1379 	inc	dptr
   02D0 F0                 1380 	movx	@dptr,a
                           1381 ;	Peephole 112.b	changed ljmp to sjmp
   02D1 80 39              1382 	sjmp	00127$
   02D3                    1383 00105$:
                           1384 ;	main.c:170: else if(lcmd=='S')
                           1385 ;	genCmpEq
                           1386 ;	gencjneshort
                           1387 ;	Peephole 112.b	changed ljmp to sjmp
                           1388 ;	Peephole 198.b	optimized misc jump sequence
   02D3 BB 53 1E           1389 	cjne	r3,#0x53,00102$
                           1390 ;	Peephole 200.b	removed redundant sjmp
                           1391 ;	Peephole 300	removed redundant label 00283$
                           1392 ;	Peephole 300	removed redundant label 00284$
                           1393 ;	main.c:172: printf_tiny("************ STRING SEARCH *************\r\n");
                           1394 ;	genIpush
   02D6 74rBD              1395 	mov	a,#__str_27
   02D8 C0 E0              1396 	push	acc
   02DA 74s04              1397 	mov	a,#(__str_27 >> 8)
   02DC C0 E0              1398 	push	acc
                           1399 ;	genCall
   02DE 12s00r00           1400 	lcall	_printf_tiny
   02E1 15 81              1401 	dec	sp
   02E3 15 81              1402 	dec	sp
                           1403 ;	main.c:173: searchtimer_init();//Function call to initialize the timer2 for timer measurement of LCD DDRAM search
                           1404 ;	genCall
   02E5 12s1Br8A           1405 	lcall	_searchtimer_init
                           1406 ;	main.c:174: string_search(); //Function call to perform string search in LCD DDRAM
                           1407 ;	genCall
   02E8 12s13rFC           1408 	lcall	_string_search
                           1409 ;	main.c:175: flag3=0;
                           1410 ;	genAssign
   02EB 90s00r37           1411 	mov	dptr,#_flag3
   02EE E4                 1412 	clr	a
   02EF F0                 1413 	movx	@dptr,a
   02F0 A3                 1414 	inc	dptr
   02F1 F0                 1415 	movx	@dptr,a
                           1416 ;	Peephole 112.b	changed ljmp to sjmp
   02F2 80 18              1417 	sjmp	00127$
   02F4                    1418 00102$:
                           1419 ;	main.c:179: printf_tiny("Please enter a valid command\r\n");
                           1420 ;	genIpush
   02F4 74rE8              1421 	mov	a,#__str_28
   02F6 C0 E0              1422 	push	acc
   02F8 74s04              1423 	mov	a,#(__str_28 >> 8)
   02FA C0 E0              1424 	push	acc
                           1425 ;	genCall
   02FC 12s00r00           1426 	lcall	_printf_tiny
   02FF 15 81              1427 	dec	sp
   0301 15 81              1428 	dec	sp
                           1429 ;	main.c:180: flag3=1;
                           1430 ;	genAssign
   0303 90s00r37           1431 	mov	dptr,#_flag3
   0306 74 01              1432 	mov	a,#0x01
   0308 F0                 1433 	movx	@dptr,a
   0309 E4                 1434 	clr	a
   030A A3                 1435 	inc	dptr
   030B F0                 1436 	movx	@dptr,a
   030C                    1437 00127$:
                           1438 ;	main.c:183: }while(flag3==1);
                           1439 ;	genAssign
   030C 90s00r37           1440 	mov	dptr,#_flag3
   030F E0                 1441 	movx	a,@dptr
   0310 FB                 1442 	mov	r3,a
   0311 A3                 1443 	inc	dptr
   0312 E0                 1444 	movx	a,@dptr
   0313 FC                 1445 	mov	r4,a
                           1446 ;	genCmpEq
                           1447 ;	gencjneshort
   0314 BB 01 06           1448 	cjne	r3,#0x01,00285$
   0317 BC 00 03           1449 	cjne	r4,#0x00,00285$
   031A 02s01r0F           1450 	ljmp	00128$
   031D                    1451 00285$:
   031D 02s00r70           1452 	ljmp	00215$
   0320                    1453 00213$:
                           1454 ;	main.c:185: else if(cmd=='E')
                           1455 ;	genCmpEq
                           1456 ;	gencjneshort
   0320 BA 45 02           1457 	cjne	r2,#0x45,00286$
   0323 80 03              1458 	sjmp	00287$
   0325                    1459 00286$:
   0325 02s04r4D           1460 	ljmp	00210$
   0328                    1461 00287$:
                           1462 ;	main.c:187: do{
                           1463 ;	genAssign
   0328 90s00r33           1464 	mov	dptr,#_flag1
   032B E4                 1465 	clr	a
   032C F0                 1466 	movx	@dptr,a
   032D A3                 1467 	inc	dptr
   032E F0                 1468 	movx	@dptr,a
   032F                    1469 00143$:
                           1470 ;	main.c:188: printf_tiny("********* EEPROM MENU *********\r\n");
                           1471 ;	genIpush
   032F 74r07              1472 	mov	a,#__str_29
   0331 C0 E0              1473 	push	acc
   0333 74s05              1474 	mov	a,#(__str_29 >> 8)
   0335 C0 E0              1475 	push	acc
                           1476 ;	genCall
   0337 12s00r00           1477 	lcall	_printf_tiny
   033A 15 81              1478 	dec	sp
   033C 15 81              1479 	dec	sp
                           1480 ;	main.c:189: printf_tiny("********* SELECT 'W' for WRITE BYTE ***********\r\n");
                           1481 ;	genIpush
   033E 74r29              1482 	mov	a,#__str_30
   0340 C0 E0              1483 	push	acc
   0342 74s05              1484 	mov	a,#(__str_30 >> 8)
   0344 C0 E0              1485 	push	acc
                           1486 ;	genCall
   0346 12s00r00           1487 	lcall	_printf_tiny
   0349 15 81              1488 	dec	sp
   034B 15 81              1489 	dec	sp
                           1490 ;	main.c:190: printf_tiny("********* SELECT 'R' for READ BYTE  ***********\r\n");
                           1491 ;	genIpush
   034D 74r5B              1492 	mov	a,#__str_31
   034F C0 E0              1493 	push	acc
   0351 74s05              1494 	mov	a,#(__str_31 >> 8)
   0353 C0 E0              1495 	push	acc
                           1496 ;	genCall
   0355 12s00r00           1497 	lcall	_printf_tiny
   0358 15 81              1498 	dec	sp
   035A 15 81              1499 	dec	sp
                           1500 ;	main.c:191: printf_tiny("********* SELECT 'H' for HEXDUMP    ***********\r\n");
                           1501 ;	genIpush
   035C 74r8D              1502 	mov	a,#__str_32
   035E C0 E0              1503 	push	acc
   0360 74s05              1504 	mov	a,#(__str_32 >> 8)
   0362 C0 E0              1505 	push	acc
                           1506 ;	genCall
   0364 12s00r00           1507 	lcall	_printf_tiny
   0367 15 81              1508 	dec	sp
   0369 15 81              1509 	dec	sp
                           1510 ;	main.c:192: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           1511 ;	genIpush
   036B 74rBF              1512 	mov	a,#__str_33
   036D C0 E0              1513 	push	acc
   036F 74s05              1514 	mov	a,#(__str_33 >> 8)
   0371 C0 E0              1515 	push	acc
                           1516 ;	genCall
   0373 12s00r00           1517 	lcall	_printf_tiny
   0376 15 81              1518 	dec	sp
   0378 15 81              1519 	dec	sp
                           1520 ;	main.c:193: ecmd=getchar();                        //Enter a command in the EEPROM menu
                           1521 ;	genCall
   037A 12s00r00           1522 	lcall	_getchar
   037D E5 82              1523 	mov	a,dpl
                           1524 ;	genAssign
   037F 90s00r52           1525 	mov	dptr,#_ecmd
   0382 F0                 1526 	movx	@dptr,a
                           1527 ;	main.c:194: printf_tiny("The command you entered is\t");
                           1528 ;	genIpush
   0383 74r05              1529 	mov	a,#__str_7
   0385 C0 E0              1530 	push	acc
   0387 74s01              1531 	mov	a,#(__str_7 >> 8)
   0389 C0 E0              1532 	push	acc
                           1533 ;	genCall
   038B 12s00r00           1534 	lcall	_printf_tiny
   038E 15 81              1535 	dec	sp
   0390 15 81              1536 	dec	sp
                           1537 ;	main.c:195: putchar(ecmd);
                           1538 ;	genAssign
   0392 90s00r52           1539 	mov	dptr,#_ecmd
   0395 E0                 1540 	movx	a,@dptr
                           1541 ;	genCall
   0396 FB                 1542 	mov	r3,a
                           1543 ;	Peephole 244.c	loading dpl from a instead of r3
   0397 F5 82              1544 	mov	dpl,a
   0399 12s00r00           1545 	lcall	_putchar
                           1546 ;	main.c:196: printf_tiny("\r\n");
                           1547 ;	genIpush
   039C 74r2B              1548 	mov	a,#__str_1
   039E C0 E0              1549 	push	acc
   03A0 74s00              1550 	mov	a,#(__str_1 >> 8)
   03A2 C0 E0              1551 	push	acc
                           1552 ;	genCall
   03A4 12s00r00           1553 	lcall	_printf_tiny
   03A7 15 81              1554 	dec	sp
   03A9 15 81              1555 	dec	sp
                           1556 ;	main.c:197: eereset();
                           1557 ;	genCall
   03AB 12s00r00           1558 	lcall	_eereset
                           1559 ;	main.c:198: if(ecmd=='W')
                           1560 ;	genAssign
   03AE 90s00r52           1561 	mov	dptr,#_ecmd
   03B1 E0                 1562 	movx	a,@dptr
   03B2 FB                 1563 	mov	r3,a
                           1564 ;	genCmpEq
                           1565 ;	gencjneshort
                           1566 ;	Peephole 112.b	changed ljmp to sjmp
                           1567 ;	Peephole 198.b	optimized misc jump sequence
   03B3 BB 57 1B           1568 	cjne	r3,#0x57,00141$
                           1569 ;	Peephole 200.b	removed redundant sjmp
                           1570 ;	Peephole 300	removed redundant label 00288$
                           1571 ;	Peephole 300	removed redundant label 00289$
                           1572 ;	main.c:200: printf_tiny("***********WRITE BYTE MODE IN EEPROM**********\r\n");
                           1573 ;	genIpush
   03B6 74rEF              1574 	mov	a,#__str_34
   03B8 C0 E0              1575 	push	acc
   03BA 74s05              1576 	mov	a,#(__str_34 >> 8)
   03BC C0 E0              1577 	push	acc
                           1578 ;	genCall
   03BE 12s00r00           1579 	lcall	_printf_tiny
   03C1 15 81              1580 	dec	sp
   03C3 15 81              1581 	dec	sp
                           1582 ;	main.c:201: ewrite(); //function call to write to the EEPROM
                           1583 ;	genCall
   03C5 12s0Ar04           1584 	lcall	_ewrite
                           1585 ;	main.c:202: flag2=0;
                           1586 ;	genAssign
   03C8 90s00r35           1587 	mov	dptr,#_flag2
   03CB E4                 1588 	clr	a
   03CC F0                 1589 	movx	@dptr,a
   03CD A3                 1590 	inc	dptr
   03CE F0                 1591 	movx	@dptr,a
                           1592 ;	Peephole 112.b	changed ljmp to sjmp
   03CF 80 68              1593 	sjmp	00142$
   03D1                    1594 00141$:
                           1595 ;	main.c:204: else if(ecmd=='R')
                           1596 ;	genCmpEq
                           1597 ;	gencjneshort
                           1598 ;	Peephole 112.b	changed ljmp to sjmp
                           1599 ;	Peephole 198.b	optimized misc jump sequence
   03D1 BB 52 1B           1600 	cjne	r3,#0x52,00138$
                           1601 ;	Peephole 200.b	removed redundant sjmp
                           1602 ;	Peephole 300	removed redundant label 00290$
                           1603 ;	Peephole 300	removed redundant label 00291$
                           1604 ;	main.c:206: printf_tiny("***********READ BYTE MODE IN EEPROM**********\r\n");
                           1605 ;	genIpush
   03D4 74r20              1606 	mov	a,#__str_35
   03D6 C0 E0              1607 	push	acc
   03D8 74s06              1608 	mov	a,#(__str_35 >> 8)
   03DA C0 E0              1609 	push	acc
                           1610 ;	genCall
   03DC 12s00r00           1611 	lcall	_printf_tiny
   03DF 15 81              1612 	dec	sp
   03E1 15 81              1613 	dec	sp
                           1614 ;	main.c:207: eread();//Function call to read from the EEPROM
                           1615 ;	genCall
   03E3 12s0BrB0           1616 	lcall	_eread
                           1617 ;	main.c:208: flag2=0;
                           1618 ;	genAssign
   03E6 90s00r35           1619 	mov	dptr,#_flag2
   03E9 E4                 1620 	clr	a
   03EA F0                 1621 	movx	@dptr,a
   03EB A3                 1622 	inc	dptr
   03EC F0                 1623 	movx	@dptr,a
                           1624 ;	Peephole 112.b	changed ljmp to sjmp
   03ED 80 4A              1625 	sjmp	00142$
   03EF                    1626 00138$:
                           1627 ;	main.c:210: else if(ecmd=='H')
                           1628 ;	genCmpEq
                           1629 ;	gencjneshort
                           1630 ;	Peephole 112.b	changed ljmp to sjmp
                           1631 ;	Peephole 198.b	optimized misc jump sequence
   03EF BB 48 1B           1632 	cjne	r3,#0x48,00135$
                           1633 ;	Peephole 200.b	removed redundant sjmp
                           1634 ;	Peephole 300	removed redundant label 00292$
                           1635 ;	Peephole 300	removed redundant label 00293$
                           1636 ;	main.c:212: printf_tiny("***********HEXDUMP BYTE MODE IN EEPROM**********\r\n");
                           1637 ;	genIpush
   03F2 74r50              1638 	mov	a,#__str_36
   03F4 C0 E0              1639 	push	acc
   03F6 74s06              1640 	mov	a,#(__str_36 >> 8)
   03F8 C0 E0              1641 	push	acc
                           1642 ;	genCall
   03FA 12s00r00           1643 	lcall	_printf_tiny
   03FD 15 81              1644 	dec	sp
   03FF 15 81              1645 	dec	sp
                           1646 ;	main.c:213: eseqread(); //Function call for sequential read of the EEPROM
                           1647 ;	genCall
   0401 12s0CrA2           1648 	lcall	_eseqread
                           1649 ;	main.c:214: flag2=0;
                           1650 ;	genAssign
   0404 90s00r35           1651 	mov	dptr,#_flag2
   0407 E4                 1652 	clr	a
   0408 F0                 1653 	movx	@dptr,a
   0409 A3                 1654 	inc	dptr
   040A F0                 1655 	movx	@dptr,a
                           1656 ;	Peephole 112.b	changed ljmp to sjmp
   040B 80 2C              1657 	sjmp	00142$
   040D                    1658 00135$:
                           1659 ;	main.c:216: else if(ecmd=='M')
                           1660 ;	genCmpEq
                           1661 ;	gencjneshort
                           1662 ;	Peephole 112.b	changed ljmp to sjmp
                           1663 ;	Peephole 198.b	optimized misc jump sequence
   040D BB 4D 11           1664 	cjne	r3,#0x4D,00132$
                           1665 ;	Peephole 200.b	removed redundant sjmp
                           1666 ;	Peephole 300	removed redundant label 00294$
                           1667 ;	Peephole 300	removed redundant label 00295$
                           1668 ;	main.c:218: printf_tiny("********Back to Main Menu**********");
                           1669 ;	genIpush
   0410 74r83              1670 	mov	a,#__str_37
   0412 C0 E0              1671 	push	acc
   0414 74s06              1672 	mov	a,#(__str_37 >> 8)
   0416 C0 E0              1673 	push	acc
                           1674 ;	genCall
   0418 12s00r00           1675 	lcall	_printf_tiny
   041B 15 81              1676 	dec	sp
   041D 15 81              1677 	dec	sp
                           1678 ;	Peephole 112.b	changed ljmp to sjmp
   041F 80 18              1679 	sjmp	00142$
   0421                    1680 00132$:
                           1681 ;	main.c:222: printf_tiny("Please enter a valid command\r\n");
                           1682 ;	genIpush
   0421 74rE8              1683 	mov	a,#__str_28
   0423 C0 E0              1684 	push	acc
   0425 74s04              1685 	mov	a,#(__str_28 >> 8)
   0427 C0 E0              1686 	push	acc
                           1687 ;	genCall
   0429 12s00r00           1688 	lcall	_printf_tiny
   042C 15 81              1689 	dec	sp
   042E 15 81              1690 	dec	sp
                           1691 ;	main.c:223: flag2=1;
                           1692 ;	genAssign
   0430 90s00r35           1693 	mov	dptr,#_flag2
   0433 74 01              1694 	mov	a,#0x01
   0435 F0                 1695 	movx	@dptr,a
   0436 E4                 1696 	clr	a
   0437 A3                 1697 	inc	dptr
   0438 F0                 1698 	movx	@dptr,a
   0439                    1699 00142$:
                           1700 ;	main.c:226: }while(flag2==1);
                           1701 ;	genAssign
   0439 90s00r35           1702 	mov	dptr,#_flag2
   043C E0                 1703 	movx	a,@dptr
   043D FB                 1704 	mov	r3,a
   043E A3                 1705 	inc	dptr
   043F E0                 1706 	movx	a,@dptr
   0440 FC                 1707 	mov	r4,a
                           1708 ;	genCmpEq
                           1709 ;	gencjneshort
   0441 BB 01 06           1710 	cjne	r3,#0x01,00296$
   0444 BC 00 03           1711 	cjne	r4,#0x00,00296$
   0447 02s03r2F           1712 	ljmp	00143$
   044A                    1713 00296$:
   044A 02s00r70           1714 	ljmp	00215$
   044D                    1715 00210$:
                           1716 ;	main.c:228: else if(cmd=='C')
                           1717 ;	genCmpEq
                           1718 ;	gencjneshort
   044D BA 43 02           1719 	cjne	r2,#0x43,00297$
   0450 80 03              1720 	sjmp	00298$
   0452                    1721 00297$:
   0452 02s05r86           1722 	ljmp	00207$
   0455                    1723 00298$:
                           1724 ;	main.c:230: do{
                           1725 ;	genAssign
   0455 90s00r33           1726 	mov	dptr,#_flag1
   0458 E4                 1727 	clr	a
   0459 F0                 1728 	movx	@dptr,a
   045A A3                 1729 	inc	dptr
   045B F0                 1730 	movx	@dptr,a
   045C                    1731 00158$:
                           1732 ;	main.c:231: printf_tiny("********* CLOCK MENU *********\r\n");
                           1733 ;	genIpush
   045C 74rA7              1734 	mov	a,#__str_38
   045E C0 E0              1735 	push	acc
   0460 74s06              1736 	mov	a,#(__str_38 >> 8)
   0462 C0 E0              1737 	push	acc
                           1738 ;	genCall
   0464 12s00r00           1739 	lcall	_printf_tiny
   0467 15 81              1740 	dec	sp
   0469 15 81              1741 	dec	sp
                           1742 ;	main.c:232: printf_tiny("********* SELECT 'R' for CLOCK RESET ***********\r\n");
                           1743 ;	genIpush
   046B 74rC8              1744 	mov	a,#__str_39
   046D C0 E0              1745 	push	acc
   046F 74s06              1746 	mov	a,#(__str_39 >> 8)
   0471 C0 E0              1747 	push	acc
                           1748 ;	genCall
   0473 12s00r00           1749 	lcall	_printf_tiny
   0476 15 81              1750 	dec	sp
   0478 15 81              1751 	dec	sp
                           1752 ;	main.c:233: printf_tiny("********* SELECT 'S' for CLOCK STOP  ***********\r\n");
                           1753 ;	genIpush
   047A 74rFB              1754 	mov	a,#__str_40
   047C C0 E0              1755 	push	acc
   047E 74s06              1756 	mov	a,#(__str_40 >> 8)
   0480 C0 E0              1757 	push	acc
                           1758 ;	genCall
   0482 12s00r00           1759 	lcall	_printf_tiny
   0485 15 81              1760 	dec	sp
   0487 15 81              1761 	dec	sp
                           1762 ;	main.c:234: printf_tiny("********* SELECT 'T' for CLOCK RESTART   ***********\r\n");
                           1763 ;	genIpush
   0489 74r2E              1764 	mov	a,#__str_41
   048B C0 E0              1765 	push	acc
   048D 74s07              1766 	mov	a,#(__str_41 >> 8)
   048F C0 E0              1767 	push	acc
                           1768 ;	genCall
   0491 12s00r00           1769 	lcall	_printf_tiny
   0494 15 81              1770 	dec	sp
   0496 15 81              1771 	dec	sp
                           1772 ;	main.c:235: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           1773 ;	genIpush
   0498 74rBF              1774 	mov	a,#__str_33
   049A C0 E0              1775 	push	acc
   049C 74s05              1776 	mov	a,#(__str_33 >> 8)
   049E C0 E0              1777 	push	acc
                           1778 ;	genCall
   04A0 12s00r00           1779 	lcall	_printf_tiny
   04A3 15 81              1780 	dec	sp
   04A5 15 81              1781 	dec	sp
                           1782 ;	main.c:236: flag2=0;
                           1783 ;	genAssign
   04A7 90s00r35           1784 	mov	dptr,#_flag2
   04AA E4                 1785 	clr	a
   04AB F0                 1786 	movx	@dptr,a
   04AC A3                 1787 	inc	dptr
   04AD F0                 1788 	movx	@dptr,a
                           1789 ;	main.c:237: ccmd=getchar(); //Enter a command in the Clock menu
                           1790 ;	genCall
   04AE 12s00r00           1791 	lcall	_getchar
   04B1 E5 82              1792 	mov	a,dpl
                           1793 ;	genAssign
   04B3 90s00r54           1794 	mov	dptr,#_ccmd
   04B6 F0                 1795 	movx	@dptr,a
                           1796 ;	main.c:238: printf_tiny("The command you entered is\t");
                           1797 ;	genIpush
   04B7 74r05              1798 	mov	a,#__str_7
   04B9 C0 E0              1799 	push	acc
   04BB 74s01              1800 	mov	a,#(__str_7 >> 8)
   04BD C0 E0              1801 	push	acc
                           1802 ;	genCall
   04BF 12s00r00           1803 	lcall	_printf_tiny
   04C2 15 81              1804 	dec	sp
   04C4 15 81              1805 	dec	sp
                           1806 ;	main.c:239: putchar(ccmd);
                           1807 ;	genAssign
   04C6 90s00r54           1808 	mov	dptr,#_ccmd
   04C9 E0                 1809 	movx	a,@dptr
                           1810 ;	genCall
   04CA FB                 1811 	mov	r3,a
                           1812 ;	Peephole 244.c	loading dpl from a instead of r3
   04CB F5 82              1813 	mov	dpl,a
   04CD 12s00r00           1814 	lcall	_putchar
                           1815 ;	main.c:240: printf_tiny("\r\n");
                           1816 ;	genIpush
   04D0 74r2B              1817 	mov	a,#__str_1
   04D2 C0 E0              1818 	push	acc
   04D4 74s00              1819 	mov	a,#(__str_1 >> 8)
   04D6 C0 E0              1820 	push	acc
                           1821 ;	genCall
   04D8 12s00r00           1822 	lcall	_printf_tiny
   04DB 15 81              1823 	dec	sp
   04DD 15 81              1824 	dec	sp
                           1825 ;	main.c:241: if(ccmd=='R')
                           1826 ;	genAssign
   04DF 90s00r54           1827 	mov	dptr,#_ccmd
   04E2 E0                 1828 	movx	a,@dptr
   04E3 FB                 1829 	mov	r3,a
                           1830 ;	genCmpEq
                           1831 ;	gencjneshort
                           1832 ;	Peephole 112.b	changed ljmp to sjmp
                           1833 ;	Peephole 198.b	optimized misc jump sequence
   04E4 BB 52 1B           1834 	cjne	r3,#0x52,00156$
                           1835 ;	Peephole 200.b	removed redundant sjmp
                           1836 ;	Peephole 300	removed redundant label 00299$
                           1837 ;	Peephole 300	removed redundant label 00300$
                           1838 ;	main.c:243: printf_tiny("*********** CLOCK RESET **********\r\n");
                           1839 ;	genIpush
   04E7 74r65              1840 	mov	a,#__str_42
   04E9 C0 E0              1841 	push	acc
   04EB 74s07              1842 	mov	a,#(__str_42 >> 8)
   04ED C0 E0              1843 	push	acc
                           1844 ;	genCall
   04EF 12s00r00           1845 	lcall	_printf_tiny
   04F2 15 81              1846 	dec	sp
   04F4 15 81              1847 	dec	sp
                           1848 ;	main.c:244: clock_reset(); //Function call for clock reset and to start from 00:00.0
                           1849 ;	genCall
   04F6 12s00r00           1850 	lcall	_clock_reset
                           1851 ;	main.c:245: flag2=0;
                           1852 ;	genAssign
   04F9 90s00r35           1853 	mov	dptr,#_flag2
   04FC E4                 1854 	clr	a
   04FD F0                 1855 	movx	@dptr,a
   04FE A3                 1856 	inc	dptr
   04FF F0                 1857 	movx	@dptr,a
                           1858 ;	Peephole 112.b	changed ljmp to sjmp
   0500 80 70              1859 	sjmp	00157$
   0502                    1860 00156$:
                           1861 ;	main.c:247: else if(ccmd=='S')
                           1862 ;	genCmpEq
                           1863 ;	gencjneshort
                           1864 ;	Peephole 112.b	changed ljmp to sjmp
                           1865 ;	Peephole 198.b	optimized misc jump sequence
   0502 BB 53 1F           1866 	cjne	r3,#0x53,00153$
                           1867 ;	Peephole 200.b	removed redundant sjmp
                           1868 ;	Peephole 300	removed redundant label 00301$
                           1869 ;	Peephole 300	removed redundant label 00302$
                           1870 ;	main.c:249: printf_tiny("*********** CLOCK STOP **********\r\n");
                           1871 ;	genIpush
   0505 74r8A              1872 	mov	a,#__str_43
   0507 C0 E0              1873 	push	acc
   0509 74s07              1874 	mov	a,#(__str_43 >> 8)
   050B C0 E0              1875 	push	acc
                           1876 ;	genCall
   050D 12s00r00           1877 	lcall	_printf_tiny
   0510 15 81              1878 	dec	sp
   0512 15 81              1879 	dec	sp
                           1880 ;	main.c:250: IE=0x00;         //Disable timer and the interrupt to stop the clock
                           1881 ;	genAssign
   0514 75 A8 00           1882 	mov	_IE,#0x00
                           1883 ;	main.c:251: EA=0;
                           1884 ;	genAssign
   0517 C2 AF              1885 	clr	_EA
                           1886 ;	main.c:252: TR0=0;
                           1887 ;	genAssign
   0519 C2 8C              1888 	clr	_TR0
                           1889 ;	main.c:253: flag2=0;
                           1890 ;	genAssign
   051B 90s00r35           1891 	mov	dptr,#_flag2
   051E E4                 1892 	clr	a
   051F F0                 1893 	movx	@dptr,a
   0520 A3                 1894 	inc	dptr
   0521 F0                 1895 	movx	@dptr,a
                           1896 ;	Peephole 112.b	changed ljmp to sjmp
   0522 80 4E              1897 	sjmp	00157$
   0524                    1898 00153$:
                           1899 ;	main.c:255: else if(ccmd=='T')
                           1900 ;	genCmpEq
                           1901 ;	gencjneshort
                           1902 ;	Peephole 112.b	changed ljmp to sjmp
                           1903 ;	Peephole 198.b	optimized misc jump sequence
   0524 BB 54 1F           1904 	cjne	r3,#0x54,00150$
                           1905 ;	Peephole 200.b	removed redundant sjmp
                           1906 ;	Peephole 300	removed redundant label 00303$
                           1907 ;	Peephole 300	removed redundant label 00304$
                           1908 ;	main.c:257: printf_tiny("*********** CLOCK RESTART **********\r\n");
                           1909 ;	genIpush
   0527 74rAE              1910 	mov	a,#__str_44
   0529 C0 E0              1911 	push	acc
   052B 74s07              1912 	mov	a,#(__str_44 >> 8)
   052D C0 E0              1913 	push	acc
                           1914 ;	genCall
   052F 12s00r00           1915 	lcall	_printf_tiny
   0532 15 81              1916 	dec	sp
   0534 15 81              1917 	dec	sp
                           1918 ;	main.c:258: IE=0x83;       //Enable timer and the interrupt to restart the clock
                           1919 ;	genAssign
   0536 75 A8 83           1920 	mov	_IE,#0x83
                           1921 ;	main.c:259: EA=1;
                           1922 ;	genAssign
   0539 D2 AF              1923 	setb	_EA
                           1924 ;	main.c:260: TR0=1;
                           1925 ;	genAssign
   053B D2 8C              1926 	setb	_TR0
                           1927 ;	main.c:261: flag2=0;
                           1928 ;	genAssign
   053D 90s00r35           1929 	mov	dptr,#_flag2
   0540 E4                 1930 	clr	a
   0541 F0                 1931 	movx	@dptr,a
   0542 A3                 1932 	inc	dptr
   0543 F0                 1933 	movx	@dptr,a
                           1934 ;	Peephole 112.b	changed ljmp to sjmp
   0544 80 2C              1935 	sjmp	00157$
   0546                    1936 00150$:
                           1937 ;	main.c:263: else if(ccmd=='M')
                           1938 ;	genCmpEq
                           1939 ;	gencjneshort
                           1940 ;	Peephole 112.b	changed ljmp to sjmp
                           1941 ;	Peephole 198.b	optimized misc jump sequence
   0546 BB 4D 11           1942 	cjne	r3,#0x4D,00147$
                           1943 ;	Peephole 200.b	removed redundant sjmp
                           1944 ;	Peephole 300	removed redundant label 00305$
                           1945 ;	Peephole 300	removed redundant label 00306$
                           1946 ;	main.c:265: printf_tiny("********Back to Main Menu**********");
                           1947 ;	genIpush
   0549 74r83              1948 	mov	a,#__str_37
   054B C0 E0              1949 	push	acc
   054D 74s06              1950 	mov	a,#(__str_37 >> 8)
   054F C0 E0              1951 	push	acc
                           1952 ;	genCall
   0551 12s00r00           1953 	lcall	_printf_tiny
   0554 15 81              1954 	dec	sp
   0556 15 81              1955 	dec	sp
                           1956 ;	Peephole 112.b	changed ljmp to sjmp
   0558 80 18              1957 	sjmp	00157$
   055A                    1958 00147$:
                           1959 ;	main.c:269: printf_tiny("Please enter a valid command\r\n");
                           1960 ;	genIpush
   055A 74rE8              1961 	mov	a,#__str_28
   055C C0 E0              1962 	push	acc
   055E 74s04              1963 	mov	a,#(__str_28 >> 8)
   0560 C0 E0              1964 	push	acc
                           1965 ;	genCall
   0562 12s00r00           1966 	lcall	_printf_tiny
   0565 15 81              1967 	dec	sp
   0567 15 81              1968 	dec	sp
                           1969 ;	main.c:270: flag2=1;
                           1970 ;	genAssign
   0569 90s00r35           1971 	mov	dptr,#_flag2
   056C 74 01              1972 	mov	a,#0x01
   056E F0                 1973 	movx	@dptr,a
   056F E4                 1974 	clr	a
   0570 A3                 1975 	inc	dptr
   0571 F0                 1976 	movx	@dptr,a
   0572                    1977 00157$:
                           1978 ;	main.c:273: }while(flag2==1);
                           1979 ;	genAssign
   0572 90s00r35           1980 	mov	dptr,#_flag2
   0575 E0                 1981 	movx	a,@dptr
   0576 FB                 1982 	mov	r3,a
   0577 A3                 1983 	inc	dptr
   0578 E0                 1984 	movx	a,@dptr
   0579 FC                 1985 	mov	r4,a
                           1986 ;	genCmpEq
                           1987 ;	gencjneshort
   057A BB 01 06           1988 	cjne	r3,#0x01,00307$
   057D BC 00 03           1989 	cjne	r4,#0x00,00307$
   0580 02s04r5C           1990 	ljmp	00158$
   0583                    1991 00307$:
   0583 02s00r70           1992 	ljmp	00215$
   0586                    1993 00207$:
                           1994 ;	main.c:275: else if(cmd=='I')
                           1995 ;	genCmpEq
                           1996 ;	gencjneshort
   0586 BA 49 02           1997 	cjne	r2,#0x49,00308$
   0589 80 03              1998 	sjmp	00309$
   058B                    1999 00308$:
   058B 02s09rE9           2000 	ljmp	00204$
   058E                    2001 00309$:
                           2002 ;	main.c:277: do{
                           2003 ;	genAssign
   058E 90s00r33           2004 	mov	dptr,#_flag1
   0591 E4                 2005 	clr	a
   0592 F0                 2006 	movx	@dptr,a
   0593 A3                 2007 	inc	dptr
   0594 F0                 2008 	movx	@dptr,a
   0595                    2009 00200$:
                           2010 ;	main.c:278: printf_tiny("********* I/O EXPANDER MENU *********\r\n");
                           2011 ;	genIpush
   0595 74rD5              2012 	mov	a,#__str_45
   0597 C0 E0              2013 	push	acc
   0599 74s07              2014 	mov	a,#(__str_45 >> 8)
   059B C0 E0              2015 	push	acc
                           2016 ;	genCall
   059D 12s00r00           2017 	lcall	_printf_tiny
   05A0 15 81              2018 	dec	sp
   05A2 15 81              2019 	dec	sp
                           2020 ;	main.c:279: printf_tiny("********* SELECT 'W' for I/O EXPANDER WRITE  ***********\r\n");
                           2021 ;	genIpush
   05A4 74rFD              2022 	mov	a,#__str_46
   05A6 C0 E0              2023 	push	acc
   05A8 74s07              2024 	mov	a,#(__str_46 >> 8)
   05AA C0 E0              2025 	push	acc
                           2026 ;	genCall
   05AC 12s00r00           2027 	lcall	_printf_tiny
   05AF 15 81              2028 	dec	sp
   05B1 15 81              2029 	dec	sp
                           2030 ;	main.c:280: printf_tiny("********* SELECT 'R' for I/O EXPANDER STATUS READ  ***********\r\n");
                           2031 ;	genIpush
   05B3 74r38              2032 	mov	a,#__str_47
   05B5 C0 E0              2033 	push	acc
   05B7 74s08              2034 	mov	a,#(__str_47 >> 8)
   05B9 C0 E0              2035 	push	acc
                           2036 ;	genCall
   05BB 12s00r00           2037 	lcall	_printf_tiny
   05BE 15 81              2038 	dec	sp
   05C0 15 81              2039 	dec	sp
                           2040 ;	main.c:281: printf_tiny("********* SELECT 'D' for I/O PORT PIN DIRECTION CHANGE   ***********\r\n");
                           2041 ;	genIpush
   05C2 74r79              2042 	mov	a,#__str_48
   05C4 C0 E0              2043 	push	acc
   05C6 74s08              2044 	mov	a,#(__str_48 >> 8)
   05C8 C0 E0              2045 	push	acc
                           2046 ;	genCall
   05CA 12s00r00           2047 	lcall	_printf_tiny
   05CD 15 81              2048 	dec	sp
   05CF 15 81              2049 	dec	sp
                           2050 ;	main.c:282: printf_tiny("********* SELECT 'C' for I/O COUNTER RESET   ***********\r\n");
                           2051 ;	genIpush
   05D1 74rC0              2052 	mov	a,#__str_49
   05D3 C0 E0              2053 	push	acc
   05D5 74s08              2054 	mov	a,#(__str_49 >> 8)
   05D7 C0 E0              2055 	push	acc
                           2056 ;	genCall
   05D9 12s00r00           2057 	lcall	_printf_tiny
   05DC 15 81              2058 	dec	sp
   05DE 15 81              2059 	dec	sp
                           2060 ;	main.c:283: printf_tiny("********* SELECT 'I' for I/O DISPLAY DIRECTION STATUS   ***********\r\n");
                           2061 ;	genIpush
   05E0 74rFB              2062 	mov	a,#__str_50
   05E2 C0 E0              2063 	push	acc
   05E4 74s08              2064 	mov	a,#(__str_50 >> 8)
   05E6 C0 E0              2065 	push	acc
                           2066 ;	genCall
   05E8 12s00r00           2067 	lcall	_printf_tiny
   05EB 15 81              2068 	dec	sp
   05ED 15 81              2069 	dec	sp
                           2070 ;	main.c:284: printf_tiny("********* SELECT 'S' for I/O DISPLAY DATA STATUS  ***********\r\n");
                           2071 ;	genIpush
   05EF 74r41              2072 	mov	a,#__str_51
   05F1 C0 E0              2073 	push	acc
   05F3 74s09              2074 	mov	a,#(__str_51 >> 8)
   05F5 C0 E0              2075 	push	acc
                           2076 ;	genCall
   05F7 12s00r00           2077 	lcall	_printf_tiny
   05FA 15 81              2078 	dec	sp
   05FC 15 81              2079 	dec	sp
                           2080 ;	main.c:285: printf_tiny("******** SELECT 'M' for MAIN MENU ***********\r\n");
                           2081 ;	genIpush
   05FE 74rBF              2082 	mov	a,#__str_33
   0600 C0 E0              2083 	push	acc
   0602 74s05              2084 	mov	a,#(__str_33 >> 8)
   0604 C0 E0              2085 	push	acc
                           2086 ;	genCall
   0606 12s00r00           2087 	lcall	_printf_tiny
   0609 15 81              2088 	dec	sp
   060B 15 81              2089 	dec	sp
                           2090 ;	main.c:286: flag2=0;
                           2091 ;	genAssign
   060D 90s00r35           2092 	mov	dptr,#_flag2
   0610 E4                 2093 	clr	a
   0611 F0                 2094 	movx	@dptr,a
   0612 A3                 2095 	inc	dptr
   0613 F0                 2096 	movx	@dptr,a
                           2097 ;	main.c:287: icmd=getchar(); //Enter a command in the I/O expander menu
                           2098 ;	genCall
   0614 12s00r00           2099 	lcall	_getchar
   0617 E5 82              2100 	mov	a,dpl
                           2101 ;	genAssign
   0619 90s00r55           2102 	mov	dptr,#_icmd
   061C F0                 2103 	movx	@dptr,a
                           2104 ;	main.c:288: printf_tiny("The command you entered is\t");
                           2105 ;	genIpush
   061D 74r05              2106 	mov	a,#__str_7
   061F C0 E0              2107 	push	acc
   0621 74s01              2108 	mov	a,#(__str_7 >> 8)
   0623 C0 E0              2109 	push	acc
                           2110 ;	genCall
   0625 12s00r00           2111 	lcall	_printf_tiny
   0628 15 81              2112 	dec	sp
   062A 15 81              2113 	dec	sp
                           2114 ;	main.c:289: putchar(icmd);
                           2115 ;	genAssign
   062C 90s00r55           2116 	mov	dptr,#_icmd
   062F E0                 2117 	movx	a,@dptr
                           2118 ;	genCall
   0630 FA                 2119 	mov	r2,a
                           2120 ;	Peephole 244.c	loading dpl from a instead of r2
   0631 F5 82              2121 	mov	dpl,a
   0633 12s00r00           2122 	lcall	_putchar
                           2123 ;	main.c:290: printf_tiny("\r\n");
                           2124 ;	genIpush
   0636 74r2B              2125 	mov	a,#__str_1
   0638 C0 E0              2126 	push	acc
   063A 74s00              2127 	mov	a,#(__str_1 >> 8)
   063C C0 E0              2128 	push	acc
                           2129 ;	genCall
   063E 12s00r00           2130 	lcall	_printf_tiny
   0641 15 81              2131 	dec	sp
   0643 15 81              2132 	dec	sp
                           2133 ;	main.c:291: if(icmd=='W')
                           2134 ;	genAssign
   0645 90s00r55           2135 	mov	dptr,#_icmd
   0648 E0                 2136 	movx	a,@dptr
   0649 FA                 2137 	mov	r2,a
                           2138 ;	genCmpEq
                           2139 ;	gencjneshort
   064A BA 57 02           2140 	cjne	r2,#0x57,00310$
   064D 80 03              2141 	sjmp	00311$
   064F                    2142 00310$:
   064F 02s08rDA           2143 	ljmp	00198$
   0652                    2144 00311$:
                           2145 ;	main.c:293: printf_tiny("*********** I/O EXPANDER WRITE BYTE **********\r\n");
                           2146 ;	genIpush
   0652 74r81              2147 	mov	a,#__str_52
   0654 C0 E0              2148 	push	acc
   0656 74s09              2149 	mov	a,#(__str_52 >> 8)
   0658 C0 E0              2150 	push	acc
                           2151 ;	genCall
   065A 12s00r00           2152 	lcall	_printf_tiny
   065D 15 81              2153 	dec	sp
   065F 15 81              2154 	dec	sp
                           2155 ;	main.c:294: displaystatus(); //Function call to display the direction of the port pins : Output / Input
                           2156 ;	genCall
   0661 12s12r30           2157 	lcall	_displaystatus
                           2158 ;	main.c:295: printf_tiny("Enter a output port pin number between 1 to 3 you want to write to\r\n");
                           2159 ;	genIpush
   0664 74rB2              2160 	mov	a,#__str_53
   0666 C0 E0              2161 	push	acc
   0668 74s09              2162 	mov	a,#(__str_53 >> 8)
   066A C0 E0              2163 	push	acc
                           2164 ;	genCall
   066C 12s00r00           2165 	lcall	_printf_tiny
   066F 15 81              2166 	dec	sp
   0671 15 81              2167 	dec	sp
                           2168 ;	main.c:296: do{
   0673                    2169 00168$:
                           2170 ;	main.c:297: pin1=getstr(); //Enter a pin number to write to it
                           2171 ;	genCall
   0673 12s00r00           2172 	lcall	_getstr
   0676 AB 82              2173 	mov	r3,dpl
   0678 AC 83              2174 	mov	r4,dph
   067A AD F0              2175 	mov	r5,b
                           2176 ;	genAssign
   067C 90s00r57           2177 	mov	dptr,#_pin1
   067F EB                 2178 	mov	a,r3
   0680 F0                 2179 	movx	@dptr,a
   0681 A3                 2180 	inc	dptr
   0682 EC                 2181 	mov	a,r4
   0683 F0                 2182 	movx	@dptr,a
   0684 A3                 2183 	inc	dptr
   0685 ED                 2184 	mov	a,r5
   0686 F0                 2185 	movx	@dptr,a
                           2186 ;	main.c:298: printf_tiny("The pin you have selected is:");
                           2187 ;	genIpush
   0687 74rF7              2188 	mov	a,#__str_54
   0689 C0 E0              2189 	push	acc
   068B 74s09              2190 	mov	a,#(__str_54 >> 8)
   068D C0 E0              2191 	push	acc
                           2192 ;	genCall
   068F 12s00r00           2193 	lcall	_printf_tiny
   0692 15 81              2194 	dec	sp
   0694 15 81              2195 	dec	sp
                           2196 ;	main.c:299: putstr(pin1);
                           2197 ;	genAssign
   0696 90s00r57           2198 	mov	dptr,#_pin1
   0699 E0                 2199 	movx	a,@dptr
   069A FB                 2200 	mov	r3,a
   069B A3                 2201 	inc	dptr
   069C E0                 2202 	movx	a,@dptr
   069D FC                 2203 	mov	r4,a
   069E A3                 2204 	inc	dptr
   069F E0                 2205 	movx	a,@dptr
   06A0 FD                 2206 	mov	r5,a
                           2207 ;	genCall
   06A1 8B 82              2208 	mov	dpl,r3
   06A3 8C 83              2209 	mov	dph,r4
   06A5 8D F0              2210 	mov	b,r5
   06A7 12s00r00           2211 	lcall	_putstr
                           2212 ;	main.c:300: printf_tiny("\r\n");
                           2213 ;	genIpush
   06AA 74r2B              2214 	mov	a,#__str_1
   06AC C0 E0              2215 	push	acc
   06AE 74s00              2216 	mov	a,#(__str_1 >> 8)
   06B0 C0 E0              2217 	push	acc
                           2218 ;	genCall
   06B2 12s00r00           2219 	lcall	_printf_tiny
   06B5 15 81              2220 	dec	sp
   06B7 15 81              2221 	dec	sp
                           2222 ;	main.c:301: pin1_int=atoi(pin1); //Convert ascii to integer
                           2223 ;	genAssign
   06B9 90s00r57           2224 	mov	dptr,#_pin1
   06BC E0                 2225 	movx	a,@dptr
   06BD FB                 2226 	mov	r3,a
   06BE A3                 2227 	inc	dptr
   06BF E0                 2228 	movx	a,@dptr
   06C0 FC                 2229 	mov	r4,a
   06C1 A3                 2230 	inc	dptr
   06C2 E0                 2231 	movx	a,@dptr
   06C3 FD                 2232 	mov	r5,a
                           2233 ;	genCall
   06C4 8B 82              2234 	mov	dpl,r3
   06C6 8C 83              2235 	mov	dph,r4
   06C8 8D F0              2236 	mov	b,r5
   06CA 12s00r00           2237 	lcall	_atoi
   06CD AB 82              2238 	mov	r3,dpl
   06CF AC 83              2239 	mov	r4,dph
                           2240 ;	genAssign
   06D1 90s00r3B           2241 	mov	dptr,#_pin1_int
   06D4 EB                 2242 	mov	a,r3
   06D5 F0                 2243 	movx	@dptr,a
   06D6 A3                 2244 	inc	dptr
   06D7 EC                 2245 	mov	a,r4
   06D8 F0                 2246 	movx	@dptr,a
                           2247 ;	main.c:302: if(pinstatus[pin1_int]==1 || pin1_int<1 || pin1_int>3 )
                           2248 ;	genPlus
                           2249 ;	Peephole 236.g	used r3 instead of ar3
   06D9 EB                 2250 	mov	a,r3
   06DA 24r84              2251 	add	a,#_pinstatus
   06DC F5 82              2252 	mov	dpl,a
                           2253 ;	Peephole 236.g	used r4 instead of ar4
   06DE EC                 2254 	mov	a,r4
   06DF 34s00              2255 	addc	a,#(_pinstatus >> 8)
   06E1 F5 83              2256 	mov	dph,a
                           2257 ;	genPointerGet
                           2258 ;	genFarPointerGet
   06E3 E0                 2259 	movx	a,@dptr
   06E4 FD                 2260 	mov	r5,a
                           2261 ;	genCmpEq
                           2262 ;	gencjneshort
   06E5 BD 01 02           2263 	cjne	r5,#0x01,00312$
                           2264 ;	Peephole 112.b	changed ljmp to sjmp
   06E8 80 19              2265 	sjmp	00161$
   06EA                    2266 00312$:
                           2267 ;	genCmpLt
                           2268 ;	genCmp
   06EA C3                 2269 	clr	c
   06EB EB                 2270 	mov	a,r3
   06EC 94 01              2271 	subb	a,#0x01
   06EE EC                 2272 	mov	a,r4
   06EF 64 80              2273 	xrl	a,#0x80
   06F1 94 80              2274 	subb	a,#0x80
                           2275 ;	genIfxJump
                           2276 ;	Peephole 112.b	changed ljmp to sjmp
                           2277 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2278 ;	genCmpGt
                           2279 ;	genCmp
   06F3 40 0E              2280 	jc	00161$
                           2281 ;	Peephole 300	removed redundant label 00313$
                           2282 ;	Peephole 256.a	removed redundant clr c
   06F5 74 03              2283 	mov	a,#0x03
   06F7 9B                 2284 	subb	a,r3
                           2285 ;	Peephole 159	avoided xrl during execution
   06F8 74 80              2286 	mov	a,#(0x00 ^ 0x80)
   06FA 8C F0              2287 	mov	b,r4
   06FC 63 F0 80           2288 	xrl	b,#0x80
   06FF 95 F0              2289 	subb	a,b
                           2290 ;	genIfxJump
                           2291 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0701 50 11              2292 	jnc	00162$
                           2293 ;	Peephole 300	removed redundant label 00314$
   0703                    2294 00161$:
                           2295 ;	main.c:303: printf_tiny("Please Enter a Output Pin between 1 to 3\r\n");
                           2296 ;	genIpush
   0703 74r15              2297 	mov	a,#__str_55
   0705 C0 E0              2298 	push	acc
   0707 74s0A              2299 	mov	a,#(__str_55 >> 8)
   0709 C0 E0              2300 	push	acc
                           2301 ;	genCall
   070B 12s00r00           2302 	lcall	_printf_tiny
   070E 15 81              2303 	dec	sp
   0710 15 81              2304 	dec	sp
                           2305 ;	Peephole 112.b	changed ljmp to sjmp
   0712 80 0F              2306 	sjmp	00169$
   0714                    2307 00162$:
                           2308 ;	main.c:305: printf_tiny("\n\n\r\t Select a bit to write to the pin:  0. and  1. \r\n\t");
                           2309 ;	genIpush
   0714 74r40              2310 	mov	a,#__str_56
   0716 C0 E0              2311 	push	acc
   0718 74s0A              2312 	mov	a,#(__str_56 >> 8)
   071A C0 E0              2313 	push	acc
                           2314 ;	genCall
   071C 12s00r00           2315 	lcall	_printf_tiny
   071F 15 81              2316 	dec	sp
   0721 15 81              2317 	dec	sp
   0723                    2318 00169$:
                           2319 ;	main.c:306: }while(pinstatus[pin1_int]==1 || pin1_int<1 || pin1_int>3 );
                           2320 ;	genAssign
   0723 90s00r3B           2321 	mov	dptr,#_pin1_int
   0726 E0                 2322 	movx	a,@dptr
   0727 FB                 2323 	mov	r3,a
   0728 A3                 2324 	inc	dptr
   0729 E0                 2325 	movx	a,@dptr
   072A FC                 2326 	mov	r4,a
                           2327 ;	genPlus
                           2328 ;	Peephole 236.g	used r3 instead of ar3
   072B EB                 2329 	mov	a,r3
   072C 24r84              2330 	add	a,#_pinstatus
   072E F5 82              2331 	mov	dpl,a
                           2332 ;	Peephole 236.g	used r4 instead of ar4
   0730 EC                 2333 	mov	a,r4
   0731 34s00              2334 	addc	a,#(_pinstatus >> 8)
   0733 F5 83              2335 	mov	dph,a
                           2336 ;	genPointerGet
                           2337 ;	genFarPointerGet
   0735 E0                 2338 	movx	a,@dptr
   0736 FD                 2339 	mov	r5,a
                           2340 ;	genCmpEq
                           2341 ;	gencjneshort
   0737 BD 01 03           2342 	cjne	r5,#0x01,00315$
   073A 02s06r73           2343 	ljmp	00168$
   073D                    2344 00315$:
                           2345 ;	genCmpLt
                           2346 ;	genCmp
   073D C3                 2347 	clr	c
   073E EB                 2348 	mov	a,r3
   073F 94 01              2349 	subb	a,#0x01
   0741 EC                 2350 	mov	a,r4
   0742 64 80              2351 	xrl	a,#0x80
   0744 94 80              2352 	subb	a,#0x80
                           2353 ;	genIfxJump
   0746 50 03              2354 	jnc	00316$
   0748 02s06r73           2355 	ljmp	00168$
   074B                    2356 00316$:
                           2357 ;	genCmpGt
                           2358 ;	genCmp
   074B C3                 2359 	clr	c
   074C 74 03              2360 	mov	a,#0x03
   074E 9B                 2361 	subb	a,r3
                           2362 ;	Peephole 159	avoided xrl during execution
   074F 74 80              2363 	mov	a,#(0x00 ^ 0x80)
   0751 8C F0              2364 	mov	b,r4
   0753 63 F0 80           2365 	xrl	b,#0x80
   0756 95 F0              2366 	subb	a,b
                           2367 ;	genIfxJump
   0758 50 03              2368 	jnc	00317$
   075A 02s06r73           2369 	ljmp	00168$
   075D                    2370 00317$:
                           2371 ;	main.c:309: do
   075D                    2372 00173$:
                           2373 ;	main.c:311: dir1=getstr(); //Enter a value to write to the port pin
                           2374 ;	genCall
   075D 12s00r00           2375 	lcall	_getstr
   0760 AB 82              2376 	mov	r3,dpl
   0762 AC 83              2377 	mov	r4,dph
   0764 AD F0              2378 	mov	r5,b
                           2379 ;	genAssign
   0766 90s00r5A           2380 	mov	dptr,#_dir1
   0769 EB                 2381 	mov	a,r3
   076A F0                 2382 	movx	@dptr,a
   076B A3                 2383 	inc	dptr
   076C EC                 2384 	mov	a,r4
   076D F0                 2385 	movx	@dptr,a
   076E A3                 2386 	inc	dptr
   076F ED                 2387 	mov	a,r5
   0770 F0                 2388 	movx	@dptr,a
                           2389 ;	main.c:312: printf_tiny("The bit you have selected is:");
                           2390 ;	genIpush
   0771 74r77              2391 	mov	a,#__str_57
   0773 C0 E0              2392 	push	acc
   0775 74s0A              2393 	mov	a,#(__str_57 >> 8)
   0777 C0 E0              2394 	push	acc
                           2395 ;	genCall
   0779 12s00r00           2396 	lcall	_printf_tiny
   077C 15 81              2397 	dec	sp
   077E 15 81              2398 	dec	sp
                           2399 ;	main.c:313: putstr(dir1);
                           2400 ;	genAssign
   0780 90s00r5A           2401 	mov	dptr,#_dir1
   0783 E0                 2402 	movx	a,@dptr
   0784 FB                 2403 	mov	r3,a
   0785 A3                 2404 	inc	dptr
   0786 E0                 2405 	movx	a,@dptr
   0787 FC                 2406 	mov	r4,a
   0788 A3                 2407 	inc	dptr
   0789 E0                 2408 	movx	a,@dptr
   078A FD                 2409 	mov	r5,a
                           2410 ;	genCall
   078B 8B 82              2411 	mov	dpl,r3
   078D 8C 83              2412 	mov	dph,r4
   078F 8D F0              2413 	mov	b,r5
   0791 12s00r00           2414 	lcall	_putstr
                           2415 ;	main.c:314: printf_tiny("\r\n");
                           2416 ;	genIpush
   0794 74r2B              2417 	mov	a,#__str_1
   0796 C0 E0              2418 	push	acc
   0798 74s00              2419 	mov	a,#(__str_1 >> 8)
   079A C0 E0              2420 	push	acc
                           2421 ;	genCall
   079C 12s00r00           2422 	lcall	_printf_tiny
   079F 15 81              2423 	dec	sp
   07A1 15 81              2424 	dec	sp
                           2425 ;	main.c:315: dir1_int=atoi(dir1); //Convert ascii to integer
                           2426 ;	genAssign
   07A3 90s00r5A           2427 	mov	dptr,#_dir1
   07A6 E0                 2428 	movx	a,@dptr
   07A7 FB                 2429 	mov	r3,a
   07A8 A3                 2430 	inc	dptr
   07A9 E0                 2431 	movx	a,@dptr
   07AA FC                 2432 	mov	r4,a
   07AB A3                 2433 	inc	dptr
   07AC E0                 2434 	movx	a,@dptr
   07AD FD                 2435 	mov	r5,a
                           2436 ;	genCall
   07AE 8B 82              2437 	mov	dpl,r3
   07B0 8C 83              2438 	mov	dph,r4
   07B2 8D F0              2439 	mov	b,r5
   07B4 12s00r00           2440 	lcall	_atoi
   07B7 AB 82              2441 	mov	r3,dpl
   07B9 AC 83              2442 	mov	r4,dph
                           2443 ;	genAssign
   07BB 90s00r3D           2444 	mov	dptr,#_dir1_int
   07BE EB                 2445 	mov	a,r3
   07BF F0                 2446 	movx	@dptr,a
   07C0 A3                 2447 	inc	dptr
   07C1 EC                 2448 	mov	a,r4
   07C2 F0                 2449 	movx	@dptr,a
                           2450 ;	main.c:316: if(dir1_int>1){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 or 1: \r\n");}
                           2451 ;	genCmpGt
                           2452 ;	genCmp
   07C3 C3                 2453 	clr	c
   07C4 74 01              2454 	mov	a,#0x01
   07C6 9B                 2455 	subb	a,r3
                           2456 ;	Peephole 159	avoided xrl during execution
   07C7 74 80              2457 	mov	a,#(0x00 ^ 0x80)
   07C9 8C F0              2458 	mov	b,r4
   07CB 63 F0 80           2459 	xrl	b,#0x80
   07CE 95 F0              2460 	subb	a,b
                           2461 ;	genIfxJump
                           2462 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07D0 50 0F              2463 	jnc	00174$
                           2464 ;	Peephole 300	removed redundant label 00318$
                           2465 ;	genIpush
   07D2 74r95              2466 	mov	a,#__str_58
   07D4 C0 E0              2467 	push	acc
   07D6 74s0A              2468 	mov	a,#(__str_58 >> 8)
   07D8 C0 E0              2469 	push	acc
                           2470 ;	genCall
   07DA 12s00r00           2471 	lcall	_printf_tiny
   07DD 15 81              2472 	dec	sp
   07DF 15 81              2473 	dec	sp
   07E1                    2474 00174$:
                           2475 ;	main.c:317: }while(dir1_int>1);
                           2476 ;	genAssign
   07E1 90s00r3D           2477 	mov	dptr,#_dir1_int
   07E4 E0                 2478 	movx	a,@dptr
   07E5 FB                 2479 	mov	r3,a
   07E6 A3                 2480 	inc	dptr
   07E7 E0                 2481 	movx	a,@dptr
   07E8 FC                 2482 	mov	r4,a
                           2483 ;	genCmpGt
                           2484 ;	genCmp
   07E9 C3                 2485 	clr	c
   07EA 74 01              2486 	mov	a,#0x01
   07EC 9B                 2487 	subb	a,r3
                           2488 ;	Peephole 159	avoided xrl during execution
   07ED 74 80              2489 	mov	a,#(0x00 ^ 0x80)
   07EF 8C F0              2490 	mov	b,r4
   07F1 63 F0 80           2491 	xrl	b,#0x80
   07F4 95 F0              2492 	subb	a,b
                           2493 ;	genIfxJump
   07F6 50 03              2494 	jnc	00319$
   07F8 02s07r5D           2495 	ljmp	00173$
   07FB                    2496 00319$:
                           2497 ;	main.c:319: iow_status = IOEX_Read(); //Read the status currently on the port pins
                           2498 ;	genCall
   07FB 12s00r00           2499 	lcall	_IOEX_Read
   07FE AB 82              2500 	mov	r3,dpl
                           2501 ;	genAssign
   0800 90s00r5F           2502 	mov	dptr,#_iow_status
   0803 EB                 2503 	mov	a,r3
   0804 F0                 2504 	movx	@dptr,a
                           2505 ;	main.c:320: if(dir1_int==0)
                           2506 ;	genAssign
   0805 90s00r3D           2507 	mov	dptr,#_dir1_int
   0808 E0                 2508 	movx	a,@dptr
   0809 FC                 2509 	mov	r4,a
   080A A3                 2510 	inc	dptr
   080B E0                 2511 	movx	a,@dptr
                           2512 ;	genIfx
   080C FD                 2513 	mov	r5,a
                           2514 ;	Peephole 135	removed redundant mov
   080D 4C                 2515 	orl	a,r4
                           2516 ;	genIfxJump
   080E 60 03              2517 	jz	00320$
   0810 02s08r92           2518 	ljmp	00177$
   0813                    2519 00320$:
                           2520 ;	main.c:322: dir1_int = IOEX_MASK-powf(IOEX_BASE,pin1_int); //If the value to write is '0' then mask other bits and write '0' to that particular pin
                           2521 ;	genAssign
   0813 90s00r3B           2522 	mov	dptr,#_pin1_int
   0816 E0                 2523 	movx	a,@dptr
   0817 FE                 2524 	mov	r6,a
   0818 A3                 2525 	inc	dptr
   0819 E0                 2526 	movx	a,@dptr
   081A FF                 2527 	mov	r7,a
                           2528 ;	genCall
   081B 8E 82              2529 	mov	dpl,r6
   081D 8F 83              2530 	mov	dph,r7
   081F 12s00r00           2531 	lcall	___sint2fs
   0822 AE 82              2532 	mov	r6,dpl
   0824 AF 83              2533 	mov	r7,dph
   0826 A8 F0              2534 	mov	r0,b
   0828 F9                 2535 	mov	r1,a
                           2536 ;	genAssign
   0829 90s00r00           2537 	mov	dptr,#_powf_PARM_2
   082C EE                 2538 	mov	a,r6
   082D F0                 2539 	movx	@dptr,a
   082E A3                 2540 	inc	dptr
   082F EF                 2541 	mov	a,r7
   0830 F0                 2542 	movx	@dptr,a
   0831 A3                 2543 	inc	dptr
   0832 E8                 2544 	mov	a,r0
   0833 F0                 2545 	movx	@dptr,a
   0834 A3                 2546 	inc	dptr
   0835 E9                 2547 	mov	a,r1
   0836 F0                 2548 	movx	@dptr,a
                           2549 ;	genCall
                           2550 ;	Peephole 3.c	changed mov to clr
                           2551 ;	Peephole 182.d	used 16 bit load of dptr
   0837 90 00 00           2552 	mov	dptr,#(0x00&0x00ff)
   083A E4                 2553 	clr	a
   083B F5 F0              2554 	mov	b,a
   083D 74 40              2555 	mov	a,#0x40
   083F 12s00r00           2556 	lcall	_powf
   0842 AE 82              2557 	mov	r6,dpl
   0844 AF 83              2558 	mov	r7,dph
   0846 A8 F0              2559 	mov	r0,b
   0848 F9                 2560 	mov	r1,a
                           2561 ;	genIpush
   0849 C0 06              2562 	push	ar6
   084B C0 07              2563 	push	ar7
   084D C0 00              2564 	push	ar0
   084F C0 01              2565 	push	ar1
                           2566 ;	genCall
                           2567 ;	Peephole 182.b	used 16 bit load of dptr
   0851 90 00 00           2568 	mov	dptr,#0x0000
   0854 75 F0 7F           2569 	mov	b,#0x7F
   0857 74 43              2570 	mov	a,#0x43
   0859 12s00r00           2571 	lcall	___fssub
   085C AE 82              2572 	mov	r6,dpl
   085E AF 83              2573 	mov	r7,dph
   0860 A8 F0              2574 	mov	r0,b
   0862 F9                 2575 	mov	r1,a
   0863 E5 81              2576 	mov	a,sp
   0865 24 FC              2577 	add	a,#0xfc
   0867 F5 81              2578 	mov	sp,a
                           2579 ;	genCall
   0869 8E 82              2580 	mov	dpl,r6
   086B 8F 83              2581 	mov	dph,r7
   086D 88 F0              2582 	mov	b,r0
   086F E9                 2583 	mov	a,r1
   0870 12s00r00           2584 	lcall	___fs2sint
   0873 AE 82              2585 	mov	r6,dpl
   0875 AF 83              2586 	mov	r7,dph
                           2587 ;	genAssign
   0877 90s00r3D           2588 	mov	dptr,#_dir1_int
   087A EE                 2589 	mov	a,r6
   087B F0                 2590 	movx	@dptr,a
   087C A3                 2591 	inc	dptr
   087D EF                 2592 	mov	a,r7
   087E F0                 2593 	movx	@dptr,a
                           2594 ;	main.c:323: iow_status &= dir1_int;
                           2595 ;	genAssign
   087F 90s00r5F           2596 	mov	dptr,#_iow_status
   0882 E0                 2597 	movx	a,@dptr
                           2598 ;	genCast
                           2599 ;	genAnd
   0883 F8                 2600 	mov	r0,a
   0884 79 00              2601 	mov	r1,#0x00
                           2602 ;	Peephole 177.d	removed redundant move
   0886 52 06              2603 	anl	ar6,a
   0888 E9                 2604 	mov	a,r1
   0889 52 07              2605 	anl	ar7,a
                           2606 ;	genCast
   088B 90s00r5F           2607 	mov	dptr,#_iow_status
   088E EE                 2608 	mov	a,r6
   088F F0                 2609 	movx	@dptr,a
                           2610 ;	Peephole 112.b	changed ljmp to sjmp
   0890 80 34              2611 	sjmp	00178$
   0892                    2612 00177$:
                           2613 ;	main.c:327: dir1_int= dir1_int<<pin1_int; //If the value to write is '1' then mask other bits and write '1' to that particular pin
                           2614 ;	genAssign
   0892 90s00r3B           2615 	mov	dptr,#_pin1_int
   0895 E0                 2616 	movx	a,@dptr
   0896 FE                 2617 	mov	r6,a
   0897 A3                 2618 	inc	dptr
   0898 E0                 2619 	movx	a,@dptr
   0899 FF                 2620 	mov	r7,a
                           2621 ;	genLeftShift
   089A 8E F0              2622 	mov	b,r6
   089C 05 F0              2623 	inc	b
   089E 80 06              2624 	sjmp	00322$
   08A0                    2625 00321$:
   08A0 EC                 2626 	mov	a,r4
                           2627 ;	Peephole 254	optimized left shift
   08A1 2C                 2628 	add	a,r4
   08A2 FC                 2629 	mov	r4,a
   08A3 ED                 2630 	mov	a,r5
   08A4 33                 2631 	rlc	a
   08A5 FD                 2632 	mov	r5,a
   08A6                    2633 00322$:
   08A6 D5 F0 F7           2634 	djnz	b,00321$
                           2635 ;	genAssign
   08A9 90s00r3D           2636 	mov	dptr,#_dir1_int
   08AC EC                 2637 	mov	a,r4
   08AD F0                 2638 	movx	@dptr,a
   08AE A3                 2639 	inc	dptr
   08AF ED                 2640 	mov	a,r5
   08B0 F0                 2641 	movx	@dptr,a
                           2642 ;	main.c:328: iow_status |= dir1_int;
                           2643 ;	genAssign
   08B1 90s00r3D           2644 	mov	dptr,#_dir1_int
   08B4 E0                 2645 	movx	a,@dptr
   08B5 FC                 2646 	mov	r4,a
   08B6 A3                 2647 	inc	dptr
   08B7 E0                 2648 	movx	a,@dptr
   08B8 FD                 2649 	mov	r5,a
                           2650 ;	genCast
   08B9 7E 00              2651 	mov	r6,#0x00
                           2652 ;	genOr
   08BB EB                 2653 	mov	a,r3
   08BC 42 04              2654 	orl	ar4,a
   08BE EE                 2655 	mov	a,r6
   08BF 42 05              2656 	orl	ar5,a
                           2657 ;	genCast
   08C1 90s00r5F           2658 	mov	dptr,#_iow_status
   08C4 EC                 2659 	mov	a,r4
   08C5 F0                 2660 	movx	@dptr,a
   08C6                    2661 00178$:
                           2662 ;	main.c:331: IOEX_Write(iow_status); //Write the new 8 bit value to the port pins
                           2663 ;	genAssign
   08C6 90s00r5F           2664 	mov	dptr,#_iow_status
   08C9 E0                 2665 	movx	a,@dptr
                           2666 ;	genCall
   08CA FB                 2667 	mov	r3,a
                           2668 ;	Peephole 244.c	loading dpl from a instead of r3
   08CB F5 82              2669 	mov	dpl,a
   08CD 12s00r00           2670 	lcall	_IOEX_Write
                           2671 ;	main.c:332: flag2=0;
                           2672 ;	genAssign
   08D0 90s00r35           2673 	mov	dptr,#_flag2
   08D3 E4                 2674 	clr	a
   08D4 F0                 2675 	movx	@dptr,a
   08D5 A3                 2676 	inc	dptr
   08D6 F0                 2677 	movx	@dptr,a
   08D7 02s09rD5           2678 	ljmp	00199$
   08DA                    2679 00198$:
                           2680 ;	main.c:335: else if(icmd=='R')
                           2681 ;	genCmpEq
                           2682 ;	gencjneshort
                           2683 ;	Peephole 112.b	changed ljmp to sjmp
                           2684 ;	Peephole 198.b	optimized misc jump sequence
   08DA BA 52 49           2685 	cjne	r2,#0x52,00195$
                           2686 ;	Peephole 200.b	removed redundant sjmp
                           2687 ;	Peephole 300	removed redundant label 00323$
                           2688 ;	Peephole 300	removed redundant label 00324$
                           2689 ;	main.c:337: printf_tiny("*********** I/O EXPANDER READ BYTE  **********\r\n");
                           2690 ;	genIpush
   08DD 74rCE              2691 	mov	a,#__str_59
   08DF C0 E0              2692 	push	acc
   08E1 74s0A              2693 	mov	a,#(__str_59 >> 8)
   08E3 C0 E0              2694 	push	acc
                           2695 ;	genCall
   08E5 12s00r00           2696 	lcall	_printf_tiny
   08E8 15 81              2697 	dec	sp
   08EA 15 81              2698 	dec	sp
                           2699 ;	main.c:338: iord=IOEX_Read(); //Read the data from port pins
                           2700 ;	genCall
   08EC 12s00r00           2701 	lcall	_IOEX_Read
   08EF AB 82              2702 	mov	r3,dpl
                           2703 ;	genAssign
   08F1 90s00r56           2704 	mov	dptr,#_iord
   08F4 EB                 2705 	mov	a,r3
   08F5 F0                 2706 	movx	@dptr,a
                           2707 ;	main.c:339: printf_tiny("The status of I/O expander is %X ",iord);
                           2708 ;	genCast
   08F6 7C 00              2709 	mov	r4,#0x00
                           2710 ;	genIpush
   08F8 C0 03              2711 	push	ar3
   08FA C0 04              2712 	push	ar4
                           2713 ;	genIpush
   08FC 74rFF              2714 	mov	a,#__str_60
   08FE C0 E0              2715 	push	acc
   0900 74s0A              2716 	mov	a,#(__str_60 >> 8)
   0902 C0 E0              2717 	push	acc
                           2718 ;	genCall
   0904 12s00r00           2719 	lcall	_printf_tiny
   0907 E5 81              2720 	mov	a,sp
   0909 24 FC              2721 	add	a,#0xfc
   090B F5 81              2722 	mov	sp,a
                           2723 ;	main.c:340: printf_tiny("\r\n");
                           2724 ;	genIpush
   090D 74r2B              2725 	mov	a,#__str_1
   090F C0 E0              2726 	push	acc
   0911 74s00              2727 	mov	a,#(__str_1 >> 8)
   0913 C0 E0              2728 	push	acc
                           2729 ;	genCall
   0915 12s00r00           2730 	lcall	_printf_tiny
   0918 15 81              2731 	dec	sp
   091A 15 81              2732 	dec	sp
                           2733 ;	main.c:341: flag2=0;
                           2734 ;	genAssign
   091C 90s00r35           2735 	mov	dptr,#_flag2
   091F E4                 2736 	clr	a
   0920 F0                 2737 	movx	@dptr,a
   0921 A3                 2738 	inc	dptr
   0922 F0                 2739 	movx	@dptr,a
   0923 02s09rD5           2740 	ljmp	00199$
   0926                    2741 00195$:
                           2742 ;	main.c:343: else if(icmd=='D')
                           2743 ;	genCmpEq
                           2744 ;	gencjneshort
                           2745 ;	Peephole 112.b	changed ljmp to sjmp
                           2746 ;	Peephole 198.b	optimized misc jump sequence
   0926 BA 44 1C           2747 	cjne	r2,#0x44,00192$
                           2748 ;	Peephole 200.b	removed redundant sjmp
                           2749 ;	Peephole 300	removed redundant label 00325$
                           2750 ;	Peephole 300	removed redundant label 00326$
                           2751 ;	main.c:345: printf_tiny("*********** I/O PORT PIN DIRECTION CHANGE **********\r\n");
                           2752 ;	genIpush
   0929 74r21              2753 	mov	a,#__str_61
   092B C0 E0              2754 	push	acc
   092D 74s0B              2755 	mov	a,#(__str_61 >> 8)
   092F C0 E0              2756 	push	acc
                           2757 ;	genCall
   0931 12s00r00           2758 	lcall	_printf_tiny
   0934 15 81              2759 	dec	sp
   0936 15 81              2760 	dec	sp
                           2761 ;	main.c:346: ioexp_dir(); //Function call to change the direction of the port pins
                           2762 ;	genCall
   0938 12s00r00           2763 	lcall	_ioexp_dir
                           2764 ;	main.c:347: flag2=0;
                           2765 ;	genAssign
   093B 90s00r35           2766 	mov	dptr,#_flag2
   093E E4                 2767 	clr	a
   093F F0                 2768 	movx	@dptr,a
   0940 A3                 2769 	inc	dptr
   0941 F0                 2770 	movx	@dptr,a
   0942 02s09rD5           2771 	ljmp	00199$
   0945                    2772 00192$:
                           2773 ;	main.c:349: else if(icmd=='C')
                           2774 ;	genCmpEq
                           2775 ;	gencjneshort
                           2776 ;	Peephole 112.b	changed ljmp to sjmp
                           2777 ;	Peephole 198.b	optimized misc jump sequence
   0945 BA 43 25           2778 	cjne	r2,#0x43,00189$
                           2779 ;	Peephole 200.b	removed redundant sjmp
                           2780 ;	Peephole 300	removed redundant label 00327$
                           2781 ;	Peephole 300	removed redundant label 00328$
                           2782 ;	main.c:351: printf_tiny("*********** I/O COUNTER RESET **********\r\n");
                           2783 ;	genIpush
   0948 74r58              2784 	mov	a,#__str_62
   094A C0 E0              2785 	push	acc
   094C 74s0B              2786 	mov	a,#(__str_62 >> 8)
   094E C0 E0              2787 	push	acc
                           2788 ;	genCall
   0950 12s00r00           2789 	lcall	_printf_tiny
   0953 15 81              2790 	dec	sp
   0955 15 81              2791 	dec	sp
                           2792 ;	main.c:352: io_counter=0;
                           2793 ;	genAssign
   0957 90s00r38           2794 	mov	dptr,#_io_counter
   095A E4                 2795 	clr	a
   095B F0                 2796 	movx	@dptr,a
   095C A3                 2797 	inc	dptr
   095D F0                 2798 	movx	@dptr,a
                           2799 ;	main.c:353: ioexp_count(io_counter); //Function call for the counter reset
                           2800 ;	genCall
                           2801 ;	Peephole 182.b	used 16 bit load of dptr
   095E 90 00 00           2802 	mov	dptr,#0x0000
   0961 12s00r00           2803 	lcall	_ioexp_count
                           2804 ;	main.c:354: flag2=0;
                           2805 ;	genAssign
   0964 90s00r35           2806 	mov	dptr,#_flag2
   0967 E4                 2807 	clr	a
   0968 F0                 2808 	movx	@dptr,a
   0969 A3                 2809 	inc	dptr
   096A F0                 2810 	movx	@dptr,a
                           2811 ;	Peephole 112.b	changed ljmp to sjmp
   096B 80 68              2812 	sjmp	00199$
   096D                    2813 00189$:
                           2814 ;	main.c:356: else if(icmd=='I')
                           2815 ;	genCmpEq
                           2816 ;	gencjneshort
                           2817 ;	Peephole 112.b	changed ljmp to sjmp
                           2818 ;	Peephole 198.b	optimized misc jump sequence
   096D BA 49 1B           2819 	cjne	r2,#0x49,00186$
                           2820 ;	Peephole 200.b	removed redundant sjmp
                           2821 ;	Peephole 300	removed redundant label 00329$
                           2822 ;	Peephole 300	removed redundant label 00330$
                           2823 ;	main.c:358: printf_tiny("*********** I/O DISPLAY DIRECTION STATUS **********\r\n");
                           2824 ;	genIpush
   0970 74r83              2825 	mov	a,#__str_63
   0972 C0 E0              2826 	push	acc
   0974 74s0B              2827 	mov	a,#(__str_63 >> 8)
   0976 C0 E0              2828 	push	acc
                           2829 ;	genCall
   0978 12s00r00           2830 	lcall	_printf_tiny
   097B 15 81              2831 	dec	sp
   097D 15 81              2832 	dec	sp
                           2833 ;	main.c:359: displaystatus(); //Function call to display the status of the direction of the port pins
                           2834 ;	genCall
   097F 12s12r30           2835 	lcall	_displaystatus
                           2836 ;	main.c:360: flag2=0;
                           2837 ;	genAssign
   0982 90s00r35           2838 	mov	dptr,#_flag2
   0985 E4                 2839 	clr	a
   0986 F0                 2840 	movx	@dptr,a
   0987 A3                 2841 	inc	dptr
   0988 F0                 2842 	movx	@dptr,a
                           2843 ;	Peephole 112.b	changed ljmp to sjmp
   0989 80 4A              2844 	sjmp	00199$
   098B                    2845 00186$:
                           2846 ;	main.c:362: else if(icmd=='S')
                           2847 ;	genCmpEq
                           2848 ;	gencjneshort
                           2849 ;	Peephole 112.b	changed ljmp to sjmp
                           2850 ;	Peephole 198.b	optimized misc jump sequence
   098B BA 53 1B           2851 	cjne	r2,#0x53,00183$
                           2852 ;	Peephole 200.b	removed redundant sjmp
                           2853 ;	Peephole 300	removed redundant label 00331$
                           2854 ;	Peephole 300	removed redundant label 00332$
                           2855 ;	main.c:364: printf_tiny("*********** I/O DISPLAY DATA STATUS **********\r\n");
                           2856 ;	genIpush
   098E 74rB9              2857 	mov	a,#__str_64
   0990 C0 E0              2858 	push	acc
   0992 74s0B              2859 	mov	a,#(__str_64 >> 8)
   0994 C0 E0              2860 	push	acc
                           2861 ;	genCall
   0996 12s00r00           2862 	lcall	_printf_tiny
   0999 15 81              2863 	dec	sp
   099B 15 81              2864 	dec	sp
                           2865 ;	main.c:365: displaydata(); //Function call to display the data on the port pins
                           2866 ;	genCall
   099D 12s12r92           2867 	lcall	_displaydata
                           2868 ;	main.c:366: flag2=0;
                           2869 ;	genAssign
   09A0 90s00r35           2870 	mov	dptr,#_flag2
   09A3 E4                 2871 	clr	a
   09A4 F0                 2872 	movx	@dptr,a
   09A5 A3                 2873 	inc	dptr
   09A6 F0                 2874 	movx	@dptr,a
                           2875 ;	Peephole 112.b	changed ljmp to sjmp
   09A7 80 2C              2876 	sjmp	00199$
   09A9                    2877 00183$:
                           2878 ;	main.c:368: else if(icmd=='M')
                           2879 ;	genCmpEq
                           2880 ;	gencjneshort
                           2881 ;	Peephole 112.b	changed ljmp to sjmp
                           2882 ;	Peephole 198.b	optimized misc jump sequence
   09A9 BA 4D 11           2883 	cjne	r2,#0x4D,00180$
                           2884 ;	Peephole 200.b	removed redundant sjmp
                           2885 ;	Peephole 300	removed redundant label 00333$
                           2886 ;	Peephole 300	removed redundant label 00334$
                           2887 ;	main.c:370: printf_tiny("********Back to Main Menu**********");
                           2888 ;	genIpush
   09AC 74r83              2889 	mov	a,#__str_37
   09AE C0 E0              2890 	push	acc
   09B0 74s06              2891 	mov	a,#(__str_37 >> 8)
   09B2 C0 E0              2892 	push	acc
                           2893 ;	genCall
   09B4 12s00r00           2894 	lcall	_printf_tiny
   09B7 15 81              2895 	dec	sp
   09B9 15 81              2896 	dec	sp
                           2897 ;	Peephole 112.b	changed ljmp to sjmp
   09BB 80 18              2898 	sjmp	00199$
   09BD                    2899 00180$:
                           2900 ;	main.c:374: printf_tiny("Please enter a valid command\r\n");
                           2901 ;	genIpush
   09BD 74rE8              2902 	mov	a,#__str_28
   09BF C0 E0              2903 	push	acc
   09C1 74s04              2904 	mov	a,#(__str_28 >> 8)
   09C3 C0 E0              2905 	push	acc
                           2906 ;	genCall
   09C5 12s00r00           2907 	lcall	_printf_tiny
   09C8 15 81              2908 	dec	sp
   09CA 15 81              2909 	dec	sp
                           2910 ;	main.c:375: flag2=1;
                           2911 ;	genAssign
   09CC 90s00r35           2912 	mov	dptr,#_flag2
   09CF 74 01              2913 	mov	a,#0x01
   09D1 F0                 2914 	movx	@dptr,a
   09D2 E4                 2915 	clr	a
   09D3 A3                 2916 	inc	dptr
   09D4 F0                 2917 	movx	@dptr,a
   09D5                    2918 00199$:
                           2919 ;	main.c:378: }while(flag2==1);
                           2920 ;	genAssign
   09D5 90s00r35           2921 	mov	dptr,#_flag2
   09D8 E0                 2922 	movx	a,@dptr
   09D9 FA                 2923 	mov	r2,a
   09DA A3                 2924 	inc	dptr
   09DB E0                 2925 	movx	a,@dptr
   09DC FB                 2926 	mov	r3,a
                           2927 ;	genCmpEq
                           2928 ;	gencjneshort
   09DD BA 01 06           2929 	cjne	r2,#0x01,00335$
   09E0 BB 00 03           2930 	cjne	r3,#0x00,00335$
   09E3 02s05r95           2931 	ljmp	00200$
   09E6                    2932 00335$:
   09E6 02s00r70           2933 	ljmp	00215$
   09E9                    2934 00204$:
                           2935 ;	main.c:382: printf_tiny("Enter a valid command\r\n");
                           2936 ;	genIpush
   09E9 74rEA              2937 	mov	a,#__str_65
   09EB C0 E0              2938 	push	acc
   09ED 74s0B              2939 	mov	a,#(__str_65 >> 8)
   09EF C0 E0              2940 	push	acc
                           2941 ;	genCall
   09F1 12s00r00           2942 	lcall	_printf_tiny
   09F4 15 81              2943 	dec	sp
   09F6 15 81              2944 	dec	sp
                           2945 ;	main.c:383: flag1=1;
                           2946 ;	genAssign
   09F8 90s00r33           2947 	mov	dptr,#_flag1
   09FB 74 01              2948 	mov	a,#0x01
   09FD F0                 2949 	movx	@dptr,a
   09FE E4                 2950 	clr	a
   09FF A3                 2951 	inc	dptr
   0A00 F0                 2952 	movx	@dptr,a
                           2953 ;	main.c:385: }while(flag1==1|ecmd=='M'|lcmd=='M'|ccmd=='M'|icmd=='M');
   0A01 02s00r70           2954 	ljmp	00215$
                           2955 ;	Peephole 259.b	removed redundant label 00221$ and ret
                           2956 ;
                           2957 ;------------------------------------------------------------
                           2958 ;Allocation info for local variables in function 'ewrite'
                           2959 ;------------------------------------------------------------
                           2960 ;------------------------------------------------------------
                           2961 ;	main.c:398: void ewrite()
                           2962 ;	-----------------------------------------
                           2963 ;	 function ewrite
                           2964 ;	-----------------------------------------
   0A04                    2965 _ewrite:
                           2966 ;	main.c:400: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           2967 ;	genIpush
   0A04 74r02              2968 	mov	a,#__str_66
   0A06 C0 E0              2969 	push	acc
   0A08 74s0C              2970 	mov	a,#(__str_66 >> 8)
   0A0A C0 E0              2971 	push	acc
                           2972 ;	genCall
   0A0C 12s00r00           2973 	lcall	_printf_tiny
   0A0F 15 81              2974 	dec	sp
   0A11 15 81              2975 	dec	sp
                           2976 ;	main.c:403: do{
   0A13                    2977 00104$:
                           2978 ;	main.c:404: flag=0;
                           2979 ;	genAssign
   0A13 90s00r31           2980 	mov	dptr,#_flag
   0A16 E4                 2981 	clr	a
   0A17 F0                 2982 	movx	@dptr,a
   0A18 A3                 2983 	inc	dptr
   0A19 F0                 2984 	movx	@dptr,a
                           2985 ;	main.c:405: wordaddress=getstr();
                           2986 ;	genCall
   0A1A 12s00r00           2987 	lcall	_getstr
   0A1D AA 82              2988 	mov	r2,dpl
   0A1F AB 83              2989 	mov	r3,dph
   0A21 AC F0              2990 	mov	r4,b
                           2991 ;	genAssign
   0A23 90s00r03           2992 	mov	dptr,#_wordaddress
   0A26 EA                 2993 	mov	a,r2
   0A27 F0                 2994 	movx	@dptr,a
   0A28 A3                 2995 	inc	dptr
   0A29 EB                 2996 	mov	a,r3
   0A2A F0                 2997 	movx	@dptr,a
   0A2B A3                 2998 	inc	dptr
   0A2C EC                 2999 	mov	a,r4
   0A2D F0                 3000 	movx	@dptr,a
                           3001 ;	main.c:406: printf_tiny("Address Entered is: ");
                           3002 ;	genIpush
   0A2E 74r3E              3003 	mov	a,#__str_67
   0A30 C0 E0              3004 	push	acc
   0A32 74s0C              3005 	mov	a,#(__str_67 >> 8)
   0A34 C0 E0              3006 	push	acc
                           3007 ;	genCall
   0A36 12s00r00           3008 	lcall	_printf_tiny
   0A39 15 81              3009 	dec	sp
   0A3B 15 81              3010 	dec	sp
                           3011 ;	main.c:407: putstr(wordaddress);
                           3012 ;	genAssign
   0A3D 90s00r03           3013 	mov	dptr,#_wordaddress
   0A40 E0                 3014 	movx	a,@dptr
   0A41 FA                 3015 	mov	r2,a
   0A42 A3                 3016 	inc	dptr
   0A43 E0                 3017 	movx	a,@dptr
   0A44 FB                 3018 	mov	r3,a
   0A45 A3                 3019 	inc	dptr
   0A46 E0                 3020 	movx	a,@dptr
   0A47 FC                 3021 	mov	r4,a
                           3022 ;	genCall
   0A48 8A 82              3023 	mov	dpl,r2
   0A4A 8B 83              3024 	mov	dph,r3
   0A4C 8C F0              3025 	mov	b,r4
   0A4E 12s00r00           3026 	lcall	_putstr
                           3027 ;	main.c:408: printf_tiny("\r\n");
                           3028 ;	genIpush
   0A51 74r2B              3029 	mov	a,#__str_1
   0A53 C0 E0              3030 	push	acc
   0A55 74s00              3031 	mov	a,#(__str_1 >> 8)
   0A57 C0 E0              3032 	push	acc
                           3033 ;	genCall
   0A59 12s00r00           3034 	lcall	_printf_tiny
   0A5C 15 81              3035 	dec	sp
   0A5E 15 81              3036 	dec	sp
                           3037 ;	main.c:409: wordadd_int = atoh(wordaddress);        // Get data from the user    //Convert that data into hex
                           3038 ;	genAssign
   0A60 90s00r03           3039 	mov	dptr,#_wordaddress
   0A63 E0                 3040 	movx	a,@dptr
   0A64 FA                 3041 	mov	r2,a
   0A65 A3                 3042 	inc	dptr
   0A66 E0                 3043 	movx	a,@dptr
   0A67 FB                 3044 	mov	r3,a
   0A68 A3                 3045 	inc	dptr
   0A69 E0                 3046 	movx	a,@dptr
   0A6A FC                 3047 	mov	r4,a
                           3048 ;	genCall
   0A6B 8A 82              3049 	mov	dpl,r2
   0A6D 8B 83              3050 	mov	dph,r3
   0A6F 8C F0              3051 	mov	b,r4
   0A71 12s00r00           3052 	lcall	_atoh
   0A74 AA 82              3053 	mov	r2,dpl
   0A76 AB 83              3054 	mov	r3,dph
                           3055 ;	genAssign
   0A78 90s00r25           3056 	mov	dptr,#_wordadd_int
   0A7B EA                 3057 	mov	a,r2
   0A7C F0                 3058 	movx	@dptr,a
   0A7D A3                 3059 	inc	dptr
   0A7E EB                 3060 	mov	a,r3
   0A7F F0                 3061 	movx	@dptr,a
                           3062 ;	main.c:410: if(wordadd_int<MAXADD)              // Check if address is in valid range
                           3063 ;	genCmpLt
                           3064 ;	genCmp
   0A80 C3                 3065 	clr	c
   0A81 EB                 3066 	mov	a,r3
   0A82 64 80              3067 	xrl	a,#0x80
   0A84 94 88              3068 	subb	a,#0x88
                           3069 ;	genIfxJump
                           3070 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0A86 50 0B              3071 	jnc	00102$
                           3072 ;	Peephole 300	removed redundant label 00121$
                           3073 ;	main.c:412: flag=1;
                           3074 ;	genAssign
   0A88 90s00r31           3075 	mov	dptr,#_flag
   0A8B 74 01              3076 	mov	a,#0x01
   0A8D F0                 3077 	movx	@dptr,a
   0A8E E4                 3078 	clr	a
   0A8F A3                 3079 	inc	dptr
   0A90 F0                 3080 	movx	@dptr,a
                           3081 ;	Peephole 112.b	changed ljmp to sjmp
   0A91 80 16              3082 	sjmp	00105$
   0A93                    3083 00102$:
                           3084 ;	main.c:416: flag=0;
                           3085 ;	genAssign
   0A93 90s00r31           3086 	mov	dptr,#_flag
   0A96 E4                 3087 	clr	a
   0A97 F0                 3088 	movx	@dptr,a
   0A98 A3                 3089 	inc	dptr
   0A99 F0                 3090 	movx	@dptr,a
                           3091 ;	main.c:417: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3092 ;	genIpush
   0A9A 74r53              3093 	mov	a,#__str_68
   0A9C C0 E0              3094 	push	acc
   0A9E 74s0C              3095 	mov	a,#(__str_68 >> 8)
   0AA0 C0 E0              3096 	push	acc
                           3097 ;	genCall
   0AA2 12s00r00           3098 	lcall	_printf_tiny
   0AA5 15 81              3099 	dec	sp
   0AA7 15 81              3100 	dec	sp
   0AA9                    3101 00105$:
                           3102 ;	main.c:419: }while(flag==0);
                           3103 ;	genAssign
   0AA9 90s00r31           3104 	mov	dptr,#_flag
   0AAC E0                 3105 	movx	a,@dptr
   0AAD FA                 3106 	mov	r2,a
   0AAE A3                 3107 	inc	dptr
   0AAF E0                 3108 	movx	a,@dptr
                           3109 ;	genIfx
   0AB0 FB                 3110 	mov	r3,a
                           3111 ;	Peephole 135	removed redundant mov
   0AB1 4A                 3112 	orl	a,r2
                           3113 ;	genIfxJump
   0AB2 70 03              3114 	jnz	00122$
   0AB4 02s0Ar13           3115 	ljmp	00104$
   0AB7                    3116 00122$:
                           3117 ;	main.c:420: printf_tiny("\n\n\r Enter Data in Hex in HH format between 00 to FF: ");
                           3118 ;	genIpush
   0AB7 74r94              3119 	mov	a,#__str_69
   0AB9 C0 E0              3120 	push	acc
   0ABB 74s0C              3121 	mov	a,#(__str_69 >> 8)
   0ABD C0 E0              3122 	push	acc
                           3123 ;	genCall
   0ABF 12s00r00           3124 	lcall	_printf_tiny
   0AC2 15 81              3125 	dec	sp
   0AC4 15 81              3126 	dec	sp
                           3127 ;	main.c:421: do{
   0AC6                    3128 00110$:
                           3129 ;	main.c:422: flag=0;
                           3130 ;	genAssign
   0AC6 90s00r31           3131 	mov	dptr,#_flag
   0AC9 E4                 3132 	clr	a
   0ACA F0                 3133 	movx	@dptr,a
   0ACB A3                 3134 	inc	dptr
   0ACC F0                 3135 	movx	@dptr,a
                           3136 ;	main.c:423: datastore=getstr();          // Get data from the user
                           3137 ;	genCall
   0ACD 12s00r00           3138 	lcall	_getstr
   0AD0 AA 82              3139 	mov	r2,dpl
   0AD2 AB 83              3140 	mov	r3,dph
   0AD4 AC F0              3141 	mov	r4,b
                           3142 ;	genAssign
   0AD6 90s00r06           3143 	mov	dptr,#_datastore
   0AD9 EA                 3144 	mov	a,r2
   0ADA F0                 3145 	movx	@dptr,a
   0ADB A3                 3146 	inc	dptr
   0ADC EB                 3147 	mov	a,r3
   0ADD F0                 3148 	movx	@dptr,a
   0ADE A3                 3149 	inc	dptr
   0ADF EC                 3150 	mov	a,r4
   0AE0 F0                 3151 	movx	@dptr,a
                           3152 ;	main.c:424: printf_tiny("Data Entered is: ");
                           3153 ;	genIpush
   0AE1 74rCA              3154 	mov	a,#__str_70
   0AE3 C0 E0              3155 	push	acc
   0AE5 74s0C              3156 	mov	a,#(__str_70 >> 8)
   0AE7 C0 E0              3157 	push	acc
                           3158 ;	genCall
   0AE9 12s00r00           3159 	lcall	_printf_tiny
   0AEC 15 81              3160 	dec	sp
   0AEE 15 81              3161 	dec	sp
                           3162 ;	main.c:425: putstr(datastore);
                           3163 ;	genAssign
   0AF0 90s00r06           3164 	mov	dptr,#_datastore
   0AF3 E0                 3165 	movx	a,@dptr
   0AF4 FA                 3166 	mov	r2,a
   0AF5 A3                 3167 	inc	dptr
   0AF6 E0                 3168 	movx	a,@dptr
   0AF7 FB                 3169 	mov	r3,a
   0AF8 A3                 3170 	inc	dptr
   0AF9 E0                 3171 	movx	a,@dptr
   0AFA FC                 3172 	mov	r4,a
                           3173 ;	genCall
   0AFB 8A 82              3174 	mov	dpl,r2
   0AFD 8B 83              3175 	mov	dph,r3
   0AFF 8C F0              3176 	mov	b,r4
   0B01 12s00r00           3177 	lcall	_putstr
                           3178 ;	main.c:426: printf_tiny("\r\n");
                           3179 ;	genIpush
   0B04 74r2B              3180 	mov	a,#__str_1
   0B06 C0 E0              3181 	push	acc
   0B08 74s00              3182 	mov	a,#(__str_1 >> 8)
   0B0A C0 E0              3183 	push	acc
                           3184 ;	genCall
   0B0C 12s00r00           3185 	lcall	_printf_tiny
   0B0F 15 81              3186 	dec	sp
   0B11 15 81              3187 	dec	sp
                           3188 ;	main.c:427: datastore_int = atoh_data(datastore);   //Convert that data into hex
                           3189 ;	genAssign
   0B13 90s00r06           3190 	mov	dptr,#_datastore
   0B16 E0                 3191 	movx	a,@dptr
   0B17 FA                 3192 	mov	r2,a
   0B18 A3                 3193 	inc	dptr
   0B19 E0                 3194 	movx	a,@dptr
   0B1A FB                 3195 	mov	r3,a
   0B1B A3                 3196 	inc	dptr
   0B1C E0                 3197 	movx	a,@dptr
   0B1D FC                 3198 	mov	r4,a
                           3199 ;	genCall
   0B1E 8A 82              3200 	mov	dpl,r2
   0B20 8B 83              3201 	mov	dph,r3
   0B22 8C F0              3202 	mov	b,r4
   0B24 12s00r00           3203 	lcall	_atoh_data
   0B27 AA 82              3204 	mov	r2,dpl
   0B29 AB 83              3205 	mov	r3,dph
                           3206 ;	genAssign
   0B2B 90s00r27           3207 	mov	dptr,#_datastore_int
   0B2E EA                 3208 	mov	a,r2
   0B2F F0                 3209 	movx	@dptr,a
   0B30 A3                 3210 	inc	dptr
   0B31 EB                 3211 	mov	a,r3
   0B32 F0                 3212 	movx	@dptr,a
                           3213 ;	main.c:428: if(datastore_int<MAXDATA)
                           3214 ;	genCmpLt
                           3215 ;	genCmp
   0B33 C3                 3216 	clr	c
   0B34 EB                 3217 	mov	a,r3
   0B35 64 80              3218 	xrl	a,#0x80
   0B37 94 81              3219 	subb	a,#0x81
                           3220 ;	genIfxJump
                           3221 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0B39 50 0B              3222 	jnc	00108$
                           3223 ;	Peephole 300	removed redundant label 00123$
                           3224 ;	main.c:430: flag=1;
                           3225 ;	genAssign
   0B3B 90s00r31           3226 	mov	dptr,#_flag
   0B3E 74 01              3227 	mov	a,#0x01
   0B40 F0                 3228 	movx	@dptr,a
   0B41 E4                 3229 	clr	a
   0B42 A3                 3230 	inc	dptr
   0B43 F0                 3231 	movx	@dptr,a
                           3232 ;	Peephole 112.b	changed ljmp to sjmp
   0B44 80 0F              3233 	sjmp	00111$
   0B46                    3234 00108$:
                           3235 ;	main.c:435: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid data in Hex in HH format between 00 to FF\r\n");
                           3236 ;	genIpush
   0B46 74rDC              3237 	mov	a,#__str_71
   0B48 C0 E0              3238 	push	acc
   0B4A 74s0C              3239 	mov	a,#(__str_71 >> 8)
   0B4C C0 E0              3240 	push	acc
                           3241 ;	genCall
   0B4E 12s00r00           3242 	lcall	_printf_tiny
   0B51 15 81              3243 	dec	sp
   0B53 15 81              3244 	dec	sp
   0B55                    3245 00111$:
                           3246 ;	main.c:437: }while(flag==0);
                           3247 ;	genAssign
   0B55 90s00r31           3248 	mov	dptr,#_flag
   0B58 E0                 3249 	movx	a,@dptr
   0B59 FA                 3250 	mov	r2,a
   0B5A A3                 3251 	inc	dptr
   0B5B E0                 3252 	movx	a,@dptr
                           3253 ;	genIfx
   0B5C FB                 3254 	mov	r3,a
                           3255 ;	Peephole 135	removed redundant mov
   0B5D 4A                 3256 	orl	a,r2
                           3257 ;	genIfxJump
   0B5E 70 03              3258 	jnz	00124$
   0B60 02s0ArC6           3259 	ljmp	00110$
   0B63                    3260 00124$:
                           3261 ;	main.c:438: EEPROM_WriteByte(wordadd_int,datastore_int); //Function call to write to the EEPROM
                           3262 ;	genAssign
   0B63 90s00r25           3263 	mov	dptr,#_wordadd_int
   0B66 E0                 3264 	movx	a,@dptr
   0B67 FA                 3265 	mov	r2,a
   0B68 A3                 3266 	inc	dptr
   0B69 E0                 3267 	movx	a,@dptr
   0B6A FB                 3268 	mov	r3,a
                           3269 ;	genAssign
   0B6B 90s00r27           3270 	mov	dptr,#_datastore_int
   0B6E E0                 3271 	movx	a,@dptr
   0B6F FC                 3272 	mov	r4,a
   0B70 A3                 3273 	inc	dptr
   0B71 E0                 3274 	movx	a,@dptr
   0B72 FD                 3275 	mov	r5,a
                           3276 ;	genCast
   0B73 90s00r00           3277 	mov	dptr,#_EEPROM_WriteByte_PARM_2
   0B76 EC                 3278 	mov	a,r4
   0B77 F0                 3279 	movx	@dptr,a
                           3280 ;	genCall
   0B78 8A 82              3281 	mov	dpl,r2
   0B7A 8B 83              3282 	mov	dph,r3
   0B7C 12s00r00           3283 	lcall	_EEPROM_WriteByte
                           3284 ;	main.c:439: rd=EEPROM_ReadByte(wordadd_int); //Function call to read from the EEPROM
                           3285 ;	genAssign
   0B7F 90s00r25           3286 	mov	dptr,#_wordadd_int
   0B82 E0                 3287 	movx	a,@dptr
   0B83 FA                 3288 	mov	r2,a
   0B84 A3                 3289 	inc	dptr
   0B85 E0                 3290 	movx	a,@dptr
   0B86 FB                 3291 	mov	r3,a
                           3292 ;	genCall
   0B87 8A 82              3293 	mov	dpl,r2
   0B89 8B 83              3294 	mov	dph,r3
   0B8B 12s00r00           3295 	lcall	_EEPROM_ReadByte
   0B8E AA 82              3296 	mov	r2,dpl
                           3297 ;	genAssign
   0B90 90s00r0F           3298 	mov	dptr,#_rd
   0B93 EA                 3299 	mov	a,r2
   0B94 F0                 3300 	movx	@dptr,a
                           3301 ;	main.c:440: printf_tiny("The byte in the specified address is %x\r\n",rd);
                           3302 ;	genAssign
                           3303 ;	genCast
   0B95 EA                 3304 	mov	a,r2
   0B96 33                 3305 	rlc	a
   0B97 95 E0              3306 	subb	a,acc
   0B99 FB                 3307 	mov	r3,a
                           3308 ;	genIpush
   0B9A C0 02              3309 	push	ar2
   0B9C C0 03              3310 	push	ar3
                           3311 ;	genIpush
   0B9E 74r2A              3312 	mov	a,#__str_72
   0BA0 C0 E0              3313 	push	acc
   0BA2 74s0D              3314 	mov	a,#(__str_72 >> 8)
   0BA4 C0 E0              3315 	push	acc
                           3316 ;	genCall
   0BA6 12s00r00           3317 	lcall	_printf_tiny
   0BA9 E5 81              3318 	mov	a,sp
   0BAB 24 FC              3319 	add	a,#0xfc
   0BAD F5 81              3320 	mov	sp,a
                           3321 ;	Peephole 300	removed redundant label 00113$
   0BAF 22                 3322 	ret
                           3323 ;------------------------------------------------------------
                           3324 ;Allocation info for local variables in function 'eread'
                           3325 ;------------------------------------------------------------
                           3326 ;------------------------------------------------------------
                           3327 ;	main.c:450: void eread()
                           3328 ;	-----------------------------------------
                           3329 ;	 function eread
                           3330 ;	-----------------------------------------
   0BB0                    3331 _eread:
                           3332 ;	main.c:452: printf_tiny("\n\n\r Enter Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3333 ;	genIpush
   0BB0 74r02              3334 	mov	a,#__str_66
   0BB2 C0 E0              3335 	push	acc
   0BB4 74s0C              3336 	mov	a,#(__str_66 >> 8)
   0BB6 C0 E0              3337 	push	acc
                           3338 ;	genCall
   0BB8 12s00r00           3339 	lcall	_printf_tiny
   0BBB 15 81              3340 	dec	sp
   0BBD 15 81              3341 	dec	sp
                           3342 ;	main.c:455: do{
   0BBF                    3343 00104$:
                           3344 ;	main.c:456: flag=0;
                           3345 ;	genAssign
   0BBF 90s00r31           3346 	mov	dptr,#_flag
   0BC2 E4                 3347 	clr	a
   0BC3 F0                 3348 	movx	@dptr,a
   0BC4 A3                 3349 	inc	dptr
   0BC5 F0                 3350 	movx	@dptr,a
                           3351 ;	main.c:457: wordaddress=getstr(); //Get address from the user
                           3352 ;	genCall
   0BC6 12s00r00           3353 	lcall	_getstr
   0BC9 AA 82              3354 	mov	r2,dpl
   0BCB AB 83              3355 	mov	r3,dph
   0BCD AC F0              3356 	mov	r4,b
                           3357 ;	genAssign
   0BCF 90s00r03           3358 	mov	dptr,#_wordaddress
   0BD2 EA                 3359 	mov	a,r2
   0BD3 F0                 3360 	movx	@dptr,a
   0BD4 A3                 3361 	inc	dptr
   0BD5 EB                 3362 	mov	a,r3
   0BD6 F0                 3363 	movx	@dptr,a
   0BD7 A3                 3364 	inc	dptr
   0BD8 EC                 3365 	mov	a,r4
   0BD9 F0                 3366 	movx	@dptr,a
                           3367 ;	main.c:458: printf_tiny("Address Entered is: ");
                           3368 ;	genIpush
   0BDA 74r3E              3369 	mov	a,#__str_67
   0BDC C0 E0              3370 	push	acc
   0BDE 74s0C              3371 	mov	a,#(__str_67 >> 8)
   0BE0 C0 E0              3372 	push	acc
                           3373 ;	genCall
   0BE2 12s00r00           3374 	lcall	_printf_tiny
   0BE5 15 81              3375 	dec	sp
   0BE7 15 81              3376 	dec	sp
                           3377 ;	main.c:459: putstr(wordaddress);
                           3378 ;	genAssign
   0BE9 90s00r03           3379 	mov	dptr,#_wordaddress
   0BEC E0                 3380 	movx	a,@dptr
   0BED FA                 3381 	mov	r2,a
   0BEE A3                 3382 	inc	dptr
   0BEF E0                 3383 	movx	a,@dptr
   0BF0 FB                 3384 	mov	r3,a
   0BF1 A3                 3385 	inc	dptr
   0BF2 E0                 3386 	movx	a,@dptr
   0BF3 FC                 3387 	mov	r4,a
                           3388 ;	genCall
   0BF4 8A 82              3389 	mov	dpl,r2
   0BF6 8B 83              3390 	mov	dph,r3
   0BF8 8C F0              3391 	mov	b,r4
   0BFA 12s00r00           3392 	lcall	_putstr
                           3393 ;	main.c:460: printf_tiny("\r\n");
                           3394 ;	genIpush
   0BFD 74r2B              3395 	mov	a,#__str_1
   0BFF C0 E0              3396 	push	acc
   0C01 74s00              3397 	mov	a,#(__str_1 >> 8)
   0C03 C0 E0              3398 	push	acc
                           3399 ;	genCall
   0C05 12s00r00           3400 	lcall	_printf_tiny
   0C08 15 81              3401 	dec	sp
   0C0A 15 81              3402 	dec	sp
                           3403 ;	main.c:461: wordadd_int = atoh(wordaddress);        // Get data from the user    //Convert that data into hex
                           3404 ;	genAssign
   0C0C 90s00r03           3405 	mov	dptr,#_wordaddress
   0C0F E0                 3406 	movx	a,@dptr
   0C10 FA                 3407 	mov	r2,a
   0C11 A3                 3408 	inc	dptr
   0C12 E0                 3409 	movx	a,@dptr
   0C13 FB                 3410 	mov	r3,a
   0C14 A3                 3411 	inc	dptr
   0C15 E0                 3412 	movx	a,@dptr
   0C16 FC                 3413 	mov	r4,a
                           3414 ;	genCall
   0C17 8A 82              3415 	mov	dpl,r2
   0C19 8B 83              3416 	mov	dph,r3
   0C1B 8C F0              3417 	mov	b,r4
   0C1D 12s00r00           3418 	lcall	_atoh
   0C20 AA 82              3419 	mov	r2,dpl
   0C22 AB 83              3420 	mov	r3,dph
                           3421 ;	genAssign
   0C24 90s00r25           3422 	mov	dptr,#_wordadd_int
   0C27 EA                 3423 	mov	a,r2
   0C28 F0                 3424 	movx	@dptr,a
   0C29 A3                 3425 	inc	dptr
   0C2A EB                 3426 	mov	a,r3
   0C2B F0                 3427 	movx	@dptr,a
                           3428 ;	main.c:462: if(wordadd_int<MAXADD)              // Check if address is in valid range
                           3429 ;	genCmpLt
                           3430 ;	genCmp
   0C2C C3                 3431 	clr	c
   0C2D EB                 3432 	mov	a,r3
   0C2E 64 80              3433 	xrl	a,#0x80
   0C30 94 88              3434 	subb	a,#0x88
                           3435 ;	genIfxJump
                           3436 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0C32 50 0B              3437 	jnc	00102$
                           3438 ;	Peephole 300	removed redundant label 00112$
                           3439 ;	main.c:464: flag=1;
                           3440 ;	genAssign
   0C34 90s00r31           3441 	mov	dptr,#_flag
   0C37 74 01              3442 	mov	a,#0x01
   0C39 F0                 3443 	movx	@dptr,a
   0C3A E4                 3444 	clr	a
   0C3B A3                 3445 	inc	dptr
   0C3C F0                 3446 	movx	@dptr,a
                           3447 ;	Peephole 112.b	changed ljmp to sjmp
   0C3D 80 16              3448 	sjmp	00105$
   0C3F                    3449 00102$:
                           3450 ;	main.c:468: flag=0;
                           3451 ;	genAssign
   0C3F 90s00r31           3452 	mov	dptr,#_flag
   0C42 E4                 3453 	clr	a
   0C43 F0                 3454 	movx	@dptr,a
   0C44 A3                 3455 	inc	dptr
   0C45 F0                 3456 	movx	@dptr,a
                           3457 ;	main.c:469: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3458 ;	genIpush
   0C46 74r53              3459 	mov	a,#__str_68
   0C48 C0 E0              3460 	push	acc
   0C4A 74s0C              3461 	mov	a,#(__str_68 >> 8)
   0C4C C0 E0              3462 	push	acc
                           3463 ;	genCall
   0C4E 12s00r00           3464 	lcall	_printf_tiny
   0C51 15 81              3465 	dec	sp
   0C53 15 81              3466 	dec	sp
   0C55                    3467 00105$:
                           3468 ;	main.c:471: }while(flag==0);
                           3469 ;	genAssign
   0C55 90s00r31           3470 	mov	dptr,#_flag
   0C58 E0                 3471 	movx	a,@dptr
   0C59 FA                 3472 	mov	r2,a
   0C5A A3                 3473 	inc	dptr
   0C5B E0                 3474 	movx	a,@dptr
                           3475 ;	genIfx
   0C5C FB                 3476 	mov	r3,a
                           3477 ;	Peephole 135	removed redundant mov
   0C5D 4A                 3478 	orl	a,r2
                           3479 ;	genIfxJump
   0C5E 70 03              3480 	jnz	00113$
   0C60 02s0BrBF           3481 	ljmp	00104$
   0C63                    3482 00113$:
                           3483 ;	main.c:472: rd=EEPROM_ReadByte(wordadd_int); //Function call to read from EEPROM
                           3484 ;	genAssign
   0C63 90s00r25           3485 	mov	dptr,#_wordadd_int
   0C66 E0                 3486 	movx	a,@dptr
   0C67 FA                 3487 	mov	r2,a
   0C68 A3                 3488 	inc	dptr
   0C69 E0                 3489 	movx	a,@dptr
   0C6A FB                 3490 	mov	r3,a
                           3491 ;	genCall
   0C6B 8A 82              3492 	mov	dpl,r2
   0C6D 8B 83              3493 	mov	dph,r3
   0C6F 12s00r00           3494 	lcall	_EEPROM_ReadByte
   0C72 AA 82              3495 	mov	r2,dpl
                           3496 ;	genAssign
   0C74 90s00r0F           3497 	mov	dptr,#_rd
   0C77 EA                 3498 	mov	a,r2
   0C78 F0                 3499 	movx	@dptr,a
                           3500 ;	main.c:473: printf("%03X: %02X\r\n",wordadd_int,rd);
                           3501 ;	genAssign
                           3502 ;	genCast
   0C79 EA                 3503 	mov	a,r2
   0C7A 33                 3504 	rlc	a
   0C7B 95 E0              3505 	subb	a,acc
   0C7D FB                 3506 	mov	r3,a
                           3507 ;	genIpush
   0C7E C0 02              3508 	push	ar2
   0C80 C0 03              3509 	push	ar3
                           3510 ;	genIpush
   0C82 90s00r25           3511 	mov	dptr,#_wordadd_int
   0C85 E0                 3512 	movx	a,@dptr
   0C86 C0 E0              3513 	push	acc
   0C88 A3                 3514 	inc	dptr
   0C89 E0                 3515 	movx	a,@dptr
   0C8A C0 E0              3516 	push	acc
                           3517 ;	genIpush
   0C8C 74r54              3518 	mov	a,#__str_73
   0C8E C0 E0              3519 	push	acc
   0C90 74s0D              3520 	mov	a,#(__str_73 >> 8)
   0C92 C0 E0              3521 	push	acc
   0C94 74 80              3522 	mov	a,#0x80
   0C96 C0 E0              3523 	push	acc
                           3524 ;	genCall
   0C98 12s00r00           3525 	lcall	_printf
   0C9B E5 81              3526 	mov	a,sp
   0C9D 24 F9              3527 	add	a,#0xf9
   0C9F F5 81              3528 	mov	sp,a
                           3529 ;	Peephole 300	removed redundant label 00107$
   0CA1 22                 3530 	ret
                           3531 ;------------------------------------------------------------
                           3532 ;Allocation info for local variables in function 'eseqread'
                           3533 ;------------------------------------------------------------
                           3534 ;------------------------------------------------------------
                           3535 ;	main.c:484: void eseqread()
                           3536 ;	-----------------------------------------
                           3537 ;	 function eseqread
                           3538 ;	-----------------------------------------
   0CA2                    3539 _eseqread:
                           3540 ;	main.c:486: printf_tiny("\n\n\r Enter start Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3541 ;	genIpush
   0CA2 74r61              3542 	mov	a,#__str_74
   0CA4 C0 E0              3543 	push	acc
   0CA6 74s0D              3544 	mov	a,#(__str_74 >> 8)
   0CA8 C0 E0              3545 	push	acc
                           3546 ;	genCall
   0CAA 12s00r00           3547 	lcall	_printf_tiny
   0CAD 15 81              3548 	dec	sp
   0CAF 15 81              3549 	dec	sp
                           3550 ;	main.c:489: do{
   0CB1                    3551 00104$:
                           3552 ;	main.c:490: flag=0;
                           3553 ;	genAssign
   0CB1 90s00r31           3554 	mov	dptr,#_flag
   0CB4 E4                 3555 	clr	a
   0CB5 F0                 3556 	movx	@dptr,a
   0CB6 A3                 3557 	inc	dptr
   0CB7 F0                 3558 	movx	@dptr,a
                           3559 ;	main.c:491: start_address=getstr(); //Get start address from the user
                           3560 ;	genCall
   0CB8 12s00r00           3561 	lcall	_getstr
   0CBB AA 82              3562 	mov	r2,dpl
   0CBD AB 83              3563 	mov	r3,dph
   0CBF AC F0              3564 	mov	r4,b
                           3565 ;	genAssign
   0CC1 90s00r09           3566 	mov	dptr,#_start_address
   0CC4 EA                 3567 	mov	a,r2
   0CC5 F0                 3568 	movx	@dptr,a
   0CC6 A3                 3569 	inc	dptr
   0CC7 EB                 3570 	mov	a,r3
   0CC8 F0                 3571 	movx	@dptr,a
   0CC9 A3                 3572 	inc	dptr
   0CCA EC                 3573 	mov	a,r4
   0CCB F0                 3574 	movx	@dptr,a
                           3575 ;	main.c:492: printf_tiny("Address Entered is: ");
                           3576 ;	genIpush
   0CCC 74r3E              3577 	mov	a,#__str_67
   0CCE C0 E0              3578 	push	acc
   0CD0 74s0C              3579 	mov	a,#(__str_67 >> 8)
   0CD2 C0 E0              3580 	push	acc
                           3581 ;	genCall
   0CD4 12s00r00           3582 	lcall	_printf_tiny
   0CD7 15 81              3583 	dec	sp
   0CD9 15 81              3584 	dec	sp
                           3585 ;	main.c:493: putstr(start_address);
                           3586 ;	genAssign
   0CDB 90s00r09           3587 	mov	dptr,#_start_address
   0CDE E0                 3588 	movx	a,@dptr
   0CDF FA                 3589 	mov	r2,a
   0CE0 A3                 3590 	inc	dptr
   0CE1 E0                 3591 	movx	a,@dptr
   0CE2 FB                 3592 	mov	r3,a
   0CE3 A3                 3593 	inc	dptr
   0CE4 E0                 3594 	movx	a,@dptr
   0CE5 FC                 3595 	mov	r4,a
                           3596 ;	genCall
   0CE6 8A 82              3597 	mov	dpl,r2
   0CE8 8B 83              3598 	mov	dph,r3
   0CEA 8C F0              3599 	mov	b,r4
   0CEC 12s00r00           3600 	lcall	_putstr
                           3601 ;	main.c:494: printf_tiny("\r\n");
                           3602 ;	genIpush
   0CEF 74r2B              3603 	mov	a,#__str_1
   0CF1 C0 E0              3604 	push	acc
   0CF3 74s00              3605 	mov	a,#(__str_1 >> 8)
   0CF5 C0 E0              3606 	push	acc
                           3607 ;	genCall
   0CF7 12s00r00           3608 	lcall	_printf_tiny
   0CFA 15 81              3609 	dec	sp
   0CFC 15 81              3610 	dec	sp
                           3611 ;	main.c:495: startadd_int = atoh(start_address);        // Get data from the user    //Convert that data into hex
                           3612 ;	genAssign
   0CFE 90s00r09           3613 	mov	dptr,#_start_address
   0D01 E0                 3614 	movx	a,@dptr
   0D02 FA                 3615 	mov	r2,a
   0D03 A3                 3616 	inc	dptr
   0D04 E0                 3617 	movx	a,@dptr
   0D05 FB                 3618 	mov	r3,a
   0D06 A3                 3619 	inc	dptr
   0D07 E0                 3620 	movx	a,@dptr
   0D08 FC                 3621 	mov	r4,a
                           3622 ;	genCall
   0D09 8A 82              3623 	mov	dpl,r2
   0D0B 8B 83              3624 	mov	dph,r3
   0D0D 8C F0              3625 	mov	b,r4
   0D0F 12s00r00           3626 	lcall	_atoh
   0D12 AA 82              3627 	mov	r2,dpl
   0D14 AB 83              3628 	mov	r3,dph
                           3629 ;	genAssign
   0D16 90s00r29           3630 	mov	dptr,#_startadd_int
   0D19 EA                 3631 	mov	a,r2
   0D1A F0                 3632 	movx	@dptr,a
   0D1B A3                 3633 	inc	dptr
   0D1C EB                 3634 	mov	a,r3
   0D1D F0                 3635 	movx	@dptr,a
                           3636 ;	main.c:496: if(startadd_int<MAXADD)              // Check if address is in valid range
                           3637 ;	genCmpLt
                           3638 ;	genCmp
   0D1E C3                 3639 	clr	c
   0D1F EB                 3640 	mov	a,r3
   0D20 64 80              3641 	xrl	a,#0x80
   0D22 94 88              3642 	subb	a,#0x88
                           3643 ;	genIfxJump
                           3644 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D24 50 0B              3645 	jnc	00102$
                           3646 ;	Peephole 300	removed redundant label 00125$
                           3647 ;	main.c:498: flag=1;
                           3648 ;	genAssign
   0D26 90s00r31           3649 	mov	dptr,#_flag
   0D29 74 01              3650 	mov	a,#0x01
   0D2B F0                 3651 	movx	@dptr,a
   0D2C E4                 3652 	clr	a
   0D2D A3                 3653 	inc	dptr
   0D2E F0                 3654 	movx	@dptr,a
                           3655 ;	Peephole 112.b	changed ljmp to sjmp
   0D2F 80 16              3656 	sjmp	00105$
   0D31                    3657 00102$:
                           3658 ;	main.c:502: flag=0;
                           3659 ;	genAssign
   0D31 90s00r31           3660 	mov	dptr,#_flag
   0D34 E4                 3661 	clr	a
   0D35 F0                 3662 	movx	@dptr,a
   0D36 A3                 3663 	inc	dptr
   0D37 F0                 3664 	movx	@dptr,a
                           3665 ;	main.c:503: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3666 ;	genIpush
   0D38 74r53              3667 	mov	a,#__str_68
   0D3A C0 E0              3668 	push	acc
   0D3C 74s0C              3669 	mov	a,#(__str_68 >> 8)
   0D3E C0 E0              3670 	push	acc
                           3671 ;	genCall
   0D40 12s00r00           3672 	lcall	_printf_tiny
   0D43 15 81              3673 	dec	sp
   0D45 15 81              3674 	dec	sp
   0D47                    3675 00105$:
                           3676 ;	main.c:505: }while(flag==0);
                           3677 ;	genAssign
   0D47 90s00r31           3678 	mov	dptr,#_flag
   0D4A E0                 3679 	movx	a,@dptr
   0D4B FA                 3680 	mov	r2,a
   0D4C A3                 3681 	inc	dptr
   0D4D E0                 3682 	movx	a,@dptr
                           3683 ;	genIfx
   0D4E FB                 3684 	mov	r3,a
                           3685 ;	Peephole 135	removed redundant mov
   0D4F 4A                 3686 	orl	a,r2
                           3687 ;	genIfxJump
   0D50 70 03              3688 	jnz	00126$
   0D52 02s0CrB1           3689 	ljmp	00104$
   0D55                    3690 00126$:
                           3691 ;	main.c:507: printf_tiny("\n\n\r Enter end Address in Hex in HHH format between 000 to 7FF\r\n");  // Prompt user to input address in the specified range
                           3692 ;	genIpush
   0D55 74rA3              3693 	mov	a,#__str_75
   0D57 C0 E0              3694 	push	acc
   0D59 74s0D              3695 	mov	a,#(__str_75 >> 8)
   0D5B C0 E0              3696 	push	acc
                           3697 ;	genCall
   0D5D 12s00r00           3698 	lcall	_printf_tiny
   0D60 15 81              3699 	dec	sp
   0D62 15 81              3700 	dec	sp
                           3701 ;	main.c:510: do{
   0D64                    3702 00110$:
                           3703 ;	main.c:511: flag=0;
                           3704 ;	genAssign
   0D64 90s00r31           3705 	mov	dptr,#_flag
   0D67 E4                 3706 	clr	a
   0D68 F0                 3707 	movx	@dptr,a
   0D69 A3                 3708 	inc	dptr
   0D6A F0                 3709 	movx	@dptr,a
                           3710 ;	main.c:512: end_address=getstr(); //Get end address from the user
                           3711 ;	genCall
   0D6B 12s00r00           3712 	lcall	_getstr
   0D6E AA 82              3713 	mov	r2,dpl
   0D70 AB 83              3714 	mov	r3,dph
   0D72 AC F0              3715 	mov	r4,b
                           3716 ;	genAssign
   0D74 90s00r0C           3717 	mov	dptr,#_end_address
   0D77 EA                 3718 	mov	a,r2
   0D78 F0                 3719 	movx	@dptr,a
   0D79 A3                 3720 	inc	dptr
   0D7A EB                 3721 	mov	a,r3
   0D7B F0                 3722 	movx	@dptr,a
   0D7C A3                 3723 	inc	dptr
   0D7D EC                 3724 	mov	a,r4
   0D7E F0                 3725 	movx	@dptr,a
                           3726 ;	main.c:513: printf_tiny("Address Entered is: ");
                           3727 ;	genIpush
   0D7F 74r3E              3728 	mov	a,#__str_67
   0D81 C0 E0              3729 	push	acc
   0D83 74s0C              3730 	mov	a,#(__str_67 >> 8)
   0D85 C0 E0              3731 	push	acc
                           3732 ;	genCall
   0D87 12s00r00           3733 	lcall	_printf_tiny
   0D8A 15 81              3734 	dec	sp
   0D8C 15 81              3735 	dec	sp
                           3736 ;	main.c:514: putstr(end_address);
                           3737 ;	genAssign
   0D8E 90s00r0C           3738 	mov	dptr,#_end_address
   0D91 E0                 3739 	movx	a,@dptr
   0D92 FA                 3740 	mov	r2,a
   0D93 A3                 3741 	inc	dptr
   0D94 E0                 3742 	movx	a,@dptr
   0D95 FB                 3743 	mov	r3,a
   0D96 A3                 3744 	inc	dptr
   0D97 E0                 3745 	movx	a,@dptr
   0D98 FC                 3746 	mov	r4,a
                           3747 ;	genCall
   0D99 8A 82              3748 	mov	dpl,r2
   0D9B 8B 83              3749 	mov	dph,r3
   0D9D 8C F0              3750 	mov	b,r4
   0D9F 12s00r00           3751 	lcall	_putstr
                           3752 ;	main.c:515: printf_tiny("\r\n");
                           3753 ;	genIpush
   0DA2 74r2B              3754 	mov	a,#__str_1
   0DA4 C0 E0              3755 	push	acc
   0DA6 74s00              3756 	mov	a,#(__str_1 >> 8)
   0DA8 C0 E0              3757 	push	acc
                           3758 ;	genCall
   0DAA 12s00r00           3759 	lcall	_printf_tiny
   0DAD 15 81              3760 	dec	sp
   0DAF 15 81              3761 	dec	sp
                           3762 ;	main.c:516: endadd_int = atoh(end_address);        // Get data from the user    //Convert that data into hex
                           3763 ;	genAssign
   0DB1 90s00r0C           3764 	mov	dptr,#_end_address
   0DB4 E0                 3765 	movx	a,@dptr
   0DB5 FA                 3766 	mov	r2,a
   0DB6 A3                 3767 	inc	dptr
   0DB7 E0                 3768 	movx	a,@dptr
   0DB8 FB                 3769 	mov	r3,a
   0DB9 A3                 3770 	inc	dptr
   0DBA E0                 3771 	movx	a,@dptr
   0DBB FC                 3772 	mov	r4,a
                           3773 ;	genCall
   0DBC 8A 82              3774 	mov	dpl,r2
   0DBE 8B 83              3775 	mov	dph,r3
   0DC0 8C F0              3776 	mov	b,r4
   0DC2 12s00r00           3777 	lcall	_atoh
   0DC5 AA 82              3778 	mov	r2,dpl
   0DC7 AB 83              3779 	mov	r3,dph
                           3780 ;	genAssign
   0DC9 90s00r2B           3781 	mov	dptr,#_endadd_int
   0DCC EA                 3782 	mov	a,r2
   0DCD F0                 3783 	movx	@dptr,a
   0DCE A3                 3784 	inc	dptr
   0DCF EB                 3785 	mov	a,r3
   0DD0 F0                 3786 	movx	@dptr,a
                           3787 ;	main.c:517: if(endadd_int<MAXADD)              // Check if address is in valid range
                           3788 ;	genCmpLt
                           3789 ;	genCmp
   0DD1 C3                 3790 	clr	c
   0DD2 EB                 3791 	mov	a,r3
   0DD3 64 80              3792 	xrl	a,#0x80
   0DD5 94 88              3793 	subb	a,#0x88
                           3794 ;	genIfxJump
                           3795 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0DD7 50 0B              3796 	jnc	00108$
                           3797 ;	Peephole 300	removed redundant label 00127$
                           3798 ;	main.c:519: flag=1;
                           3799 ;	genAssign
   0DD9 90s00r31           3800 	mov	dptr,#_flag
   0DDC 74 01              3801 	mov	a,#0x01
   0DDE F0                 3802 	movx	@dptr,a
   0DDF E4                 3803 	clr	a
   0DE0 A3                 3804 	inc	dptr
   0DE1 F0                 3805 	movx	@dptr,a
                           3806 ;	Peephole 112.b	changed ljmp to sjmp
   0DE2 80 16              3807 	sjmp	00111$
   0DE4                    3808 00108$:
                           3809 ;	main.c:523: flag=0;
                           3810 ;	genAssign
   0DE4 90s00r31           3811 	mov	dptr,#_flag
   0DE7 E4                 3812 	clr	a
   0DE8 F0                 3813 	movx	@dptr,a
   0DE9 A3                 3814 	inc	dptr
   0DEA F0                 3815 	movx	@dptr,a
                           3816 ;	main.c:524: printf_tiny("\n\n\r *-ERROR-*\t Please Enter valid Address between 000 and 7FF\r\n ");
                           3817 ;	genIpush
   0DEB 74r53              3818 	mov	a,#__str_68
   0DED C0 E0              3819 	push	acc
   0DEF 74s0C              3820 	mov	a,#(__str_68 >> 8)
   0DF1 C0 E0              3821 	push	acc
                           3822 ;	genCall
   0DF3 12s00r00           3823 	lcall	_printf_tiny
   0DF6 15 81              3824 	dec	sp
   0DF8 15 81              3825 	dec	sp
   0DFA                    3826 00111$:
                           3827 ;	main.c:526: }while(flag==0);
                           3828 ;	genAssign
   0DFA 90s00r31           3829 	mov	dptr,#_flag
   0DFD E0                 3830 	movx	a,@dptr
   0DFE FA                 3831 	mov	r2,a
   0DFF A3                 3832 	inc	dptr
   0E00 E0                 3833 	movx	a,@dptr
                           3834 ;	genIfx
   0E01 FB                 3835 	mov	r3,a
                           3836 ;	Peephole 135	removed redundant mov
   0E02 4A                 3837 	orl	a,r2
                           3838 ;	genIfxJump
   0E03 70 03              3839 	jnz	00128$
   0E05 02s0Dr64           3840 	ljmp	00110$
   0E08                    3841 00128$:
                           3842 ;	main.c:528: bytelen=(endadd_int-startadd_int)+1; //Calculate number of bytes
                           3843 ;	genAssign
   0E08 90s00r29           3844 	mov	dptr,#_startadd_int
   0E0B E0                 3845 	movx	a,@dptr
   0E0C FA                 3846 	mov	r2,a
   0E0D A3                 3847 	inc	dptr
   0E0E E0                 3848 	movx	a,@dptr
   0E0F FB                 3849 	mov	r3,a
                           3850 ;	genAssign
   0E10 90s00r2B           3851 	mov	dptr,#_endadd_int
   0E13 E0                 3852 	movx	a,@dptr
   0E14 FC                 3853 	mov	r4,a
   0E15 A3                 3854 	inc	dptr
   0E16 E0                 3855 	movx	a,@dptr
   0E17 FD                 3856 	mov	r5,a
                           3857 ;	genMinus
   0E18 EC                 3858 	mov	a,r4
   0E19 C3                 3859 	clr	c
                           3860 ;	Peephole 236.l	used r2 instead of ar2
   0E1A 9A                 3861 	subb	a,r2
   0E1B FA                 3862 	mov	r2,a
   0E1C ED                 3863 	mov	a,r5
                           3864 ;	Peephole 236.l	used r3 instead of ar3
   0E1D 9B                 3865 	subb	a,r3
   0E1E FB                 3866 	mov	r3,a
                           3867 ;	genPlus
                           3868 ;     genPlusIncr
   0E1F 0A                 3869 	inc	r2
   0E20 BA 00 01           3870 	cjne	r2,#0x00,00129$
   0E23 0B                 3871 	inc	r3
   0E24                    3872 00129$:
                           3873 ;	genAssign
   0E24 90s00r2F           3874 	mov	dptr,#_bytelen
   0E27 EA                 3875 	mov	a,r2
   0E28 F0                 3876 	movx	@dptr,a
   0E29 A3                 3877 	inc	dptr
   0E2A EB                 3878 	mov	a,r3
   0E2B F0                 3879 	movx	@dptr,a
                           3880 ;	main.c:529: if(bytelen>0) //Give an error if byte length is less than zero
                           3881 ;	genCmpGt
                           3882 ;	genCmp
   0E2C C3                 3883 	clr	c
                           3884 ;	Peephole 181	changed mov to clr
   0E2D E4                 3885 	clr	a
   0E2E 9A                 3886 	subb	a,r2
                           3887 ;	Peephole 159	avoided xrl during execution
   0E2F 74 80              3888 	mov	a,#(0x00 ^ 0x80)
   0E31 8B F0              3889 	mov	b,r3
   0E33 63 F0 80           3890 	xrl	b,#0x80
   0E36 95 F0              3891 	subb	a,b
                           3892 ;	genIfxJump
                           3893 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0E38 50 3B              3894 	jnc	00114$
                           3895 ;	Peephole 300	removed redundant label 00130$
                           3896 ;	main.c:531: printf_tiny("\r\n************Sequential Read************\r\n");
                           3897 ;	genIpush
   0E3A 74rE3              3898 	mov	a,#__str_76
   0E3C C0 E0              3899 	push	acc
   0E3E 74s0D              3900 	mov	a,#(__str_76 >> 8)
   0E40 C0 E0              3901 	push	acc
                           3902 ;	genCall
   0E42 12s00r00           3903 	lcall	_printf_tiny
   0E45 15 81              3904 	dec	sp
   0E47 15 81              3905 	dec	sp
                           3906 ;	main.c:532: seq_read(startadd_int,bytelen,seq_data); //Function call to perform sequential read of n number of bytes
                           3907 ;	genAssign
   0E49 90s00r29           3908 	mov	dptr,#_startadd_int
   0E4C E0                 3909 	movx	a,@dptr
   0E4D FA                 3910 	mov	r2,a
   0E4E A3                 3911 	inc	dptr
   0E4F E0                 3912 	movx	a,@dptr
   0E50 FB                 3913 	mov	r3,a
                           3914 ;	genAssign
   0E51 90s00r2F           3915 	mov	dptr,#_bytelen
   0E54 E0                 3916 	movx	a,@dptr
   0E55 FC                 3917 	mov	r4,a
   0E56 A3                 3918 	inc	dptr
   0E57 E0                 3919 	movx	a,@dptr
   0E58 FD                 3920 	mov	r5,a
                           3921 ;	genAssign
   0E59 90s00r00           3922 	mov	dptr,#_seq_read_PARM_2
   0E5C EC                 3923 	mov	a,r4
   0E5D F0                 3924 	movx	@dptr,a
   0E5E A3                 3925 	inc	dptr
   0E5F ED                 3926 	mov	a,r5
   0E60 F0                 3927 	movx	@dptr,a
                           3928 ;	genAssign
   0E61 90s00r00           3929 	mov	dptr,#_seq_read_PARM_3
   0E64 74r47              3930 	mov	a,#_seq_data
   0E66 F0                 3931 	movx	@dptr,a
   0E67 A3                 3932 	inc	dptr
   0E68 74s00              3933 	mov	a,#(_seq_data >> 8)
   0E6A F0                 3934 	movx	@dptr,a
   0E6B A3                 3935 	inc	dptr
                           3936 ;	Peephole 181	changed mov to clr
   0E6C E4                 3937 	clr	a
   0E6D F0                 3938 	movx	@dptr,a
                           3939 ;	genCall
   0E6E 8A 82              3940 	mov	dpl,r2
   0E70 8B 83              3941 	mov	dph,r3
                           3942 ;	Peephole 112.b	changed ljmp to sjmp
                           3943 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3944 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E72 02s00r00           3945 	ljmp	_seq_read
   0E75                    3946 00114$:
                           3947 ;	main.c:537: printf_tiny("Please Enter a Higher End Address\r\n");
                           3948 ;	genIpush
   0E75 74r0F              3949 	mov	a,#__str_77
   0E77 C0 E0              3950 	push	acc
   0E79 74s0E              3951 	mov	a,#(__str_77 >> 8)
   0E7B C0 E0              3952 	push	acc
                           3953 ;	genCall
   0E7D 12s00r00           3954 	lcall	_printf_tiny
   0E80 15 81              3955 	dec	sp
   0E82 15 81              3956 	dec	sp
                           3957 ;	Peephole 300	removed redundant label 00116$
   0E84 22                 3958 	ret
                           3959 ;------------------------------------------------------------
                           3960 ;Allocation info for local variables in function 'lcdcreate_custom'
                           3961 ;------------------------------------------------------------
                           3962 ;sloc0                     Allocated with name '_lcdcreate_custom_sloc0_1_0'
                           3963 ;i                         Allocated with name '_lcdcreate_custom_i_1_1'
                           3964 ;j                         Allocated with name '_lcdcreate_custom_j_1_1'
                           3965 ;k                         Allocated with name '_lcdcreate_custom_k_1_1'
                           3966 ;------------------------------------------------------------
                           3967 ;	main.c:550: void lcdcreate_custom()
                           3968 ;	-----------------------------------------
                           3969 ;	 function lcdcreate_custom
                           3970 ;	-----------------------------------------
   0E85                    3971 _lcdcreate_custom:
                           3972 ;	main.c:553: printf_tiny("\n\n\r\t Select Character code between 0 to 7: \t");
                           3973 ;	genIpush
   0E85 74r33              3974 	mov	a,#__str_78
   0E87 C0 E0              3975 	push	acc
   0E89 74s0E              3976 	mov	a,#(__str_78 >> 8)
   0E8B C0 E0              3977 	push	acc
                           3978 ;	genCall
   0E8D 12s00r00           3979 	lcall	_printf_tiny
   0E90 15 81              3980 	dec	sp
   0E92 15 81              3981 	dec	sp
                           3982 ;	main.c:554: do
   0E94                    3983 00103$:
                           3984 ;	main.c:556: gets(c); // Get the Character code from the user, store it in num ; If Wrong value is entered then give error
                           3985 ;	genCall
                           3986 ;	Peephole 182.a	used 16 bit load of DPTR
   0E94 90s00r17           3987 	mov	dptr,#_c
   0E97 75 F0 00           3988 	mov	b,#0x00
   0E9A 12s00r00           3989 	lcall	_gets
                           3990 ;	main.c:557: num=atoi(c);
                           3991 ;	genCall
                           3992 ;	Peephole 182.a	used 16 bit load of DPTR
   0E9D 90s00r17           3993 	mov	dptr,#_c
   0EA0 75 F0 00           3994 	mov	b,#0x00
   0EA3 12s00r00           3995 	lcall	_atoi
   0EA6 AA 82              3996 	mov	r2,dpl
   0EA8 AB 83              3997 	mov	r3,dph
                           3998 ;	genAssign
   0EAA 90s00r43           3999 	mov	dptr,#_num
   0EAD EA                 4000 	mov	a,r2
   0EAE F0                 4001 	movx	@dptr,a
   0EAF A3                 4002 	inc	dptr
   0EB0 EB                 4003 	mov	a,r3
   0EB1 F0                 4004 	movx	@dptr,a
                           4005 ;	main.c:558: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           4006 ;	genCmpGt
                           4007 ;	genCmp
   0EB2 C3                 4008 	clr	c
   0EB3 74 07              4009 	mov	a,#0x07
   0EB5 9A                 4010 	subb	a,r2
                           4011 ;	Peephole 159	avoided xrl during execution
   0EB6 74 80              4012 	mov	a,#(0x00 ^ 0x80)
   0EB8 8B F0              4013 	mov	b,r3
   0EBA 63 F0 80           4014 	xrl	b,#0x80
   0EBD 95 F0              4015 	subb	a,b
                           4016 ;	genIfxJump
                           4017 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0EBF 50 0F              4018 	jnc	00104$
                           4019 ;	Peephole 300	removed redundant label 00144$
                           4020 ;	genIpush
   0EC1 74r60              4021 	mov	a,#__str_79
   0EC3 C0 E0              4022 	push	acc
   0EC5 74s0E              4023 	mov	a,#(__str_79 >> 8)
   0EC7 C0 E0              4024 	push	acc
                           4025 ;	genCall
   0EC9 12s00r00           4026 	lcall	_printf_tiny
   0ECC 15 81              4027 	dec	sp
   0ECE 15 81              4028 	dec	sp
   0ED0                    4029 00104$:
                           4030 ;	main.c:559: }while(num>7);
                           4031 ;	genAssign
   0ED0 90s00r43           4032 	mov	dptr,#_num
   0ED3 E0                 4033 	movx	a,@dptr
   0ED4 FA                 4034 	mov	r2,a
   0ED5 A3                 4035 	inc	dptr
   0ED6 E0                 4036 	movx	a,@dptr
   0ED7 FB                 4037 	mov	r3,a
                           4038 ;	genCmpGt
                           4039 ;	genCmp
   0ED8 C3                 4040 	clr	c
   0ED9 74 07              4041 	mov	a,#0x07
   0EDB 9A                 4042 	subb	a,r2
                           4043 ;	Peephole 159	avoided xrl during execution
   0EDC 74 80              4044 	mov	a,#(0x00 ^ 0x80)
   0EDE 8B F0              4045 	mov	b,r3
   0EE0 63 F0 80           4046 	xrl	b,#0x80
   0EE3 95 F0              4047 	subb	a,b
                           4048 ;	genIfxJump
                           4049 ;	Peephole 112.b	changed ljmp to sjmp
                           4050 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0EE5 40 AD              4051 	jc	00103$
                           4052 ;	Peephole 300	removed redundant label 00145$
                           4053 ;	main.c:560: ccode=num;
                           4054 ;	genCast
   0EE7 90s00r69           4055 	mov	dptr,#_ccode
   0EEA EA                 4056 	mov	a,r2
   0EEB F0                 4057 	movx	@dptr,a
                           4058 ;	main.c:563: printf_tiny("\n\n\r\t Enter pixel map in HEX in HH format from 00 to 1F: \t");
                           4059 ;	genIpush
   0EEC 74r95              4060 	mov	a,#__str_80
   0EEE C0 E0              4061 	push	acc
   0EF0 74s0E              4062 	mov	a,#(__str_80 >> 8)
   0EF2 C0 E0              4063 	push	acc
                           4064 ;	genCall
   0EF4 12s00r00           4065 	lcall	_printf_tiny
   0EF7 15 81              4066 	dec	sp
   0EF9 15 81              4067 	dec	sp
                           4068 ;	main.c:564: for(i=0;i<8;i++)
                           4069 ;	genAssign
   0EFB 7A 00              4070 	mov	r2,#0x00
   0EFD 7B 00              4071 	mov	r3,#0x00
   0EFF                    4072 00122$:
                           4073 ;	genCmpLt
                           4074 ;	genCmp
   0EFF C3                 4075 	clr	c
   0F00 EA                 4076 	mov	a,r2
   0F01 94 08              4077 	subb	a,#0x08
   0F03 EB                 4078 	mov	a,r3
   0F04 64 80              4079 	xrl	a,#0x80
   0F06 94 80              4080 	subb	a,#0x80
                           4081 ;	genIfxJump
   0F08 40 03              4082 	jc	00146$
   0F0A 02s10rE0           4083 	ljmp	00125$
   0F0D                    4084 00146$:
                           4085 ;	main.c:566: printf_tiny("\n\r\t Data in row number %d: \t",i);
                           4086 ;	genIpush
   0F0D C0 02              4087 	push	ar2
   0F0F C0 03              4088 	push	ar3
   0F11 C0 02              4089 	push	ar2
   0F13 C0 03              4090 	push	ar3
                           4091 ;	genIpush
   0F15 74rCF              4092 	mov	a,#__str_81
   0F17 C0 E0              4093 	push	acc
   0F19 74s0E              4094 	mov	a,#(__str_81 >> 8)
   0F1B C0 E0              4095 	push	acc
                           4096 ;	genCall
   0F1D 12s00r00           4097 	lcall	_printf_tiny
   0F20 E5 81              4098 	mov	a,sp
   0F22 24 FC              4099 	add	a,#0xfc
   0F24 F5 81              4100 	mov	sp,a
   0F26 D0 03              4101 	pop	ar3
   0F28 D0 02              4102 	pop	ar2
                           4103 ;	main.c:567: do
   0F2A                    4104 00108$:
                           4105 ;	main.c:569: gets(c);
                           4106 ;	genCall
                           4107 ;	Peephole 182.a	used 16 bit load of DPTR
   0F2A 90s00r17           4108 	mov	dptr,#_c
   0F2D 75 F0 00           4109 	mov	b,#0x00
   0F30 C0 02              4110 	push	ar2
   0F32 C0 03              4111 	push	ar3
   0F34 12s00r00           4112 	lcall	_gets
   0F37 D0 03              4113 	pop	ar3
   0F39 D0 02              4114 	pop	ar2
                           4115 ;	main.c:570: num=atoh_data(c);// atoh_data function converts ascii values to the HEX numbers
                           4116 ;	genCall
                           4117 ;	Peephole 182.a	used 16 bit load of DPTR
   0F3B 90s00r17           4118 	mov	dptr,#_c
   0F3E 75 F0 00           4119 	mov	b,#0x00
   0F41 C0 02              4120 	push	ar2
   0F43 C0 03              4121 	push	ar3
   0F45 12s00r00           4122 	lcall	_atoh_data
   0F48 AC 82              4123 	mov	r4,dpl
   0F4A AD 83              4124 	mov	r5,dph
   0F4C D0 03              4125 	pop	ar3
   0F4E D0 02              4126 	pop	ar2
                           4127 ;	genAssign
   0F50 90s00r43           4128 	mov	dptr,#_num
   0F53 EC                 4129 	mov	a,r4
   0F54 F0                 4130 	movx	@dptr,a
   0F55 A3                 4131 	inc	dptr
   0F56 ED                 4132 	mov	a,r5
   0F57 F0                 4133 	movx	@dptr,a
                           4134 ;	main.c:571: if(num>31){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid HEX number between 00 to 1F in HH format:\t");}
                           4135 ;	genCmpGt
                           4136 ;	genCmp
   0F58 C3                 4137 	clr	c
   0F59 74 1F              4138 	mov	a,#0x1F
   0F5B 9C                 4139 	subb	a,r4
                           4140 ;	Peephole 159	avoided xrl during execution
   0F5C 74 80              4141 	mov	a,#(0x00 ^ 0x80)
   0F5E 8D F0              4142 	mov	b,r5
   0F60 63 F0 80           4143 	xrl	b,#0x80
   0F63 95 F0              4144 	subb	a,b
                           4145 ;	genIfxJump
                           4146 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0F65 50 17              4147 	jnc	00109$
                           4148 ;	Peephole 300	removed redundant label 00147$
                           4149 ;	genIpush
   0F67 C0 02              4150 	push	ar2
   0F69 C0 03              4151 	push	ar3
   0F6B 74rEC              4152 	mov	a,#__str_82
   0F6D C0 E0              4153 	push	acc
   0F6F 74s0E              4154 	mov	a,#(__str_82 >> 8)
   0F71 C0 E0              4155 	push	acc
                           4156 ;	genCall
   0F73 12s00r00           4157 	lcall	_printf_tiny
   0F76 15 81              4158 	dec	sp
   0F78 15 81              4159 	dec	sp
   0F7A D0 03              4160 	pop	ar3
   0F7C D0 02              4161 	pop	ar2
   0F7E                    4162 00109$:
                           4163 ;	main.c:572: }while(num>31);
                           4164 ;	genAssign
   0F7E 90s00r43           4165 	mov	dptr,#_num
   0F81 E0                 4166 	movx	a,@dptr
   0F82 FC                 4167 	mov	r4,a
   0F83 A3                 4168 	inc	dptr
   0F84 E0                 4169 	movx	a,@dptr
   0F85 FD                 4170 	mov	r5,a
                           4171 ;	genCmpGt
                           4172 ;	genCmp
   0F86 C3                 4173 	clr	c
   0F87 74 1F              4174 	mov	a,#0x1F
   0F89 9C                 4175 	subb	a,r4
                           4176 ;	Peephole 159	avoided xrl during execution
   0F8A 74 80              4177 	mov	a,#(0x00 ^ 0x80)
   0F8C 8D F0              4178 	mov	b,r5
   0F8E 63 F0 80           4179 	xrl	b,#0x80
   0F91 95 F0              4180 	subb	a,b
                           4181 ;	genIfxJump
                           4182 ;	Peephole 112.b	changed ljmp to sjmp
                           4183 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0F93 40 95              4184 	jc	00108$
                           4185 ;	Peephole 300	removed redundant label 00148$
                           4186 ;	main.c:574: row_val[i]=num;         // Store data from user into row_val[] array
                           4187 ;	genPlus
                           4188 ;	Peephole 236.g	used r2 instead of ar2
   0F95 EA                 4189 	mov	a,r2
   0F96 24r61              4190 	add	a,#_row_val
   0F98 F5 82              4191 	mov	dpl,a
                           4192 ;	Peephole 236.g	used r3 instead of ar3
   0F9A EB                 4193 	mov	a,r3
   0F9B 34s00              4194 	addc	a,#(_row_val >> 8)
   0F9D F5 83              4195 	mov	dph,a
                           4196 ;	genCast
                           4197 ;	genPointerSet
                           4198 ;     genFarPointerSet
   0F9F EC                 4199 	mov	a,r4
   0FA0 F0                 4200 	movx	@dptr,a
                           4201 ;	main.c:575: disp[i]=atob(num);
                           4202 ;	genPlus
                           4203 ;	Peephole 236.g	used r2 instead of ar2
   0FA1 EA                 4204 	mov	a,r2
   0FA2 24r6A              4205 	add	a,#_disp
   0FA4 FD                 4206 	mov	r5,a
                           4207 ;	Peephole 236.g	used r3 instead of ar3
   0FA5 EB                 4208 	mov	a,r3
   0FA6 34s00              4209 	addc	a,#(_disp >> 8)
   0FA8 FE                 4210 	mov	r6,a
                           4211 ;	genCall
   0FA9 8C 82              4212 	mov	dpl,r4
   0FAB C0 02              4213 	push	ar2
   0FAD C0 03              4214 	push	ar3
   0FAF C0 05              4215 	push	ar5
   0FB1 C0 06              4216 	push	ar6
   0FB3 12s00r00           4217 	lcall	_atob
   0FB6 AC 82              4218 	mov	r4,dpl
   0FB8 D0 06              4219 	pop	ar6
   0FBA D0 05              4220 	pop	ar5
   0FBC D0 03              4221 	pop	ar3
   0FBE D0 02              4222 	pop	ar2
                           4223 ;	genPointerSet
                           4224 ;     genFarPointerSet
   0FC0 8D 82              4225 	mov	dpl,r5
   0FC2 8E 83              4226 	mov	dph,r6
   0FC4 EC                 4227 	mov	a,r4
   0FC5 F0                 4228 	movx	@dptr,a
                           4229 ;	main.c:576: printf_tiny("\n\r\t\t      \t12345");
                           4230 ;	genIpush
   0FC6 C0 02              4231 	push	ar2
   0FC8 C0 03              4232 	push	ar3
   0FCA 74r36              4233 	mov	a,#__str_83
   0FCC C0 E0              4234 	push	acc
   0FCE 74s0F              4235 	mov	a,#(__str_83 >> 8)
   0FD0 C0 E0              4236 	push	acc
                           4237 ;	genCall
   0FD2 12s00r00           4238 	lcall	_printf_tiny
   0FD5 15 81              4239 	dec	sp
   0FD7 15 81              4240 	dec	sp
   0FD9 D0 03              4241 	pop	ar3
   0FDB D0 02              4242 	pop	ar2
                           4243 ;	main.c:577: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           4244 ;	genAssign
   0FDD 8A 04              4245 	mov	ar4,r2
   0FDF 8B 05              4246 	mov	ar5,r3
                           4247 ;	genAssign
   0FE1 7E 00              4248 	mov	r6,#0x00
   0FE3 7F 00              4249 	mov	r7,#0x00
   0FE5                    4250 00118$:
                           4251 ;	genCmpGt
                           4252 ;	genCmp
   0FE5 C3                 4253 	clr	c
   0FE6 EC                 4254 	mov	a,r4
   0FE7 9E                 4255 	subb	a,r6
   0FE8 ED                 4256 	mov	a,r5
   0FE9 64 80              4257 	xrl	a,#0x80
   0FEB 8F F0              4258 	mov	b,r7
   0FED 63 F0 80           4259 	xrl	b,#0x80
   0FF0 95 F0              4260 	subb	a,b
                           4261 ;	genIfxJump
   0FF2 50 03              4262 	jnc	00149$
   0FF4 02s10rD6           4263 	ljmp	00124$
   0FF7                    4264 00149$:
                           4265 ;	main.c:579: printf_tiny("\n\r\t\tROW %d:\t",j);
                           4266 ;	genIpush
   0FF7 C0 04              4267 	push	ar4
   0FF9 C0 05              4268 	push	ar5
   0FFB C0 06              4269 	push	ar6
   0FFD C0 07              4270 	push	ar7
   0FFF C0 06              4271 	push	ar6
   1001 C0 07              4272 	push	ar7
                           4273 ;	genIpush
   1003 74r47              4274 	mov	a,#__str_84
   1005 C0 E0              4275 	push	acc
   1007 74s0F              4276 	mov	a,#(__str_84 >> 8)
   1009 C0 E0              4277 	push	acc
                           4278 ;	genCall
   100B 12s00r00           4279 	lcall	_printf_tiny
   100E E5 81              4280 	mov	a,sp
   1010 24 FC              4281 	add	a,#0xfc
   1012 F5 81              4282 	mov	sp,a
   1014 D0 07              4283 	pop	ar7
   1016 D0 06              4284 	pop	ar6
   1018 D0 05              4285 	pop	ar5
   101A D0 04              4286 	pop	ar4
                           4287 ;	main.c:580: for(k=3;k<8;k++)
                           4288 ;	genPlus
                           4289 ;	Peephole 236.g	used r6 instead of ar6
   101C EE                 4290 	mov	a,r6
   101D 24r6A              4291 	add	a,#_disp
   101F F8                 4292 	mov	r0,a
                           4293 ;	Peephole 236.g	used r7 instead of ar7
   1020 EF                 4294 	mov	a,r7
   1021 34s00              4295 	addc	a,#(_disp >> 8)
   1023 F9                 4296 	mov	r1,a
                           4297 ;	genAssign
   1024 7A 03              4298 	mov	r2,#0x03
   1026 7B 00              4299 	mov	r3,#0x00
   1028                    4300 00114$:
                           4301 ;	genCmpLt
                           4302 ;	genCmp
   1028 C3                 4303 	clr	c
   1029 EA                 4304 	mov	a,r2
   102A 94 08              4305 	subb	a,#0x08
   102C EB                 4306 	mov	a,r3
   102D 64 80              4307 	xrl	a,#0x80
   102F 94 80              4308 	subb	a,#0x80
                           4309 ;	genIfxJump
   1031 40 03              4310 	jc	00150$
   1033 02s10rCE           4311 	ljmp	00120$
   1036                    4312 00150$:
                           4313 ;	main.c:582: if((disp[j]>>k)&1)
                           4314 ;	genIpush
   1036 C0 04              4315 	push	ar4
   1038 C0 05              4316 	push	ar5
                           4317 ;	genPointerGet
                           4318 ;	genFarPointerGet
   103A 88 82              4319 	mov	dpl,r0
   103C 89 83              4320 	mov	dph,r1
   103E E0                 4321 	movx	a,@dptr
   103F FC                 4322 	mov	r4,a
                           4323 ;	genRightShift
   1040 8A F0              4324 	mov	b,r2
   1042 05 F0              4325 	inc	b
   1044 EC                 4326 	mov	a,r4
   1045 80 02              4327 	sjmp	00152$
   1047                    4328 00151$:
   1047 C3                 4329 	clr	c
   1048 13                 4330 	rrc	a
   1049                    4331 00152$:
   1049 D5 F0 FB           4332 	djnz	b,00151$
                           4333 ;	genAnd
   104C 54 01              4334 	anl	a,#0x01
                           4335 ;	genIpop
   104E D0 05              4336 	pop	ar5
   1050 D0 04              4337 	pop	ar4
                           4338 ;	genIfx
                           4339 ;	genIfxJump
                           4340 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1052 60 3A              4341 	jz	00112$
                           4342 ;	Peephole 300	removed redundant label 00153$
                           4343 ;	main.c:584: printf_tiny("%c",CUSTOMCHAR_DIS);
                           4344 ;	genIpush
   1054 C0 02              4345 	push	ar2
   1056 C0 03              4346 	push	ar3
   1058 C0 04              4347 	push	ar4
   105A C0 05              4348 	push	ar5
   105C C0 06              4349 	push	ar6
   105E C0 07              4350 	push	ar7
   1060 C0 00              4351 	push	ar0
   1062 C0 01              4352 	push	ar1
   1064 74 FF              4353 	mov	a,#0xFF
   1066 C0 E0              4354 	push	acc
                           4355 ;	Peephole 181	changed mov to clr
   1068 E4                 4356 	clr	a
   1069 C0 E0              4357 	push	acc
                           4358 ;	genIpush
   106B 74r54              4359 	mov	a,#__str_85
   106D C0 E0              4360 	push	acc
   106F 74s0F              4361 	mov	a,#(__str_85 >> 8)
   1071 C0 E0              4362 	push	acc
                           4363 ;	genCall
   1073 12s00r00           4364 	lcall	_printf_tiny
   1076 E5 81              4365 	mov	a,sp
   1078 24 FC              4366 	add	a,#0xfc
   107A F5 81              4367 	mov	sp,a
   107C D0 01              4368 	pop	ar1
   107E D0 00              4369 	pop	ar0
   1080 D0 07              4370 	pop	ar7
   1082 D0 06              4371 	pop	ar6
   1084 D0 05              4372 	pop	ar5
   1086 D0 04              4373 	pop	ar4
   1088 D0 03              4374 	pop	ar3
   108A D0 02              4375 	pop	ar2
                           4376 ;	Peephole 112.b	changed ljmp to sjmp
   108C 80 38              4377 	sjmp	00116$
   108E                    4378 00112$:
                           4379 ;	main.c:588: printf_tiny("%c",'_');
                           4380 ;	genIpush
   108E C0 02              4381 	push	ar2
   1090 C0 03              4382 	push	ar3
   1092 C0 04              4383 	push	ar4
   1094 C0 05              4384 	push	ar5
   1096 C0 06              4385 	push	ar6
   1098 C0 07              4386 	push	ar7
   109A C0 00              4387 	push	ar0
   109C C0 01              4388 	push	ar1
   109E 74 5F              4389 	mov	a,#0x5F
   10A0 C0 E0              4390 	push	acc
                           4391 ;	Peephole 181	changed mov to clr
   10A2 E4                 4392 	clr	a
   10A3 C0 E0              4393 	push	acc
                           4394 ;	genIpush
   10A5 74r54              4395 	mov	a,#__str_85
   10A7 C0 E0              4396 	push	acc
   10A9 74s0F              4397 	mov	a,#(__str_85 >> 8)
   10AB C0 E0              4398 	push	acc
                           4399 ;	genCall
   10AD 12s00r00           4400 	lcall	_printf_tiny
   10B0 E5 81              4401 	mov	a,sp
   10B2 24 FC              4402 	add	a,#0xfc
   10B4 F5 81              4403 	mov	sp,a
   10B6 D0 01              4404 	pop	ar1
   10B8 D0 00              4405 	pop	ar0
   10BA D0 07              4406 	pop	ar7
   10BC D0 06              4407 	pop	ar6
   10BE D0 05              4408 	pop	ar5
   10C0 D0 04              4409 	pop	ar4
   10C2 D0 03              4410 	pop	ar3
   10C4 D0 02              4411 	pop	ar2
   10C6                    4412 00116$:
                           4413 ;	main.c:580: for(k=3;k<8;k++)
                           4414 ;	genPlus
                           4415 ;     genPlusIncr
   10C6 0A                 4416 	inc	r2
   10C7 BA 00 01           4417 	cjne	r2,#0x00,00154$
   10CA 0B                 4418 	inc	r3
   10CB                    4419 00154$:
   10CB 02s10r28           4420 	ljmp	00114$
   10CE                    4421 00120$:
                           4422 ;	main.c:577: for(j=0;j<=i;j++)          // This fop loop is used for displaying the contents of the ROW_val on the screen
                           4423 ;	genPlus
                           4424 ;     genPlusIncr
   10CE 0E                 4425 	inc	r6
   10CF BE 00 01           4426 	cjne	r6,#0x00,00155$
   10D2 0F                 4427 	inc	r7
   10D3                    4428 00155$:
   10D3 02s0FrE5           4429 	ljmp	00118$
   10D6                    4430 00124$:
                           4431 ;	main.c:564: for(i=0;i<8;i++)
                           4432 ;	genPlus
                           4433 ;     genPlusIncr
   10D6 74 01              4434 	mov	a,#0x01
                           4435 ;	Peephole 236.a	used r4 instead of ar4
   10D8 2C                 4436 	add	a,r4
   10D9 FA                 4437 	mov	r2,a
                           4438 ;	Peephole 181	changed mov to clr
   10DA E4                 4439 	clr	a
                           4440 ;	Peephole 236.b	used r5 instead of ar5
   10DB 3D                 4441 	addc	a,r5
   10DC FB                 4442 	mov	r3,a
   10DD 02s0ErFF           4443 	ljmp	00122$
   10E0                    4444 00125$:
                           4445 ;	main.c:593: lcdcreatechar(ccode,row_val);           // After getting all 7 values, new character  is stored in the CGRAM
                           4446 ;	genAssign
   10E0 90s00r69           4447 	mov	dptr,#_ccode
   10E3 E0                 4448 	movx	a,@dptr
   10E4 FA                 4449 	mov	r2,a
                           4450 ;	genCast
   10E5 90s00r00           4451 	mov	dptr,#_lcdcreatechar_PARM_2
   10E8 74r61              4452 	mov	a,#_row_val
   10EA F0                 4453 	movx	@dptr,a
   10EB A3                 4454 	inc	dptr
   10EC 74s00              4455 	mov	a,#(_row_val >> 8)
   10EE F0                 4456 	movx	@dptr,a
   10EF A3                 4457 	inc	dptr
   10F0 74 00              4458 	mov	a,#0x0
   10F2 F0                 4459 	movx	@dptr,a
                           4460 ;	genCall
   10F3 8A 82              4461 	mov	dpl,r2
                           4462 ;	Peephole 253.b	replaced lcall/ret with ljmp
   10F5 02s00r00           4463 	ljmp	_lcdcreatechar
                           4464 ;
                           4465 ;------------------------------------------------------------
                           4466 ;Allocation info for local variables in function 'lcd_displaycustom'
                           4467 ;------------------------------------------------------------
                           4468 ;------------------------------------------------------------
                           4469 ;	main.c:606: void lcd_displaycustom()
                           4470 ;	-----------------------------------------
                           4471 ;	 function lcd_displaycustom
                           4472 ;	-----------------------------------------
   10F8                    4473 _lcd_displaycustom:
                           4474 ;	main.c:608: printf_tiny("\n\n\r\t Select Character code between 0 to 7 to display: \t");
                           4475 ;	genIpush
   10F8 74r57              4476 	mov	a,#__str_86
   10FA C0 E0              4477 	push	acc
   10FC 74s0F              4478 	mov	a,#(__str_86 >> 8)
   10FE C0 E0              4479 	push	acc
                           4480 ;	genCall
   1100 12s00r00           4481 	lcall	_printf_tiny
   1103 15 81              4482 	dec	sp
   1105 15 81              4483 	dec	sp
                           4484 ;	main.c:609: do{
   1107                    4485 00103$:
                           4486 ;	main.c:610: gets(c); //Get the character from the user
                           4487 ;	genCall
                           4488 ;	Peephole 182.a	used 16 bit load of DPTR
   1107 90s00r17           4489 	mov	dptr,#_c
   110A 75 F0 00           4490 	mov	b,#0x00
   110D 12s00r00           4491 	lcall	_gets
                           4492 ;	main.c:611: num=atoi(c);
                           4493 ;	genCall
                           4494 ;	Peephole 182.a	used 16 bit load of DPTR
   1110 90s00r17           4495 	mov	dptr,#_c
   1113 75 F0 00           4496 	mov	b,#0x00
   1116 12s00r00           4497 	lcall	_atoi
   1119 AA 82              4498 	mov	r2,dpl
   111B AB 83              4499 	mov	r3,dph
                           4500 ;	genAssign
   111D 90s00r43           4501 	mov	dptr,#_num
   1120 EA                 4502 	mov	a,r2
   1121 F0                 4503 	movx	@dptr,a
   1122 A3                 4504 	inc	dptr
   1123 EB                 4505 	mov	a,r3
   1124 F0                 4506 	movx	@dptr,a
                           4507 ;	main.c:612: if(num>7){printf_tiny("\n\n\r *-ERROR-*\n\r\t Enter a valid number between 0 to 7");}
                           4508 ;	genCmpGt
                           4509 ;	genCmp
   1125 C3                 4510 	clr	c
   1126 74 07              4511 	mov	a,#0x07
   1128 9A                 4512 	subb	a,r2
                           4513 ;	Peephole 159	avoided xrl during execution
   1129 74 80              4514 	mov	a,#(0x00 ^ 0x80)
   112B 8B F0              4515 	mov	b,r3
   112D 63 F0 80           4516 	xrl	b,#0x80
   1130 95 F0              4517 	subb	a,b
                           4518 ;	genIfxJump
                           4519 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1132 50 0F              4520 	jnc	00104$
                           4521 ;	Peephole 300	removed redundant label 00111$
                           4522 ;	genIpush
   1134 74r60              4523 	mov	a,#__str_79
   1136 C0 E0              4524 	push	acc
   1138 74s0E              4525 	mov	a,#(__str_79 >> 8)
   113A C0 E0              4526 	push	acc
                           4527 ;	genCall
   113C 12s00r00           4528 	lcall	_printf_tiny
   113F 15 81              4529 	dec	sp
   1141 15 81              4530 	dec	sp
   1143                    4531 00104$:
                           4532 ;	main.c:613: }while(num>7);
                           4533 ;	genAssign
   1143 90s00r43           4534 	mov	dptr,#_num
   1146 E0                 4535 	movx	a,@dptr
   1147 FA                 4536 	mov	r2,a
   1148 A3                 4537 	inc	dptr
   1149 E0                 4538 	movx	a,@dptr
   114A FB                 4539 	mov	r3,a
                           4540 ;	genCmpGt
                           4541 ;	genCmp
   114B C3                 4542 	clr	c
   114C 74 07              4543 	mov	a,#0x07
   114E 9A                 4544 	subb	a,r2
                           4545 ;	Peephole 159	avoided xrl during execution
   114F 74 80              4546 	mov	a,#(0x00 ^ 0x80)
   1151 8B F0              4547 	mov	b,r3
   1153 63 F0 80           4548 	xrl	b,#0x80
   1156 95 F0              4549 	subb	a,b
                           4550 ;	genIfxJump
                           4551 ;	Peephole 112.b	changed ljmp to sjmp
                           4552 ;	Peephole 160.a	removed sjmp by inverse jump logic
   1158 40 AD              4553 	jc	00103$
                           4554 ;	Peephole 300	removed redundant label 00112$
                           4555 ;	main.c:615: ccode=num;
                           4556 ;	genCast
                           4557 ;	genAssign
   115A 90s00r69           4558 	mov	dptr,#_ccode
   115D EA                 4559 	mov	a,r2
   115E F0                 4560 	movx	@dptr,a
                           4561 ;	main.c:616: lcddisplay_custom(ccode,CUSTOM_ROW,num); //display the customer character created by the user on a particular location
                           4562 ;	genAssign
   115F 90s00r00           4563 	mov	dptr,#_lcddisplay_custom_PARM_2
   1162 74 02              4564 	mov	a,#0x02
   1164 F0                 4565 	movx	@dptr,a
                           4566 ;	genAssign
   1165 90s00r00           4567 	mov	dptr,#_lcddisplay_custom_PARM_3
   1168 EA                 4568 	mov	a,r2
   1169 F0                 4569 	movx	@dptr,a
                           4570 ;	genCall
   116A 8A 82              4571 	mov	dpl,r2
                           4572 ;	Peephole 253.b	replaced lcall/ret with ljmp
   116C 02s00r00           4573 	ljmp	_lcddisplay_custom
                           4574 ;
                           4575 ;------------------------------------------------------------
                           4576 ;Allocation info for local variables in function 'statusreport'
                           4577 ;------------------------------------------------------------
                           4578 ;status                    Allocated with name '_statusreport_status_1_1'
                           4579 ;finalstatus               Allocated with name '_statusreport_finalstatus_1_1'
                           4580 ;------------------------------------------------------------
                           4581 ;	main.c:628: unsigned char statusreport(unsigned char status)
                           4582 ;	-----------------------------------------
                           4583 ;	 function statusreport
                           4584 ;	-----------------------------------------
   116F                    4585 _statusreport:
                           4586 ;	genReceive
   116F E5 82              4587 	mov	a,dpl
   1171 90s00r91           4588 	mov	dptr,#_statusreport_status_1_1
   1174 F0                 4589 	movx	@dptr,a
                           4590 ;	main.c:632: pinstatus[0]=(status & 0x01); //storing direction of the each port pin in an array
                           4591 ;	genAssign
   1175 90s00r91           4592 	mov	dptr,#_statusreport_status_1_1
   1178 E0                 4593 	movx	a,@dptr
   1179 FA                 4594 	mov	r2,a
                           4595 ;	genAnd
   117A 74 01              4596 	mov	a,#0x01
   117C 5A                 4597 	anl	a,r2
                           4598 ;	genPointerSet
                           4599 ;     genFarPointerSet
   117D FB                 4600 	mov	r3,a
   117E 90s00r84           4601 	mov	dptr,#_pinstatus
                           4602 ;	Peephole 100	removed redundant mov
   1181 F0                 4603 	movx	@dptr,a
                           4604 ;	main.c:633: pinstatus[1]=(status & 0x02)>>1;
                           4605 ;	genAnd
   1182 74 02              4606 	mov	a,#0x02
   1184 5A                 4607 	anl	a,r2
                           4608 ;	genRightShift
                           4609 ;	genRightShiftLiteral
                           4610 ;	genrshOne
   1185 FB                 4611 	mov	r3,a
                           4612 ;	Peephole 105	removed redundant mov
   1186 C3                 4613 	clr	c
   1187 13                 4614 	rrc	a
                           4615 ;	genPointerSet
                           4616 ;     genFarPointerSet
   1188 FB                 4617 	mov	r3,a
   1189 90s00r85           4618 	mov	dptr,#(_pinstatus + 0x0001)
                           4619 ;	Peephole 100	removed redundant mov
   118C F0                 4620 	movx	@dptr,a
                           4621 ;	main.c:634: pinstatus[2]=(status & 0x04)>>2;
                           4622 ;	genAnd
   118D 74 04              4623 	mov	a,#0x04
   118F 5A                 4624 	anl	a,r2
                           4625 ;	genRightShift
                           4626 ;	genRightShiftLiteral
                           4627 ;	genrshOne
   1190 FB                 4628 	mov	r3,a
                           4629 ;	Peephole 105	removed redundant mov
   1191 03                 4630 	rr	a
   1192 03                 4631 	rr	a
   1193 54 3F              4632 	anl	a,#0x3f
                           4633 ;	genPointerSet
                           4634 ;     genFarPointerSet
   1195 FB                 4635 	mov	r3,a
   1196 90s00r86           4636 	mov	dptr,#(_pinstatus + 0x0002)
                           4637 ;	Peephole 100	removed redundant mov
   1199 F0                 4638 	movx	@dptr,a
                           4639 ;	main.c:635: pinstatus[3]=(status & 0x08)>>3;
                           4640 ;	genAnd
   119A 74 08              4641 	mov	a,#0x08
   119C 5A                 4642 	anl	a,r2
                           4643 ;	genRightShift
                           4644 ;	genRightShiftLiteral
                           4645 ;	genrshOne
   119D FB                 4646 	mov	r3,a
                           4647 ;	Peephole 105	removed redundant mov
   119E C4                 4648 	swap	a
   119F 23                 4649 	rl	a
   11A0 54 1F              4650 	anl	a,#0x1f
                           4651 ;	genPointerSet
                           4652 ;     genFarPointerSet
   11A2 FB                 4653 	mov	r3,a
   11A3 90s00r87           4654 	mov	dptr,#(_pinstatus + 0x0003)
                           4655 ;	Peephole 100	removed redundant mov
   11A6 F0                 4656 	movx	@dptr,a
                           4657 ;	main.c:636: pinstatus[4]=(status & 0x10)>>4;
                           4658 ;	genAnd
   11A7 74 10              4659 	mov	a,#0x10
   11A9 5A                 4660 	anl	a,r2
                           4661 ;	genRightShift
                           4662 ;	genRightShiftLiteral
                           4663 ;	genrshOne
   11AA FB                 4664 	mov	r3,a
                           4665 ;	Peephole 105	removed redundant mov
   11AB C4                 4666 	swap	a
   11AC 54 0F              4667 	anl	a,#0x0f
                           4668 ;	genPointerSet
                           4669 ;     genFarPointerSet
   11AE FB                 4670 	mov	r3,a
   11AF 90s00r88           4671 	mov	dptr,#(_pinstatus + 0x0004)
                           4672 ;	Peephole 100	removed redundant mov
   11B2 F0                 4673 	movx	@dptr,a
                           4674 ;	main.c:637: pinstatus[5]=(status & 0x20)>>5;
                           4675 ;	genAnd
   11B3 74 20              4676 	mov	a,#0x20
   11B5 5A                 4677 	anl	a,r2
                           4678 ;	genRightShift
                           4679 ;	genRightShiftLiteral
                           4680 ;	genrshOne
   11B6 FB                 4681 	mov	r3,a
                           4682 ;	Peephole 105	removed redundant mov
   11B7 C4                 4683 	swap	a
   11B8 03                 4684 	rr	a
   11B9 54 07              4685 	anl	a,#0x07
                           4686 ;	genPointerSet
                           4687 ;     genFarPointerSet
   11BB FB                 4688 	mov	r3,a
   11BC 90s00r89           4689 	mov	dptr,#(_pinstatus + 0x0005)
                           4690 ;	Peephole 100	removed redundant mov
   11BF F0                 4691 	movx	@dptr,a
                           4692 ;	main.c:638: pinstatus[6]=(status & 0x40)>>6;
                           4693 ;	genAnd
   11C0 74 40              4694 	mov	a,#0x40
   11C2 5A                 4695 	anl	a,r2
                           4696 ;	genRightShift
                           4697 ;	genRightShiftLiteral
                           4698 ;	genrshOne
   11C3 FB                 4699 	mov	r3,a
                           4700 ;	Peephole 105	removed redundant mov
   11C4 23                 4701 	rl	a
   11C5 23                 4702 	rl	a
   11C6 54 03              4703 	anl	a,#0x03
                           4704 ;	genPointerSet
                           4705 ;     genFarPointerSet
   11C8 FB                 4706 	mov	r3,a
   11C9 90s00r8A           4707 	mov	dptr,#(_pinstatus + 0x0006)
                           4708 ;	Peephole 100	removed redundant mov
   11CC F0                 4709 	movx	@dptr,a
                           4710 ;	main.c:639: pinstatus[7]=(status & 0x80)>>7;
                           4711 ;	genAnd
   11CD 53 02 80           4712 	anl	ar2,#0x80
                           4713 ;	genRightShift
                           4714 ;	genRightShiftLiteral
                           4715 ;	genrshOne
   11D0 EA                 4716 	mov	a,r2
   11D1 23                 4717 	rl	a
   11D2 54 01              4718 	anl	a,#0x01
                           4719 ;	genPointerSet
                           4720 ;     genFarPointerSet
   11D4 FA                 4721 	mov	r2,a
   11D5 90s00r8B           4722 	mov	dptr,#(_pinstatus + 0x0007)
                           4723 ;	Peephole 100	removed redundant mov
   11D8 F0                 4724 	movx	@dptr,a
                           4725 ;	main.c:641: finalstatus = (pinstatus[0]|(pinstatus[1]<<1)|(pinstatus[2]<<2)|(pinstatus[3]<<3)|(pinstatus[4]<<4)|(pinstatus[5]<<5)|(pinstatus[6]<<6)|(pinstatus[7]<<7));
                           4726 ;	genPointerGet
                           4727 ;	genFarPointerGet
   11D9 90s00r84           4728 	mov	dptr,#_pinstatus
   11DC E0                 4729 	movx	a,@dptr
   11DD FA                 4730 	mov	r2,a
                           4731 ;	genPointerGet
                           4732 ;	genFarPointerGet
   11DE 90s00r85           4733 	mov	dptr,#(_pinstatus + 0x0001)
   11E1 E0                 4734 	movx	a,@dptr
                           4735 ;	genLeftShift
                           4736 ;	genLeftShiftLiteral
                           4737 ;	genlshOne
                           4738 ;	Peephole 105	removed redundant mov
                           4739 ;	genOr
                           4740 ;	Peephole 204	removed redundant mov
   11E2 25 E0              4741 	add	a,acc
   11E4 FB                 4742 	mov	r3,a
                           4743 ;	Peephole 105	removed redundant mov
   11E5 42 02              4744 	orl	ar2,a
                           4745 ;	genPointerGet
                           4746 ;	genFarPointerGet
   11E7 90s00r86           4747 	mov	dptr,#(_pinstatus + 0x0002)
   11EA E0                 4748 	movx	a,@dptr
                           4749 ;	genLeftShift
                           4750 ;	genLeftShiftLiteral
                           4751 ;	genlshOne
   11EB FB                 4752 	mov	r3,a
                           4753 ;	Peephole 105	removed redundant mov
   11EC 25 E0              4754 	add	a,acc
   11EE 25 E0              4755 	add	a,acc
                           4756 ;	genOr
   11F0 FB                 4757 	mov	r3,a
                           4758 ;	Peephole 105	removed redundant mov
   11F1 42 02              4759 	orl	ar2,a
                           4760 ;	genPointerGet
                           4761 ;	genFarPointerGet
   11F3 90s00r87           4762 	mov	dptr,#(_pinstatus + 0x0003)
   11F6 E0                 4763 	movx	a,@dptr
                           4764 ;	genLeftShift
                           4765 ;	genLeftShiftLiteral
                           4766 ;	genlshOne
   11F7 FB                 4767 	mov	r3,a
                           4768 ;	Peephole 105	removed redundant mov
   11F8 C4                 4769 	swap	a
   11F9 03                 4770 	rr	a
   11FA 54 F8              4771 	anl	a,#0xf8
                           4772 ;	genOr
   11FC FB                 4773 	mov	r3,a
                           4774 ;	Peephole 105	removed redundant mov
   11FD 42 02              4775 	orl	ar2,a
                           4776 ;	genPointerGet
                           4777 ;	genFarPointerGet
   11FF 90s00r88           4778 	mov	dptr,#(_pinstatus + 0x0004)
   1202 E0                 4779 	movx	a,@dptr
                           4780 ;	genLeftShift
                           4781 ;	genLeftShiftLiteral
                           4782 ;	genlshOne
   1203 FB                 4783 	mov	r3,a
                           4784 ;	Peephole 105	removed redundant mov
   1204 C4                 4785 	swap	a
   1205 54 F0              4786 	anl	a,#0xf0
                           4787 ;	genOr
   1207 FB                 4788 	mov	r3,a
                           4789 ;	Peephole 105	removed redundant mov
   1208 42 02              4790 	orl	ar2,a
                           4791 ;	genPointerGet
                           4792 ;	genFarPointerGet
   120A 90s00r89           4793 	mov	dptr,#(_pinstatus + 0x0005)
   120D E0                 4794 	movx	a,@dptr
                           4795 ;	genLeftShift
                           4796 ;	genLeftShiftLiteral
                           4797 ;	genlshOne
   120E FB                 4798 	mov	r3,a
                           4799 ;	Peephole 105	removed redundant mov
   120F C4                 4800 	swap	a
   1210 23                 4801 	rl	a
   1211 54 E0              4802 	anl	a,#0xe0
                           4803 ;	genOr
   1213 FB                 4804 	mov	r3,a
                           4805 ;	Peephole 105	removed redundant mov
   1214 42 02              4806 	orl	ar2,a
                           4807 ;	genPointerGet
                           4808 ;	genFarPointerGet
   1216 90s00r8A           4809 	mov	dptr,#(_pinstatus + 0x0006)
   1219 E0                 4810 	movx	a,@dptr
                           4811 ;	genLeftShift
                           4812 ;	genLeftShiftLiteral
                           4813 ;	genlshOne
   121A FB                 4814 	mov	r3,a
                           4815 ;	Peephole 105	removed redundant mov
   121B 03                 4816 	rr	a
   121C 03                 4817 	rr	a
   121D 54 C0              4818 	anl	a,#0xc0
                           4819 ;	genOr
   121F FB                 4820 	mov	r3,a
                           4821 ;	Peephole 105	removed redundant mov
   1220 42 02              4822 	orl	ar2,a
                           4823 ;	genPointerGet
                           4824 ;	genFarPointerGet
   1222 90s00r8B           4825 	mov	dptr,#(_pinstatus + 0x0007)
   1225 E0                 4826 	movx	a,@dptr
                           4827 ;	genLeftShift
                           4828 ;	genLeftShiftLiteral
                           4829 ;	genlshOne
   1226 FB                 4830 	mov	r3,a
                           4831 ;	Peephole 105	removed redundant mov
   1227 03                 4832 	rr	a
   1228 54 80              4833 	anl	a,#0x80
                           4834 ;	genOr
   122A FB                 4835 	mov	r3,a
                           4836 ;	Peephole 105	removed redundant mov
   122B 42 02              4837 	orl	ar2,a
                           4838 ;	main.c:642: return finalstatus;
                           4839 ;	genRet
   122D 8A 82              4840 	mov	dpl,r2
                           4841 ;	Peephole 300	removed redundant label 00101$
   122F 22                 4842 	ret
                           4843 ;------------------------------------------------------------
                           4844 ;Allocation info for local variables in function 'displaystatus'
                           4845 ;------------------------------------------------------------
                           4846 ;i                         Allocated with name '_displaystatus_i_1_1'
                           4847 ;------------------------------------------------------------
                           4848 ;	main.c:654: void displaystatus()
                           4849 ;	-----------------------------------------
                           4850 ;	 function displaystatus
                           4851 ;	-----------------------------------------
   1230                    4852 _displaystatus:
                           4853 ;	main.c:658: for(i=0;i<8;i++)
                           4854 ;	genAssign
   1230 7A 00              4855 	mov	r2,#0x00
   1232 7B 00              4856 	mov	r3,#0x00
   1234                    4857 00104$:
                           4858 ;	genCmpLt
                           4859 ;	genCmp
   1234 C3                 4860 	clr	c
   1235 EA                 4861 	mov	a,r2
   1236 94 08              4862 	subb	a,#0x08
   1238 EB                 4863 	mov	a,r3
   1239 64 80              4864 	xrl	a,#0x80
   123B 94 80              4865 	subb	a,#0x80
                           4866 ;	genIfxJump
                           4867 ;	Peephole 108.a	removed ljmp by inverse jump logic
   123D 50 52              4868 	jnc	00108$
                           4869 ;	Peephole 300	removed redundant label 00114$
                           4870 ;	main.c:660: if(pinstatus[i]==1)   //Check if port pin is input or output
                           4871 ;	genPlus
                           4872 ;	Peephole 236.g	used r2 instead of ar2
   123F EA                 4873 	mov	a,r2
   1240 24r84              4874 	add	a,#_pinstatus
   1242 F5 82              4875 	mov	dpl,a
                           4876 ;	Peephole 236.g	used r3 instead of ar3
   1244 EB                 4877 	mov	a,r3
   1245 34s00              4878 	addc	a,#(_pinstatus >> 8)
   1247 F5 83              4879 	mov	dph,a
                           4880 ;	genPointerGet
                           4881 ;	genFarPointerGet
   1249 E0                 4882 	movx	a,@dptr
   124A FC                 4883 	mov	r4,a
                           4884 ;	genCmpEq
                           4885 ;	gencjneshort
                           4886 ;	Peephole 112.b	changed ljmp to sjmp
                           4887 ;	Peephole 198.b	optimized misc jump sequence
   124B BC 01 1F           4888 	cjne	r4,#0x01,00102$
                           4889 ;	Peephole 200.b	removed redundant sjmp
                           4890 ;	Peephole 300	removed redundant label 00115$
                           4891 ;	Peephole 300	removed redundant label 00116$
                           4892 ;	main.c:661: printf_tiny("P%d pin is a input pin\r\n",i);
                           4893 ;	genIpush
   124E C0 02              4894 	push	ar2
   1250 C0 03              4895 	push	ar3
   1252 C0 02              4896 	push	ar2
   1254 C0 03              4897 	push	ar3
                           4898 ;	genIpush
   1256 74r8F              4899 	mov	a,#__str_87
   1258 C0 E0              4900 	push	acc
   125A 74s0F              4901 	mov	a,#(__str_87 >> 8)
   125C C0 E0              4902 	push	acc
                           4903 ;	genCall
   125E 12s00r00           4904 	lcall	_printf_tiny
   1261 E5 81              4905 	mov	a,sp
   1263 24 FC              4906 	add	a,#0xfc
   1265 F5 81              4907 	mov	sp,a
   1267 D0 03              4908 	pop	ar3
   1269 D0 02              4909 	pop	ar2
                           4910 ;	Peephole 112.b	changed ljmp to sjmp
   126B 80 1D              4911 	sjmp	00106$
   126D                    4912 00102$:
                           4913 ;	main.c:663: printf_tiny("P%d pin is a output pin\r\n",i);
                           4914 ;	genIpush
   126D C0 02              4915 	push	ar2
   126F C0 03              4916 	push	ar3
   1271 C0 02              4917 	push	ar2
   1273 C0 03              4918 	push	ar3
                           4919 ;	genIpush
   1275 74rA8              4920 	mov	a,#__str_88
   1277 C0 E0              4921 	push	acc
   1279 74s0F              4922 	mov	a,#(__str_88 >> 8)
   127B C0 E0              4923 	push	acc
                           4924 ;	genCall
   127D 12s00r00           4925 	lcall	_printf_tiny
   1280 E5 81              4926 	mov	a,sp
   1282 24 FC              4927 	add	a,#0xfc
   1284 F5 81              4928 	mov	sp,a
   1286 D0 03              4929 	pop	ar3
   1288 D0 02              4930 	pop	ar2
   128A                    4931 00106$:
                           4932 ;	main.c:658: for(i=0;i<8;i++)
                           4933 ;	genPlus
                           4934 ;     genPlusIncr
   128A 0A                 4935 	inc	r2
                           4936 ;	Peephole 112.b	changed ljmp to sjmp
                           4937 ;	Peephole 243	avoided branch to sjmp
   128B BA 00 A6           4938 	cjne	r2,#0x00,00104$
   128E 0B                 4939 	inc	r3
                           4940 ;	Peephole 300	removed redundant label 00117$
   128F 80 A3              4941 	sjmp	00104$
   1291                    4942 00108$:
   1291 22                 4943 	ret
                           4944 ;------------------------------------------------------------
                           4945 ;Allocation info for local variables in function 'displaydata'
                           4946 ;------------------------------------------------------------
                           4947 ;i                         Allocated with name '_displaydata_i_1_1'
                           4948 ;------------------------------------------------------------
                           4949 ;	main.c:676: void displaydata()
                           4950 ;	-----------------------------------------
                           4951 ;	 function displaydata
                           4952 ;	-----------------------------------------
   1292                    4953 _displaydata:
                           4954 ;	main.c:679: dataread=IOEX_Read(); //Read data from the port pins
                           4955 ;	genCall
   1292 12s00r00           4956 	lcall	_IOEX_Read
   1295 E5 82              4957 	mov	a,dpl
                           4958 ;	genAssign
   1297 90s00r60           4959 	mov	dptr,#_dataread
   129A F0                 4960 	movx	@dptr,a
                           4961 ;	main.c:680: for(i=0;i<8;i++)
                           4962 ;	genAssign
   129B 7A 00              4963 	mov	r2,#0x00
   129D 7B 00              4964 	mov	r3,#0x00
   129F                    4965 00101$:
                           4966 ;	genCmpLt
                           4967 ;	genCmp
   129F C3                 4968 	clr	c
   12A0 EA                 4969 	mov	a,r2
   12A1 94 08              4970 	subb	a,#0x08
   12A3 EB                 4971 	mov	a,r3
   12A4 64 80              4972 	xrl	a,#0x80
   12A6 94 80              4973 	subb	a,#0x80
                           4974 ;	genIfxJump
                           4975 ;	Peephole 108.a	removed ljmp by inverse jump logic
   12A8 50 3E              4976 	jnc	00105$
                           4977 ;	Peephole 300	removed redundant label 00110$
                           4978 ;	main.c:682: printf_tiny("Data at Port Pin %d is %x\r\n",i,((dataread>>i)& 0x01));
                           4979 ;	genAssign
   12AA 90s00r60           4980 	mov	dptr,#_dataread
   12AD E0                 4981 	movx	a,@dptr
   12AE FC                 4982 	mov	r4,a
                           4983 ;	genRightShift
   12AF 8A F0              4984 	mov	b,r2
   12B1 05 F0              4985 	inc	b
   12B3 EC                 4986 	mov	a,r4
   12B4 80 02              4987 	sjmp	00112$
   12B6                    4988 00111$:
   12B6 C3                 4989 	clr	c
   12B7 13                 4990 	rrc	a
   12B8                    4991 00112$:
   12B8 D5 F0 FB           4992 	djnz	b,00111$
                           4993 ;	genAnd
   12BB 54 01              4994 	anl	a,#0x01
   12BD FC                 4995 	mov	r4,a
                           4996 ;	genCast
   12BE 7D 00              4997 	mov	r5,#0x00
                           4998 ;	genIpush
   12C0 C0 02              4999 	push	ar2
   12C2 C0 03              5000 	push	ar3
   12C4 C0 04              5001 	push	ar4
   12C6 C0 05              5002 	push	ar5
                           5003 ;	genIpush
   12C8 C0 02              5004 	push	ar2
   12CA C0 03              5005 	push	ar3
                           5006 ;	genIpush
   12CC 74rC2              5007 	mov	a,#__str_89
   12CE C0 E0              5008 	push	acc
   12D0 74s0F              5009 	mov	a,#(__str_89 >> 8)
   12D2 C0 E0              5010 	push	acc
                           5011 ;	genCall
   12D4 12s00r00           5012 	lcall	_printf_tiny
   12D7 E5 81              5013 	mov	a,sp
   12D9 24 FA              5014 	add	a,#0xfa
   12DB F5 81              5015 	mov	sp,a
   12DD D0 03              5016 	pop	ar3
   12DF D0 02              5017 	pop	ar2
                           5018 ;	main.c:680: for(i=0;i<8;i++)
                           5019 ;	genPlus
                           5020 ;     genPlusIncr
   12E1 0A                 5021 	inc	r2
                           5022 ;	Peephole 112.b	changed ljmp to sjmp
                           5023 ;	Peephole 243	avoided branch to sjmp
   12E2 BA 00 BA           5024 	cjne	r2,#0x00,00101$
   12E5 0B                 5025 	inc	r3
                           5026 ;	Peephole 300	removed redundant label 00113$
   12E6 80 B7              5027 	sjmp	00101$
   12E8                    5028 00105$:
   12E8 22                 5029 	ret
                           5030 ;------------------------------------------------------------
                           5031 ;Allocation info for local variables in function 'timer_isr'
                           5032 ;------------------------------------------------------------
                           5033 ;i                         Allocated with name '_timer_isr_i_1_1'
                           5034 ;------------------------------------------------------------
                           5035 ;	main.c:695: void timer_isr() interrupt 1
                           5036 ;	-----------------------------------------
                           5037 ;	 function timer_isr
                           5038 ;	-----------------------------------------
   12E9                    5039 _timer_isr:
   12E9 C0 E0              5040 	push	acc
   12EB C0 F0              5041 	push	b
   12ED C0 82              5042 	push	dpl
   12EF C0 83              5043 	push	dph
   12F1 C0 02              5044 	push	(0+2)
   12F3 C0 03              5045 	push	(0+3)
   12F5 C0 04              5046 	push	(0+4)
   12F7 C0 05              5047 	push	(0+5)
   12F9 C0 06              5048 	push	(0+6)
   12FB C0 07              5049 	push	(0+7)
   12FD C0 00              5050 	push	(0+0)
   12FF C0 01              5051 	push	(0+1)
   1301 C0 D0              5052 	push	psw
   1303 75 D0 00           5053 	mov	psw,#0x00
                           5054 ;	main.c:698: TH0 =   TIMERLOAD_HIGH; //Load the timer value
                           5055 ;	genAssign
   1306 75 8C 4E           5056 	mov	_TH0,#0x4E
                           5057 ;	main.c:699: TL0 =   TIMERLOAD_LOW;
                           5058 ;	genAssign
   1309 75 8A 00           5059 	mov	_TL0,#0x00
                           5060 ;	main.c:700: tflag++;
                           5061 ;	genAssign
   130C 90s00r3F           5062 	mov	dptr,#_tflag
   130F E0                 5063 	movx	a,@dptr
   1310 FA                 5064 	mov	r2,a
   1311 A3                 5065 	inc	dptr
   1312 E0                 5066 	movx	a,@dptr
   1313 FB                 5067 	mov	r3,a
                           5068 ;	genPlus
   1314 90s00r3F           5069 	mov	dptr,#_tflag
                           5070 ;     genPlusIncr
   1317 74 01              5071 	mov	a,#0x01
                           5072 ;	Peephole 236.a	used r2 instead of ar2
   1319 2A                 5073 	add	a,r2
   131A F0                 5074 	movx	@dptr,a
                           5075 ;	Peephole 181	changed mov to clr
   131B E4                 5076 	clr	a
                           5077 ;	Peephole 236.b	used r3 instead of ar3
   131C 3B                 5078 	addc	a,r3
   131D A3                 5079 	inc	dptr
   131E F0                 5080 	movx	@dptr,a
                           5081 ;	main.c:702: if(tflag==2)                             // Interrupt occurs every 50 ms , so for 100ms accuracy flag is compared with 2
                           5082 ;	genAssign
   131F 90s00r3F           5083 	mov	dptr,#_tflag
   1322 E0                 5084 	movx	a,@dptr
   1323 FA                 5085 	mov	r2,a
   1324 A3                 5086 	inc	dptr
   1325 E0                 5087 	movx	a,@dptr
   1326 FB                 5088 	mov	r3,a
                           5089 ;	genCmpEq
                           5090 ;	gencjneshort
                           5091 ;	Peephole 112.b	changed ljmp to sjmp
                           5092 ;	Peephole 198.a	optimized misc jump sequence
   1327 BA 02 0D           5093 	cjne	r2,#0x02,00103$
   132A BB 00 0A           5094 	cjne	r3,#0x00,00103$
                           5095 ;	Peephole 200.b	removed redundant sjmp
                           5096 ;	Peephole 300	removed redundant label 00106$
                           5097 ;	Peephole 300	removed redundant label 00107$
                           5098 ;	main.c:705: clock_control();                    // Clock control for displaying clock
                           5099 ;	genCall
   132D 12s00r00           5100 	lcall	_clock_control
                           5101 ;	main.c:706: tflag=0;
                           5102 ;	genAssign
   1330 90s00r3F           5103 	mov	dptr,#_tflag
   1333 E4                 5104 	clr	a
   1334 F0                 5105 	movx	@dptr,a
   1335 A3                 5106 	inc	dptr
   1336 F0                 5107 	movx	@dptr,a
   1337                    5108 00103$:
   1337 D0 D0              5109 	pop	psw
   1339 D0 01              5110 	pop	(0+1)
   133B D0 00              5111 	pop	(0+0)
   133D D0 07              5112 	pop	(0+7)
   133F D0 06              5113 	pop	(0+6)
   1341 D0 05              5114 	pop	(0+5)
   1343 D0 04              5115 	pop	(0+4)
   1345 D0 03              5116 	pop	(0+3)
   1347 D0 02              5117 	pop	(0+2)
   1349 D0 83              5118 	pop	dph
   134B D0 82              5119 	pop	dpl
   134D D0 F0              5120 	pop	b
   134F D0 E0              5121 	pop	acc
   1351 32                 5122 	reti
                           5123 ;------------------------------------------------------------
                           5124 ;Allocation info for local variables in function 'external_isr'
                           5125 ;------------------------------------------------------------
                           5126 ;------------------------------------------------------------
                           5127 ;	main.c:718: void external_isr() interrupt 0
                           5128 ;	-----------------------------------------
                           5129 ;	 function external_isr
                           5130 ;	-----------------------------------------
   1352                    5131 _external_isr:
   1352 C0 E0              5132 	push	acc
   1354 C0 F0              5133 	push	b
   1356 C0 82              5134 	push	dpl
   1358 C0 83              5135 	push	dph
   135A C0 02              5136 	push	(0+2)
   135C C0 03              5137 	push	(0+3)
   135E C0 04              5138 	push	(0+4)
   1360 C0 05              5139 	push	(0+5)
   1362 C0 06              5140 	push	(0+6)
   1364 C0 07              5141 	push	(0+7)
   1366 C0 00              5142 	push	(0+0)
   1368 C0 01              5143 	push	(0+1)
   136A C0 D0              5144 	push	psw
   136C 75 D0 00           5145 	mov	psw,#0x00
                           5146 ;	main.c:720: io_counter++;               // Increment the counter after every button press
                           5147 ;	genAssign
   136F 90s00r38           5148 	mov	dptr,#_io_counter
   1372 E0                 5149 	movx	a,@dptr
   1373 FA                 5150 	mov	r2,a
   1374 A3                 5151 	inc	dptr
   1375 E0                 5152 	movx	a,@dptr
   1376 FB                 5153 	mov	r3,a
                           5154 ;	genPlus
   1377 90s00r38           5155 	mov	dptr,#_io_counter
                           5156 ;     genPlusIncr
   137A 74 01              5157 	mov	a,#0x01
                           5158 ;	Peephole 236.a	used r2 instead of ar2
   137C 2A                 5159 	add	a,r2
   137D F0                 5160 	movx	@dptr,a
                           5161 ;	Peephole 181	changed mov to clr
   137E E4                 5162 	clr	a
                           5163 ;	Peephole 236.b	used r3 instead of ar3
   137F 3B                 5164 	addc	a,r3
   1380 A3                 5165 	inc	dptr
   1381 F0                 5166 	movx	@dptr,a
                           5167 ;	main.c:721: if(io_counter==16)          // After 16 counts reset the counter to 0;
                           5168 ;	genAssign
   1382 90s00r38           5169 	mov	dptr,#_io_counter
   1385 E0                 5170 	movx	a,@dptr
   1386 FA                 5171 	mov	r2,a
   1387 A3                 5172 	inc	dptr
   1388 E0                 5173 	movx	a,@dptr
   1389 FB                 5174 	mov	r3,a
                           5175 ;	genCmpEq
                           5176 ;	gencjneshort
                           5177 ;	Peephole 112.b	changed ljmp to sjmp
                           5178 ;	Peephole 198.a	optimized misc jump sequence
   138A BA 10 0A           5179 	cjne	r2,#0x10,00102$
   138D BB 00 07           5180 	cjne	r3,#0x00,00102$
                           5181 ;	Peephole 200.b	removed redundant sjmp
                           5182 ;	Peephole 300	removed redundant label 00106$
                           5183 ;	Peephole 300	removed redundant label 00107$
                           5184 ;	main.c:723: io_counter=0;
                           5185 ;	genAssign
   1390 90s00r38           5186 	mov	dptr,#_io_counter
   1393 E4                 5187 	clr	a
   1394 F0                 5188 	movx	@dptr,a
   1395 A3                 5189 	inc	dptr
   1396 F0                 5190 	movx	@dptr,a
   1397                    5191 00102$:
                           5192 ;	main.c:725: ioexp_count(io_counter);    //Function call to write the counter value on higher 4 port pins
                           5193 ;	genAssign
   1397 90s00r38           5194 	mov	dptr,#_io_counter
   139A E0                 5195 	movx	a,@dptr
   139B FA                 5196 	mov	r2,a
   139C A3                 5197 	inc	dptr
   139D E0                 5198 	movx	a,@dptr
   139E FB                 5199 	mov	r3,a
                           5200 ;	genCall
   139F 8A 82              5201 	mov	dpl,r2
   13A1 8B 83              5202 	mov	dph,r3
   13A3 12s00r00           5203 	lcall	_ioexp_count
                           5204 ;	Peephole 300	removed redundant label 00103$
   13A6 D0 D0              5205 	pop	psw
   13A8 D0 01              5206 	pop	(0+1)
   13AA D0 00              5207 	pop	(0+0)
   13AC D0 07              5208 	pop	(0+7)
   13AE D0 06              5209 	pop	(0+6)
   13B0 D0 05              5210 	pop	(0+5)
   13B2 D0 04              5211 	pop	(0+4)
   13B4 D0 03              5212 	pop	(0+3)
   13B6 D0 02              5213 	pop	(0+2)
   13B8 D0 83              5214 	pop	dph
   13BA D0 82              5215 	pop	dpl
   13BC D0 F0              5216 	pop	b
   13BE D0 E0              5217 	pop	acc
   13C0 32                 5218 	reti
                           5219 ;------------------------------------------------------------
                           5220 ;Allocation info for local variables in function 'timer2_isr'
                           5221 ;------------------------------------------------------------
                           5222 ;------------------------------------------------------------
                           5223 ;	main.c:738: void timer2_isr() interrupt 5
                           5224 ;	-----------------------------------------
                           5225 ;	 function timer2_isr
                           5226 ;	-----------------------------------------
   13C1                    5227 _timer2_isr:
   13C1 C0 E0              5228 	push	acc
   13C3 C0 82              5229 	push	dpl
   13C5 C0 83              5230 	push	dph
   13C7 C0 02              5231 	push	ar2
   13C9 C0 03              5232 	push	ar3
   13CB C0 D0              5233 	push	psw
   13CD 75 D0 00           5234 	mov	psw,#0x00
                           5235 ;	main.c:740: TR2=0; //Stop the timer2
                           5236 ;	genAssign
   13D0 C2 CA              5237 	clr	_TR2
                           5238 ;	main.c:741: TF2=0; //Clear the interrupt flag
                           5239 ;	genAssign
   13D2 C2 CF              5240 	clr	_TF2
                           5241 ;	main.c:742: TH2=0X00; //load the timer value again
                           5242 ;	genAssign
   13D4 75 CD 00           5243 	mov	_TH2,#0x00
                           5244 ;	main.c:743: TL2=0X00;
                           5245 ;	genAssign
   13D7 75 CC 00           5246 	mov	_TL2,#0x00
                           5247 ;	main.c:744: t2flag++; //Maintain a variable to store how many times timer2 interrupt has occurred to calculate time at the end of a string search
                           5248 ;	genAssign
   13DA 90s00r8D           5249 	mov	dptr,#_t2flag
   13DD E0                 5250 	movx	a,@dptr
   13DE FA                 5251 	mov	r2,a
   13DF A3                 5252 	inc	dptr
   13E0 E0                 5253 	movx	a,@dptr
   13E1 FB                 5254 	mov	r3,a
                           5255 ;	genPlus
   13E2 90s00r8D           5256 	mov	dptr,#_t2flag
                           5257 ;     genPlusIncr
   13E5 74 01              5258 	mov	a,#0x01
                           5259 ;	Peephole 236.a	used r2 instead of ar2
   13E7 2A                 5260 	add	a,r2
   13E8 F0                 5261 	movx	@dptr,a
                           5262 ;	Peephole 181	changed mov to clr
   13E9 E4                 5263 	clr	a
                           5264 ;	Peephole 236.b	used r3 instead of ar3
   13EA 3B                 5265 	addc	a,r3
   13EB A3                 5266 	inc	dptr
   13EC F0                 5267 	movx	@dptr,a
                           5268 ;	main.c:745: TR2=1; //Start the timer again
                           5269 ;	genAssign
   13ED D2 CA              5270 	setb	_TR2
                           5271 ;	Peephole 300	removed redundant label 00101$
   13EF D0 D0              5272 	pop	psw
   13F1 D0 03              5273 	pop	ar3
   13F3 D0 02              5274 	pop	ar2
   13F5 D0 83              5275 	pop	dph
   13F7 D0 82              5276 	pop	dpl
   13F9 D0 E0              5277 	pop	acc
   13FB 32                 5278 	reti
                           5279 ;	eliminated unneeded push/pop b
                           5280 ;------------------------------------------------------------
                           5281 ;Allocation info for local variables in function 'string_search'
                           5282 ;------------------------------------------------------------
                           5283 ;sloc0                     Allocated with name '_string_search_sloc0_1_0'
                           5284 ;sloc1                     Allocated with name '_string_search_sloc1_1_0'
                           5285 ;sloc2                     Allocated with name '_string_search_sloc2_1_0'
                           5286 ;sloc3                     Allocated with name '_string_search_sloc3_1_0'
                           5287 ;sloc4                     Allocated with name '_string_search_sloc4_1_0'
                           5288 ;sloc5                     Allocated with name '_string_search_sloc5_1_0'
                           5289 ;str_srch                  Allocated with name '_string_search_str_srch_1_1'
                           5290 ;str_temp                  Allocated with name '_string_search_str_temp_1_1'
                           5291 ;tempadd                   Allocated with name '_string_search_tempadd_1_1'
                           5292 ;permadd                   Allocated with name '_string_search_permadd_1_1'
                           5293 ;tempsearchadd             Allocated with name '_string_search_tempsearchadd_1_1'
                           5294 ;searchadd                 Allocated with name '_string_search_searchadd_1_1'
                           5295 ;counti                    Allocated with name '_string_search_counti_1_1'
                           5296 ;count_index               Allocated with name '_string_search_count_index_1_1'
                           5297 ;countsearch               Allocated with name '_string_search_countsearch_1_1'
                           5298 ;len                       Allocated with name '_string_search_len_1_1'
                           5299 ;searchcount               Allocated with name '_string_search_searchcount_1_1'
                           5300 ;j                         Allocated with name '_string_search_j_1_1'
                           5301 ;k                         Allocated with name '_string_search_k_1_1'
                           5302 ;m                         Allocated with name '_string_search_m_1_1'
                           5303 ;r                         Allocated with name '_string_search_r_1_1'
                           5304 ;i                         Allocated with name '_string_search_i_1_1'
                           5305 ;------------------------------------------------------------
                           5306 ;	main.c:756: void string_search()
                           5307 ;	-----------------------------------------
                           5308 ;	 function string_search
                           5309 ;	-----------------------------------------
   13FC                    5310 _string_search:
                           5311 ;	main.c:766: j=0;k=0;m=0;r=0;i=0;
                           5312 ;	genAssign
   13FC 90s00rFA           5313 	mov	dptr,#_string_search_r_1_1
   13FF E4                 5314 	clr	a
   1400 F0                 5315 	movx	@dptr,a
   1401 A3                 5316 	inc	dptr
   1402 F0                 5317 	movx	@dptr,a
                           5318 ;	main.c:767: t2flag=0;
                           5319 ;	genAssign
   1403 90s00r8D           5320 	mov	dptr,#_t2flag
   1406 E4                 5321 	clr	a
   1407 F0                 5322 	movx	@dptr,a
   1408 A3                 5323 	inc	dptr
   1409 F0                 5324 	movx	@dptr,a
                           5325 ;	main.c:768: time_value=0;
                           5326 ;	genAssign
   140A 90s00r8F           5327 	mov	dptr,#_time_value
   140D E4                 5328 	clr	a
   140E F0                 5329 	movx	@dptr,a
   140F A3                 5330 	inc	dptr
   1410 F0                 5331 	movx	@dptr,a
                           5332 ;	main.c:774: printf_tiny("Enter the string you want to search\r\n");
                           5333 ;	genIpush
   1411 74rDE              5334 	mov	a,#__str_90
   1413 C0 E0              5335 	push	acc
   1415 74s0F              5336 	mov	a,#(__str_90 >> 8)
   1417 C0 E0              5337 	push	acc
                           5338 ;	genCall
   1419 12s00r00           5339 	lcall	_printf_tiny
   141C 15 81              5340 	dec	sp
   141E 15 81              5341 	dec	sp
                           5342 ;	main.c:775: str_srch=getstr(); //Prompting the user to enter the string to be searched
                           5343 ;	genCall
   1420 12s00r00           5344 	lcall	_getstr
   1423 AA 82              5345 	mov	r2,dpl
   1425 AB 83              5346 	mov	r3,dph
   1427 AC F0              5347 	mov	r4,b
                           5348 ;	main.c:776: printf_tiny("The string you want to search is: ");
                           5349 ;	genIpush
   1429 C0 02              5350 	push	ar2
   142B C0 03              5351 	push	ar3
   142D C0 04              5352 	push	ar4
   142F 74r04              5353 	mov	a,#__str_91
   1431 C0 E0              5354 	push	acc
   1433 74s10              5355 	mov	a,#(__str_91 >> 8)
   1435 C0 E0              5356 	push	acc
                           5357 ;	genCall
   1437 12s00r00           5358 	lcall	_printf_tiny
   143A 15 81              5359 	dec	sp
   143C 15 81              5360 	dec	sp
   143E D0 04              5361 	pop	ar4
   1440 D0 03              5362 	pop	ar3
   1442 D0 02              5363 	pop	ar2
                           5364 ;	main.c:777: putstr(str_srch);
                           5365 ;	genCall
   1444 8A 82              5366 	mov	dpl,r2
   1446 8B 83              5367 	mov	dph,r3
   1448 8C F0              5368 	mov	b,r4
   144A C0 02              5369 	push	ar2
   144C C0 03              5370 	push	ar3
   144E C0 04              5371 	push	ar4
   1450 12s00r00           5372 	lcall	_putstr
   1453 D0 04              5373 	pop	ar4
   1455 D0 03              5374 	pop	ar3
   1457 D0 02              5375 	pop	ar2
                           5376 ;	main.c:778: printf_tiny("\r\n");
                           5377 ;	genIpush
   1459 C0 02              5378 	push	ar2
   145B C0 03              5379 	push	ar3
   145D C0 04              5380 	push	ar4
   145F 74r2B              5381 	mov	a,#__str_1
   1461 C0 E0              5382 	push	acc
   1463 74s00              5383 	mov	a,#(__str_1 >> 8)
   1465 C0 E0              5384 	push	acc
                           5385 ;	genCall
   1467 12s00r00           5386 	lcall	_printf_tiny
   146A 15 81              5387 	dec	sp
   146C 15 81              5388 	dec	sp
   146E D0 04              5389 	pop	ar4
   1470 D0 03              5390 	pop	ar3
   1472 D0 02              5391 	pop	ar2
                           5392 ;	main.c:779: while(*(str_srch+i)!='\0') //Loop till null character to find the length of the string
                           5393 ;	genAssign
   1474 7D 00              5394 	mov	r5,#0x00
   1476 7E 00              5395 	mov	r6,#0x00
                           5396 ;	genAssign
   1478 7F 00              5397 	mov	r7,#0x00
   147A 78 00              5398 	mov	r0,#0x00
   147C                    5399 00101$:
                           5400 ;	genIpush
   147C C0 05              5401 	push	ar5
   147E C0 06              5402 	push	ar6
                           5403 ;	genPlus
                           5404 ;	Peephole 236.g	used r7 instead of ar7
   1480 EF                 5405 	mov	a,r7
                           5406 ;	Peephole 236.a	used r2 instead of ar2
   1481 2A                 5407 	add	a,r2
   1482 F9                 5408 	mov	r1,a
                           5409 ;	Peephole 236.g	used r0 instead of ar0
   1483 E8                 5410 	mov	a,r0
                           5411 ;	Peephole 236.b	used r3 instead of ar3
   1484 3B                 5412 	addc	a,r3
   1485 FD                 5413 	mov	r5,a
   1486 8C 06              5414 	mov	ar6,r4
                           5415 ;	genPointerGet
                           5416 ;	genGenPointerGet
   1488 89 82              5417 	mov	dpl,r1
   148A 8D 83              5418 	mov	dph,r5
   148C 8E F0              5419 	mov	b,r6
   148E 12s00r00           5420 	lcall	__gptrget
   1491 F9                 5421 	mov	r1,a
                           5422 ;	genCmpEq
                           5423 ;	gencjne
                           5424 ;	gencjneshort
                           5425 ;	Peephole 241.d	optimized compare
   1492 E4                 5426 	clr	a
   1493 B9 00 01           5427 	cjne	r1,#0x00,00144$
   1496 04                 5428 	inc	a
   1497                    5429 00144$:
                           5430 ;	Peephole 300	removed redundant label 00145$
                           5431 ;	genIpop
   1497 D0 06              5432 	pop	ar6
   1499 D0 05              5433 	pop	ar5
                           5434 ;	genIfx
                           5435 ;	genIfxJump
                           5436 ;	Peephole 108.b	removed ljmp by inverse jump logic
   149B 70 0C              5437 	jnz	00103$
                           5438 ;	Peephole 300	removed redundant label 00146$
                           5439 ;	main.c:781: len++;
                           5440 ;	genPlus
                           5441 ;     genPlusIncr
   149D 0D                 5442 	inc	r5
   149E BD 00 01           5443 	cjne	r5,#0x00,00147$
   14A1 0E                 5444 	inc	r6
   14A2                    5445 00147$:
                           5446 ;	main.c:782: i++;
                           5447 ;	genPlus
                           5448 ;     genPlusIncr
   14A2 0F                 5449 	inc	r7
                           5450 ;	Peephole 112.b	changed ljmp to sjmp
                           5451 ;	Peephole 243	avoided branch to sjmp
   14A3 BF 00 D6           5452 	cjne	r7,#0x00,00101$
   14A6 08                 5453 	inc	r0
                           5454 ;	Peephole 300	removed redundant label 00148$
   14A7 80 D3              5455 	sjmp	00101$
   14A9                    5456 00103$:
                           5457 ;	main.c:784: printf_tiny("Length of the string to search is %d\r\n",len);
                           5458 ;	genIpush
   14A9 C0 02              5459 	push	ar2
   14AB C0 03              5460 	push	ar3
   14AD C0 04              5461 	push	ar4
   14AF C0 05              5462 	push	ar5
   14B1 C0 06              5463 	push	ar6
                           5464 ;	genIpush
   14B3 74r27              5465 	mov	a,#__str_92
   14B5 C0 E0              5466 	push	acc
   14B7 74s10              5467 	mov	a,#(__str_92 >> 8)
   14B9 C0 E0              5468 	push	acc
                           5469 ;	genCall
   14BB 12s00r00           5470 	lcall	_printf_tiny
   14BE E5 81              5471 	mov	a,sp
   14C0 24 FC              5472 	add	a,#0xfc
   14C2 F5 81              5473 	mov	sp,a
   14C4 D0 04              5474 	pop	ar4
   14C6 D0 03              5475 	pop	ar3
   14C8 D0 02              5476 	pop	ar2
                           5477 ;	main.c:785: i=0;
                           5478 ;	genAssign
   14CA 90s00rFC           5479 	mov	dptr,#_string_search_i_1_1
   14CD E4                 5480 	clr	a
   14CE F0                 5481 	movx	@dptr,a
   14CF A3                 5482 	inc	dptr
   14D0 F0                 5483 	movx	@dptr,a
                           5484 ;	main.c:786: flag=0;
                           5485 ;	genAssign
   14D1 90s00r31           5486 	mov	dptr,#_flag
   14D4 E4                 5487 	clr	a
   14D5 F0                 5488 	movx	@dptr,a
   14D6 A3                 5489 	inc	dptr
   14D7 F0                 5490 	movx	@dptr,a
                           5491 ;	main.c:787: TR2=1; //Starting timer2
                           5492 ;	genAssign
   14D8 D2 CA              5493 	setb	_TR2
                           5494 ;	main.c:788: back: while(*(str_srch+r)!='\0' && flag==0) //loop until null character in the string is reached or until search is finished in LCD DDRAM
                           5495 ;	genAssign
   14DA 90s00r92           5496 	mov	dptr,#_string_search_str_temp_1_1
   14DD E0                 5497 	movx	a,@dptr
   14DE F5*06              5498 	mov	_string_search_sloc3_1_0,a
   14E0 A3                 5499 	inc	dptr
   14E1 E0                 5500 	movx	a,@dptr
   14E2 F5*07              5501 	mov	(_string_search_sloc3_1_0 + 1),a
   14E4 A3                 5502 	inc	dptr
   14E5 E0                 5503 	movx	a,@dptr
   14E6 F5*08              5504 	mov	(_string_search_sloc3_1_0 + 2),a
                           5505 ;	genAssign
   14E8 78 00              5506 	mov	r0,#0x00
                           5507 ;	genAssign
                           5508 ;	Peephole 3.b	changed mov to clr
                           5509 ;	genAssign
                           5510 ;	genAssign
   14EA E4                 5511 	clr	a
   14EB F9                 5512 	mov	r1,a
   14EC F5*00              5513 	mov	_string_search_sloc0_1_0,a
   14EE F5*01              5514 	mov	(_string_search_sloc0_1_0 + 1),a
                           5515 ;	Peephole 3.e	removed redundant clr
   14F0 F5*02              5516 	mov	_string_search_sloc1_1_0,a
   14F2 F5*03              5517 	mov	(_string_search_sloc1_1_0 + 1),a
                           5518 ;	Peephole 3.d	removed redundant clr
   14F4 F5*04              5519 	mov	_string_search_sloc2_1_0,a
   14F6 F5*05              5520 	mov	(_string_search_sloc2_1_0 + 1),a
   14F8                    5521 00123$:
                           5522 ;	genIpush
   14F8 C0 00              5523 	push	ar0
   14FA C0 01              5524 	push	ar1
                           5525 ;	genAssign
   14FC 90s00rFA           5526 	mov	dptr,#_string_search_r_1_1
   14FF E0                 5527 	movx	a,@dptr
   1500 F8                 5528 	mov	r0,a
   1501 A3                 5529 	inc	dptr
   1502 E0                 5530 	movx	a,@dptr
   1503 F9                 5531 	mov	r1,a
                           5532 ;	genPlus
                           5533 ;	Peephole 236.g	used r0 instead of ar0
   1504 E8                 5534 	mov	a,r0
                           5535 ;	Peephole 236.a	used r2 instead of ar2
   1505 2A                 5536 	add	a,r2
   1506 F8                 5537 	mov	r0,a
                           5538 ;	Peephole 236.g	used r1 instead of ar1
   1507 E9                 5539 	mov	a,r1
                           5540 ;	Peephole 236.b	used r3 instead of ar3
   1508 3B                 5541 	addc	a,r3
   1509 F9                 5542 	mov	r1,a
   150A 8C 05              5543 	mov	ar5,r4
                           5544 ;	genPointerGet
                           5545 ;	genGenPointerGet
   150C 88 82              5546 	mov	dpl,r0
   150E 89 83              5547 	mov	dph,r1
   1510 8D F0              5548 	mov	b,r5
   1512 12s00r00           5549 	lcall	__gptrget
   1515 F8                 5550 	mov	r0,a
                           5551 ;	genCmpEq
                           5552 ;	gencjne
                           5553 ;	gencjneshort
                           5554 ;	Peephole 241.d	optimized compare
   1516 E4                 5555 	clr	a
   1517 B8 00 01           5556 	cjne	r0,#0x00,00149$
   151A 04                 5557 	inc	a
   151B                    5558 00149$:
                           5559 ;	Peephole 300	removed redundant label 00150$
                           5560 ;	genIpop
   151B D0 01              5561 	pop	ar1
   151D D0 00              5562 	pop	ar0
                           5563 ;	genIfx
                           5564 ;	genIfxJump
   151F 60 03              5565 	jz	00151$
   1521 02s18rD5           5566 	ljmp	00125$
   1524                    5567 00151$:
                           5568 ;	genAssign
   1524 90s00r31           5569 	mov	dptr,#_flag
   1527 E0                 5570 	movx	a,@dptr
   1528 FD                 5571 	mov	r5,a
   1529 A3                 5572 	inc	dptr
   152A E0                 5573 	movx	a,@dptr
                           5574 ;	genIfx
   152B FE                 5575 	mov	r6,a
                           5576 ;	Peephole 135	removed redundant mov
   152C 4D                 5577 	orl	a,r5
                           5578 ;	genIfxJump
   152D 60 03              5579 	jz	00152$
   152F 02s18rD5           5580 	ljmp	00125$
   1532                    5581 00152$:
                           5582 ;	main.c:791: if(i<16)      //searching through row 1
                           5583 ;	genAssign
   1532 90s00rFC           5584 	mov	dptr,#_string_search_i_1_1
   1535 E0                 5585 	movx	a,@dptr
   1536 FD                 5586 	mov	r5,a
   1537 A3                 5587 	inc	dptr
   1538 E0                 5588 	movx	a,@dptr
   1539 FE                 5589 	mov	r6,a
                           5590 ;	genCmpLt
                           5591 ;	genCmp
   153A C3                 5592 	clr	c
   153B ED                 5593 	mov	a,r5
   153C 94 10              5594 	subb	a,#0x10
   153E EE                 5595 	mov	a,r6
   153F 64 80              5596 	xrl	a,#0x80
   1541 94 80              5597 	subb	a,#0x80
                           5598 ;	genIfxJump
                           5599 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1543 50 3E              5600 	jnc	00115$
                           5601 ;	Peephole 300	removed redundant label 00153$
                           5602 ;	main.c:793: lcdputcmd(DDRAMCMD_L1+i);
                           5603 ;	genCast
   1545 8D 07              5604 	mov	ar7,r5
                           5605 ;	genPlus
                           5606 ;     genPlusIncr
   1547 74 80              5607 	mov	a,#0x80
                           5608 ;	Peephole 236.a	used r7 instead of ar7
   1549 2F                 5609 	add	a,r7
                           5610 ;	genCall
   154A FF                 5611 	mov	r7,a
                           5612 ;	Peephole 244.c	loading dpl from a instead of r7
   154B F5 82              5613 	mov	dpl,a
   154D C0 02              5614 	push	ar2
   154F C0 03              5615 	push	ar3
   1551 C0 04              5616 	push	ar4
   1553 C0 05              5617 	push	ar5
   1555 C0 06              5618 	push	ar6
   1557 C0 07              5619 	push	ar7
   1559 C0 00              5620 	push	ar0
   155B C0 01              5621 	push	ar1
   155D 12s00r00           5622 	lcall	_lcdputcmd
   1560 D0 01              5623 	pop	ar1
   1562 D0 00              5624 	pop	ar0
   1564 D0 07              5625 	pop	ar7
   1566 D0 06              5626 	pop	ar6
   1568 D0 05              5627 	pop	ar5
   156A D0 04              5628 	pop	ar4
   156C D0 03              5629 	pop	ar3
   156E D0 02              5630 	pop	ar2
                           5631 ;	main.c:794: searchadd= (DDRAMCMD_L1+i);
                           5632 ;	genAssign
   1570 90s00rF9           5633 	mov	dptr,#_string_search_searchadd_1_1
   1573 EF                 5634 	mov	a,r7
   1574 F0                 5635 	movx	@dptr,a
                           5636 ;	main.c:795: i++;
                           5637 ;	genPlus
   1575 90s00rFC           5638 	mov	dptr,#_string_search_i_1_1
                           5639 ;     genPlusIncr
   1578 74 01              5640 	mov	a,#0x01
                           5641 ;	Peephole 236.a	used r5 instead of ar5
   157A 2D                 5642 	add	a,r5
   157B F0                 5643 	movx	@dptr,a
                           5644 ;	Peephole 181	changed mov to clr
   157C E4                 5645 	clr	a
                           5646 ;	Peephole 236.b	used r6 instead of ar6
   157D 3E                 5647 	addc	a,r6
   157E A3                 5648 	inc	dptr
   157F F0                 5649 	movx	@dptr,a
   1580 02s16rA0           5650 	ljmp	00116$
   1583                    5651 00115$:
                           5652 ;	main.c:797: else if(i<32)  //searching through row 2
                           5653 ;	genCmpLt
                           5654 ;	genCmp
   1583 C3                 5655 	clr	c
   1584 ED                 5656 	mov	a,r5
   1585 94 20              5657 	subb	a,#0x20
   1587 EE                 5658 	mov	a,r6
   1588 64 80              5659 	xrl	a,#0x80
   158A 94 80              5660 	subb	a,#0x80
                           5661 ;	genIfxJump
                           5662 ;	Peephole 108.a	removed ljmp by inverse jump logic
   158C 50 46              5663 	jnc	00112$
                           5664 ;	Peephole 300	removed redundant label 00154$
                           5665 ;	main.c:799: lcdputcmd(DDRAMCMD_L2+j);
                           5666 ;	genCast
   158E AF*02              5667 	mov	r7,_string_search_sloc1_1_0
                           5668 ;	genPlus
                           5669 ;     genPlusIncr
   1590 74 C0              5670 	mov	a,#0xC0
                           5671 ;	Peephole 236.a	used r7 instead of ar7
   1592 2F                 5672 	add	a,r7
                           5673 ;	genCall
   1593 FF                 5674 	mov	r7,a
                           5675 ;	Peephole 244.c	loading dpl from a instead of r7
   1594 F5 82              5676 	mov	dpl,a
   1596 C0 02              5677 	push	ar2
   1598 C0 03              5678 	push	ar3
   159A C0 04              5679 	push	ar4
   159C C0 05              5680 	push	ar5
   159E C0 06              5681 	push	ar6
   15A0 C0 07              5682 	push	ar7
   15A2 C0 00              5683 	push	ar0
   15A4 C0 01              5684 	push	ar1
   15A6 12s00r00           5685 	lcall	_lcdputcmd
   15A9 D0 01              5686 	pop	ar1
   15AB D0 00              5687 	pop	ar0
   15AD D0 07              5688 	pop	ar7
   15AF D0 06              5689 	pop	ar6
   15B1 D0 05              5690 	pop	ar5
   15B3 D0 04              5691 	pop	ar4
   15B5 D0 03              5692 	pop	ar3
   15B7 D0 02              5693 	pop	ar2
                           5694 ;	main.c:800: searchadd= (DDRAMCMD_L2+j);
                           5695 ;	genAssign
   15B9 90s00rF9           5696 	mov	dptr,#_string_search_searchadd_1_1
   15BC EF                 5697 	mov	a,r7
   15BD F0                 5698 	movx	@dptr,a
                           5699 ;	main.c:801: j++;
                           5700 ;	genPlus
                           5701 ;     genPlusIncr
   15BE 05*02              5702 	inc	_string_search_sloc1_1_0
   15C0 E4                 5703 	clr	a
   15C1 B5*02 02           5704 	cjne	a,_string_search_sloc1_1_0,00155$
   15C4 05*03              5705 	inc	(_string_search_sloc1_1_0 + 1)
   15C6                    5706 00155$:
                           5707 ;	main.c:802: i++;
                           5708 ;	genPlus
   15C6 90s00rFC           5709 	mov	dptr,#_string_search_i_1_1
                           5710 ;     genPlusIncr
   15C9 74 01              5711 	mov	a,#0x01
                           5712 ;	Peephole 236.a	used r5 instead of ar5
   15CB 2D                 5713 	add	a,r5
   15CC F0                 5714 	movx	@dptr,a
                           5715 ;	Peephole 181	changed mov to clr
   15CD E4                 5716 	clr	a
                           5717 ;	Peephole 236.b	used r6 instead of ar6
   15CE 3E                 5718 	addc	a,r6
   15CF A3                 5719 	inc	dptr
   15D0 F0                 5720 	movx	@dptr,a
   15D1 02s16rA0           5721 	ljmp	00116$
   15D4                    5722 00112$:
                           5723 ;	main.c:804: else if(i<48) //searching through row 3
                           5724 ;	genCmpLt
                           5725 ;	genCmp
   15D4 C3                 5726 	clr	c
   15D5 ED                 5727 	mov	a,r5
   15D6 94 30              5728 	subb	a,#0x30
   15D8 EE                 5729 	mov	a,r6
   15D9 64 80              5730 	xrl	a,#0x80
   15DB 94 80              5731 	subb	a,#0x80
                           5732 ;	genIfxJump
                           5733 ;	Peephole 108.a	removed ljmp by inverse jump logic
   15DD 50 46              5734 	jnc	00109$
                           5735 ;	Peephole 300	removed redundant label 00156$
                           5736 ;	main.c:806: lcdputcmd(DDRAMCMD_L3+k);
                           5737 ;	genCast
   15DF AF*00              5738 	mov	r7,_string_search_sloc0_1_0
                           5739 ;	genPlus
                           5740 ;     genPlusIncr
   15E1 74 90              5741 	mov	a,#0x90
                           5742 ;	Peephole 236.a	used r7 instead of ar7
   15E3 2F                 5743 	add	a,r7
                           5744 ;	genCall
   15E4 FF                 5745 	mov	r7,a
                           5746 ;	Peephole 244.c	loading dpl from a instead of r7
   15E5 F5 82              5747 	mov	dpl,a
   15E7 C0 02              5748 	push	ar2
   15E9 C0 03              5749 	push	ar3
   15EB C0 04              5750 	push	ar4
   15ED C0 05              5751 	push	ar5
   15EF C0 06              5752 	push	ar6
   15F1 C0 07              5753 	push	ar7
   15F3 C0 00              5754 	push	ar0
   15F5 C0 01              5755 	push	ar1
   15F7 12s00r00           5756 	lcall	_lcdputcmd
   15FA D0 01              5757 	pop	ar1
   15FC D0 00              5758 	pop	ar0
   15FE D0 07              5759 	pop	ar7
   1600 D0 06              5760 	pop	ar6
   1602 D0 05              5761 	pop	ar5
   1604 D0 04              5762 	pop	ar4
   1606 D0 03              5763 	pop	ar3
   1608 D0 02              5764 	pop	ar2
                           5765 ;	main.c:807: searchadd=(DDRAMCMD_L3+k);
                           5766 ;	genAssign
   160A 90s00rF9           5767 	mov	dptr,#_string_search_searchadd_1_1
   160D EF                 5768 	mov	a,r7
   160E F0                 5769 	movx	@dptr,a
                           5770 ;	main.c:808: k++;
                           5771 ;	genPlus
                           5772 ;     genPlusIncr
   160F 05*00              5773 	inc	_string_search_sloc0_1_0
   1611 E4                 5774 	clr	a
   1612 B5*00 02           5775 	cjne	a,_string_search_sloc0_1_0,00157$
   1615 05*01              5776 	inc	(_string_search_sloc0_1_0 + 1)
   1617                    5777 00157$:
                           5778 ;	main.c:809: i++;
                           5779 ;	genPlus
   1617 90s00rFC           5780 	mov	dptr,#_string_search_i_1_1
                           5781 ;     genPlusIncr
   161A 74 01              5782 	mov	a,#0x01
                           5783 ;	Peephole 236.a	used r5 instead of ar5
   161C 2D                 5784 	add	a,r5
   161D F0                 5785 	movx	@dptr,a
                           5786 ;	Peephole 181	changed mov to clr
   161E E4                 5787 	clr	a
                           5788 ;	Peephole 236.b	used r6 instead of ar6
   161F 3E                 5789 	addc	a,r6
   1620 A3                 5790 	inc	dptr
   1621 F0                 5791 	movx	@dptr,a
   1622 02s16rA0           5792 	ljmp	00116$
   1625                    5793 00109$:
                           5794 ;	main.c:811: else if(i<64) //searching through row 4
                           5795 ;	genCmpLt
                           5796 ;	genCmp
   1625 C3                 5797 	clr	c
   1626 ED                 5798 	mov	a,r5
   1627 94 40              5799 	subb	a,#0x40
   1629 EE                 5800 	mov	a,r6
   162A 64 80              5801 	xrl	a,#0x80
   162C 94 80              5802 	subb	a,#0x80
                           5803 ;	genIfxJump
                           5804 ;	Peephole 108.a	removed ljmp by inverse jump logic
   162E 50 42              5805 	jnc	00106$
                           5806 ;	Peephole 300	removed redundant label 00158$
                           5807 ;	main.c:813: lcdputcmd(DDRAMCMD_L4+m);
                           5808 ;	genCast
   1630 88 07              5809 	mov	ar7,r0
                           5810 ;	genPlus
                           5811 ;     genPlusIncr
   1632 74 D0              5812 	mov	a,#0xD0
                           5813 ;	Peephole 236.a	used r7 instead of ar7
   1634 2F                 5814 	add	a,r7
                           5815 ;	genCall
   1635 FF                 5816 	mov	r7,a
                           5817 ;	Peephole 244.c	loading dpl from a instead of r7
   1636 F5 82              5818 	mov	dpl,a
   1638 C0 02              5819 	push	ar2
   163A C0 03              5820 	push	ar3
   163C C0 04              5821 	push	ar4
   163E C0 05              5822 	push	ar5
   1640 C0 06              5823 	push	ar6
   1642 C0 07              5824 	push	ar7
   1644 C0 00              5825 	push	ar0
   1646 C0 01              5826 	push	ar1
   1648 12s00r00           5827 	lcall	_lcdputcmd
   164B D0 01              5828 	pop	ar1
   164D D0 00              5829 	pop	ar0
   164F D0 07              5830 	pop	ar7
   1651 D0 06              5831 	pop	ar6
   1653 D0 05              5832 	pop	ar5
   1655 D0 04              5833 	pop	ar4
   1657 D0 03              5834 	pop	ar3
   1659 D0 02              5835 	pop	ar2
                           5836 ;	main.c:814: searchadd=(DDRAMCMD_L4+m);
                           5837 ;	genAssign
   165B 90s00rF9           5838 	mov	dptr,#_string_search_searchadd_1_1
   165E EF                 5839 	mov	a,r7
   165F F0                 5840 	movx	@dptr,a
                           5841 ;	main.c:815: m++;
                           5842 ;	genPlus
                           5843 ;     genPlusIncr
   1660 08                 5844 	inc	r0
   1661 B8 00 01           5845 	cjne	r0,#0x00,00159$
   1664 09                 5846 	inc	r1
   1665                    5847 00159$:
                           5848 ;	main.c:816: i++;
                           5849 ;	genPlus
   1665 90s00rFC           5850 	mov	dptr,#_string_search_i_1_1
                           5851 ;     genPlusIncr
   1668 74 01              5852 	mov	a,#0x01
                           5853 ;	Peephole 236.a	used r5 instead of ar5
   166A 2D                 5854 	add	a,r5
   166B F0                 5855 	movx	@dptr,a
                           5856 ;	Peephole 181	changed mov to clr
   166C E4                 5857 	clr	a
                           5858 ;	Peephole 236.b	used r6 instead of ar6
   166D 3E                 5859 	addc	a,r6
   166E A3                 5860 	inc	dptr
   166F F0                 5861 	movx	@dptr,a
                           5862 ;	Peephole 112.b	changed ljmp to sjmp
   1670 80 2E              5863 	sjmp	00116$
   1672                    5864 00106$:
                           5865 ;	main.c:820: printf_tiny("********************************Search is finished*****************************\r\n");
                           5866 ;	genIpush
   1672 C0 02              5867 	push	ar2
   1674 C0 03              5868 	push	ar3
   1676 C0 04              5869 	push	ar4
   1678 C0 00              5870 	push	ar0
   167A C0 01              5871 	push	ar1
   167C 74r4E              5872 	mov	a,#__str_93
   167E C0 E0              5873 	push	acc
   1680 74s10              5874 	mov	a,#(__str_93 >> 8)
   1682 C0 E0              5875 	push	acc
                           5876 ;	genCall
   1684 12s00r00           5877 	lcall	_printf_tiny
   1687 15 81              5878 	dec	sp
   1689 15 81              5879 	dec	sp
   168B D0 01              5880 	pop	ar1
   168D D0 00              5881 	pop	ar0
   168F D0 04              5882 	pop	ar4
   1691 D0 03              5883 	pop	ar3
   1693 D0 02              5884 	pop	ar2
                           5885 ;	main.c:821: TR2=0;
                           5886 ;	genAssign
   1695 C2 CA              5887 	clr	_TR2
                           5888 ;	main.c:822: flag=1;
                           5889 ;	genAssign
   1697 90s00r31           5890 	mov	dptr,#_flag
   169A 74 01              5891 	mov	a,#0x01
   169C F0                 5892 	movx	@dptr,a
   169D E4                 5893 	clr	a
   169E A3                 5894 	inc	dptr
   169F F0                 5895 	movx	@dptr,a
   16A0                    5896 00116$:
                           5897 ;	main.c:824: if(flag==0) //If search is not finished then read from a particular location
                           5898 ;	genAssign
   16A0 90s00r31           5899 	mov	dptr,#_flag
   16A3 E0                 5900 	movx	a,@dptr
   16A4 FD                 5901 	mov	r5,a
   16A5 A3                 5902 	inc	dptr
   16A6 E0                 5903 	movx	a,@dptr
                           5904 ;	genIfx
   16A7 FE                 5905 	mov	r6,a
                           5906 ;	Peephole 135	removed redundant mov
   16A8 4D                 5907 	orl	a,r5
                           5908 ;	genIfxJump
   16A9 60 03              5909 	jz	00160$
   16AB 02s17r7F           5910 	ljmp	00118$
   16AE                    5911 00160$:
                           5912 ;	main.c:826: lcdbusywait(); //LCD busy wait loop
                           5913 ;	genIpush
   16AE C0 00              5914 	push	ar0
   16B0 C0 01              5915 	push	ar1
                           5916 ;	genCall
   16B2 C0 02              5917 	push	ar2
   16B4 C0 03              5918 	push	ar3
   16B6 C0 04              5919 	push	ar4
   16B8 C0 00              5920 	push	ar0
   16BA C0 01              5921 	push	ar1
   16BC 12s00r00           5922 	lcall	_lcdbusywait
   16BF D0 01              5923 	pop	ar1
   16C1 D0 00              5924 	pop	ar0
   16C3 D0 04              5925 	pop	ar4
   16C5 D0 03              5926 	pop	ar3
   16C7 D0 02              5927 	pop	ar2
                           5928 ;	main.c:827: *(str_temp+r)=lcdread(); //Reading from DDRAM address and storing it in a string
                           5929 ;	genAssign
   16C9 90s00rFA           5930 	mov	dptr,#_string_search_r_1_1
   16CC E0                 5931 	movx	a,@dptr
   16CD FD                 5932 	mov	r5,a
   16CE A3                 5933 	inc	dptr
   16CF E0                 5934 	movx	a,@dptr
   16D0 FE                 5935 	mov	r6,a
                           5936 ;	genPlus
                           5937 ;	Peephole 236.g	used r5 instead of ar5
   16D1 ED                 5938 	mov	a,r5
   16D2 25*06              5939 	add	a,_string_search_sloc3_1_0
   16D4 FD                 5940 	mov	r5,a
                           5941 ;	Peephole 236.g	used r6 instead of ar6
   16D5 EE                 5942 	mov	a,r6
   16D6 35*07              5943 	addc	a,(_string_search_sloc3_1_0 + 1)
   16D8 FE                 5944 	mov	r6,a
   16D9 AF*08              5945 	mov	r7,(_string_search_sloc3_1_0 + 2)
                           5946 ;	genCall
   16DB C0 02              5947 	push	ar2
   16DD C0 03              5948 	push	ar3
   16DF C0 04              5949 	push	ar4
   16E1 C0 05              5950 	push	ar5
   16E3 C0 06              5951 	push	ar6
   16E5 C0 07              5952 	push	ar7
   16E7 C0 01              5953 	push	ar1
   16E9 12s00r00           5954 	lcall	_lcdread
   16EC A8 82              5955 	mov	r0,dpl
   16EE D0 01              5956 	pop	ar1
   16F0 D0 07              5957 	pop	ar7
   16F2 D0 06              5958 	pop	ar6
   16F4 D0 05              5959 	pop	ar5
   16F6 D0 04              5960 	pop	ar4
   16F8 D0 03              5961 	pop	ar3
   16FA D0 02              5962 	pop	ar2
                           5963 ;	genPointerSet
                           5964 ;	genGenPointerSet
   16FC 8D 82              5965 	mov	dpl,r5
   16FE 8E 83              5966 	mov	dph,r6
   1700 8F F0              5967 	mov	b,r7
   1702 E8                 5968 	mov	a,r0
   1703 12s00r00           5969 	lcall	__gptrput
                           5970 ;	main.c:828: printf_tiny("Read character: ");
                           5971 ;	genIpush
   1706 C0 02              5972 	push	ar2
   1708 C0 03              5973 	push	ar3
   170A C0 04              5974 	push	ar4
   170C C0 05              5975 	push	ar5
   170E C0 06              5976 	push	ar6
   1710 C0 07              5977 	push	ar7
   1712 C0 00              5978 	push	ar0
   1714 C0 01              5979 	push	ar1
   1716 74rA0              5980 	mov	a,#__str_94
   1718 C0 E0              5981 	push	acc
   171A 74s10              5982 	mov	a,#(__str_94 >> 8)
   171C C0 E0              5983 	push	acc
                           5984 ;	genCall
   171E 12s00r00           5985 	lcall	_printf_tiny
   1721 15 81              5986 	dec	sp
   1723 15 81              5987 	dec	sp
   1725 D0 01              5988 	pop	ar1
   1727 D0 00              5989 	pop	ar0
   1729 D0 07              5990 	pop	ar7
   172B D0 06              5991 	pop	ar6
   172D D0 05              5992 	pop	ar5
   172F D0 04              5993 	pop	ar4
   1731 D0 03              5994 	pop	ar3
   1733 D0 02              5995 	pop	ar2
                           5996 ;	main.c:829: putchar(*(str_temp+r));
                           5997 ;	genPointerGet
                           5998 ;	genGenPointerGet
   1735 8D 82              5999 	mov	dpl,r5
   1737 8E 83              6000 	mov	dph,r6
   1739 8F F0              6001 	mov	b,r7
   173B 12s00r00           6002 	lcall	__gptrget
                           6003 ;	genCall
   173E FD                 6004 	mov	r5,a
                           6005 ;	Peephole 244.c	loading dpl from a instead of r5
   173F F5 82              6006 	mov	dpl,a
   1741 C0 02              6007 	push	ar2
   1743 C0 03              6008 	push	ar3
   1745 C0 04              6009 	push	ar4
   1747 C0 00              6010 	push	ar0
   1749 C0 01              6011 	push	ar1
   174B 12s00r00           6012 	lcall	_putchar
   174E D0 01              6013 	pop	ar1
   1750 D0 00              6014 	pop	ar0
   1752 D0 04              6015 	pop	ar4
   1754 D0 03              6016 	pop	ar3
   1756 D0 02              6017 	pop	ar2
                           6018 ;	main.c:830: printf_tiny("\r\n");
                           6019 ;	genIpush
   1758 C0 02              6020 	push	ar2
   175A C0 03              6021 	push	ar3
   175C C0 04              6022 	push	ar4
   175E C0 00              6023 	push	ar0
   1760 C0 01              6024 	push	ar1
   1762 74r2B              6025 	mov	a,#__str_1
   1764 C0 E0              6026 	push	acc
   1766 74s00              6027 	mov	a,#(__str_1 >> 8)
   1768 C0 E0              6028 	push	acc
                           6029 ;	genCall
   176A 12s00r00           6030 	lcall	_printf_tiny
   176D 15 81              6031 	dec	sp
   176F 15 81              6032 	dec	sp
   1771 D0 01              6033 	pop	ar1
   1773 D0 00              6034 	pop	ar0
   1775 D0 04              6035 	pop	ar4
   1777 D0 03              6036 	pop	ar3
   1779 D0 02              6037 	pop	ar2
                           6038 ;	main.c:877: printf_tiny("*******************************total time value is s is %ds**********************************\r\n",time_value);
                           6039 ;	genIpop
   177B D0 01              6040 	pop	ar1
   177D D0 00              6041 	pop	ar0
                           6042 ;	main.c:830: printf_tiny("\r\n");
   177F                    6043 00118$:
                           6044 ;	main.c:832: if(*(str_srch+r)==*(str_temp+r)) //Comparing the each character obtained from LCD DDRAM with each character given by the user
                           6045 ;	genIpush
   177F C0 00              6046 	push	ar0
   1781 C0 01              6047 	push	ar1
                           6048 ;	genAssign
   1783 90s00rFA           6049 	mov	dptr,#_string_search_r_1_1
   1786 E0                 6050 	movx	a,@dptr
   1787 FD                 6051 	mov	r5,a
   1788 A3                 6052 	inc	dptr
   1789 E0                 6053 	movx	a,@dptr
   178A FE                 6054 	mov	r6,a
                           6055 ;	genPlus
                           6056 ;	Peephole 236.g	used r5 instead of ar5
   178B ED                 6057 	mov	a,r5
                           6058 ;	Peephole 236.a	used r2 instead of ar2
   178C 2A                 6059 	add	a,r2
   178D FF                 6060 	mov	r7,a
                           6061 ;	Peephole 236.g	used r6 instead of ar6
   178E EE                 6062 	mov	a,r6
                           6063 ;	Peephole 236.b	used r3 instead of ar3
   178F 3B                 6064 	addc	a,r3
   1790 F8                 6065 	mov	r0,a
   1791 8C 01              6066 	mov	ar1,r4
                           6067 ;	genPointerGet
                           6068 ;	genGenPointerGet
   1793 8F 82              6069 	mov	dpl,r7
   1795 88 83              6070 	mov	dph,r0
   1797 89 F0              6071 	mov	b,r1
   1799 12s00r00           6072 	lcall	__gptrget
   179C F5*09              6073 	mov	_string_search_sloc4_1_0,a
                           6074 ;	genPlus
                           6075 ;	Peephole 236.g	used r5 instead of ar5
   179E ED                 6076 	mov	a,r5
   179F 25*06              6077 	add	a,_string_search_sloc3_1_0
   17A1 F8                 6078 	mov	r0,a
                           6079 ;	Peephole 236.g	used r6 instead of ar6
   17A2 EE                 6080 	mov	a,r6
   17A3 35*07              6081 	addc	a,(_string_search_sloc3_1_0 + 1)
   17A5 F9                 6082 	mov	r1,a
   17A6 AF*08              6083 	mov	r7,(_string_search_sloc3_1_0 + 2)
                           6084 ;	genPointerGet
                           6085 ;	genGenPointerGet
   17A8 88 82              6086 	mov	dpl,r0
   17AA 89 83              6087 	mov	dph,r1
   17AC 8F F0              6088 	mov	b,r7
   17AE 12s00r00           6089 	lcall	__gptrget
   17B1 F8                 6090 	mov	r0,a
                           6091 ;	genCmpEq
                           6092 ;	gencjne
                           6093 ;	gencjneshort
   17B2 E5*09              6094 	mov	a,_string_search_sloc4_1_0
   17B4 B5 00 04           6095 	cjne	a,ar0,00161$
   17B7 74 01              6096 	mov	a,#0x01
   17B9 80 01              6097 	sjmp	00162$
   17BB                    6098 00161$:
   17BB E4                 6099 	clr	a
   17BC                    6100 00162$:
                           6101 ;	genIpop
   17BC D0 01              6102 	pop	ar1
   17BE D0 00              6103 	pop	ar0
                           6104 ;	genIfx
                           6105 ;	genIfxJump
   17C0 70 03              6106 	jnz	00163$
   17C2 02s18rCB           6107 	ljmp	00120$
   17C5                    6108 00163$:
                           6109 ;	main.c:834: tempadd[r]=(searchadd & 0X7F);//Storing address of each character in an array
                           6110 ;	genIpush
   17C5 C0 00              6111 	push	ar0
   17C7 C0 01              6112 	push	ar1
                           6113 ;	genPlus
                           6114 ;	Peephole 236.g	used r5 instead of ar5
   17C9 ED                 6115 	mov	a,r5
   17CA 24r95              6116 	add	a,#_string_search_tempadd_1_1
   17CC F5*0A              6117 	mov	_string_search_sloc5_1_0,a
                           6118 ;	Peephole 236.g	used r6 instead of ar6
   17CE EE                 6119 	mov	a,r6
   17CF 34s00              6120 	addc	a,#(_string_search_tempadd_1_1 >> 8)
   17D1 F5*0B              6121 	mov	(_string_search_sloc5_1_0 + 1),a
                           6122 ;	genAssign
   17D3 90s00rF9           6123 	mov	dptr,#_string_search_searchadd_1_1
   17D6 E0                 6124 	movx	a,@dptr
   17D7 F9                 6125 	mov	r1,a
                           6126 ;	genAnd
   17D8 53 01 7F           6127 	anl	ar1,#0x7F
                           6128 ;	genPointerSet
                           6129 ;     genFarPointerSet
   17DB 85*0A 82           6130 	mov	dpl,_string_search_sloc5_1_0
   17DE 85*0B 83           6131 	mov	dph,(_string_search_sloc5_1_0 + 1)
   17E1 E9                 6132 	mov	a,r1
   17E2 F0                 6133 	movx	@dptr,a
                           6134 ;	main.c:835: printf_tiny("Address captured is %x\r\n",searchadd);
                           6135 ;	genAssign
   17E3 90s00rF9           6136 	mov	dptr,#_string_search_searchadd_1_1
   17E6 E0                 6137 	movx	a,@dptr
   17E7 F9                 6138 	mov	r1,a
                           6139 ;	genCast
   17E8 7F 00              6140 	mov	r7,#0x00
                           6141 ;	genIpush
   17EA C0 02              6142 	push	ar2
   17EC C0 03              6143 	push	ar3
   17EE C0 04              6144 	push	ar4
   17F0 C0 05              6145 	push	ar5
   17F2 C0 06              6146 	push	ar6
   17F4 C0 00              6147 	push	ar0
   17F6 C0 01              6148 	push	ar1
   17F8 C0 01              6149 	push	ar1
   17FA C0 07              6150 	push	ar7
                           6151 ;	genIpush
   17FC 74rB1              6152 	mov	a,#__str_95
   17FE C0 E0              6153 	push	acc
   1800 74s10              6154 	mov	a,#(__str_95 >> 8)
   1802 C0 E0              6155 	push	acc
                           6156 ;	genCall
   1804 12s00r00           6157 	lcall	_printf_tiny
   1807 E5 81              6158 	mov	a,sp
   1809 24 FC              6159 	add	a,#0xfc
   180B F5 81              6160 	mov	sp,a
   180D D0 01              6161 	pop	ar1
   180F D0 00              6162 	pop	ar0
   1811 D0 06              6163 	pop	ar6
   1813 D0 05              6164 	pop	ar5
   1815 D0 04              6165 	pop	ar4
   1817 D0 03              6166 	pop	ar3
   1819 D0 02              6167 	pop	ar2
                           6168 ;	main.c:836: printf_tiny("Address captured is %d\r\n",searchadd);
                           6169 ;	genAssign
   181B 90s00rF9           6170 	mov	dptr,#_string_search_searchadd_1_1
   181E E0                 6171 	movx	a,@dptr
   181F FF                 6172 	mov	r7,a
                           6173 ;	genCast
   1820 78 00              6174 	mov	r0,#0x00
                           6175 ;	genIpush
   1822 C0 02              6176 	push	ar2
   1824 C0 03              6177 	push	ar3
   1826 C0 04              6178 	push	ar4
   1828 C0 05              6179 	push	ar5
   182A C0 06              6180 	push	ar6
   182C C0 00              6181 	push	ar0
   182E C0 01              6182 	push	ar1
   1830 C0 07              6183 	push	ar7
   1832 C0 00              6184 	push	ar0
                           6185 ;	genIpush
   1834 74rCA              6186 	mov	a,#__str_96
   1836 C0 E0              6187 	push	acc
   1838 74s10              6188 	mov	a,#(__str_96 >> 8)
   183A C0 E0              6189 	push	acc
                           6190 ;	genCall
   183C 12s00r00           6191 	lcall	_printf_tiny
   183F E5 81              6192 	mov	a,sp
   1841 24 FC              6193 	add	a,#0xfc
   1843 F5 81              6194 	mov	sp,a
   1845 D0 01              6195 	pop	ar1
   1847 D0 00              6196 	pop	ar0
   1849 D0 06              6197 	pop	ar6
   184B D0 05              6198 	pop	ar5
   184D D0 04              6199 	pop	ar4
   184F D0 03              6200 	pop	ar3
   1851 D0 02              6201 	pop	ar2
                           6202 ;	main.c:837: printf_tiny("temp Address captured is %x\r\n",tempadd[r]);
                           6203 ;	genPointerGet
                           6204 ;	genFarPointerGet
   1853 85*0A 82           6205 	mov	dpl,_string_search_sloc5_1_0
   1856 85*0B 83           6206 	mov	dph,(_string_search_sloc5_1_0 + 1)
   1859 E0                 6207 	movx	a,@dptr
   185A FF                 6208 	mov	r7,a
                           6209 ;	genCast
   185B 78 00              6210 	mov	r0,#0x00
                           6211 ;	genIpush
   185D C0 02              6212 	push	ar2
   185F C0 03              6213 	push	ar3
   1861 C0 04              6214 	push	ar4
   1863 C0 05              6215 	push	ar5
   1865 C0 06              6216 	push	ar6
   1867 C0 00              6217 	push	ar0
   1869 C0 01              6218 	push	ar1
   186B C0 07              6219 	push	ar7
   186D C0 00              6220 	push	ar0
                           6221 ;	genIpush
   186F 74rE3              6222 	mov	a,#__str_97
   1871 C0 E0              6223 	push	acc
   1873 74s10              6224 	mov	a,#(__str_97 >> 8)
   1875 C0 E0              6225 	push	acc
                           6226 ;	genCall
   1877 12s00r00           6227 	lcall	_printf_tiny
   187A E5 81              6228 	mov	a,sp
   187C 24 FC              6229 	add	a,#0xfc
   187E F5 81              6230 	mov	sp,a
   1880 D0 01              6231 	pop	ar1
   1882 D0 00              6232 	pop	ar0
   1884 D0 06              6233 	pop	ar6
   1886 D0 05              6234 	pop	ar5
   1888 D0 04              6235 	pop	ar4
   188A D0 03              6236 	pop	ar3
   188C D0 02              6237 	pop	ar2
                           6238 ;	main.c:838: printf_tiny("MATCHED\r\n");
                           6239 ;	genIpush
   188E C0 02              6240 	push	ar2
   1890 C0 03              6241 	push	ar3
   1892 C0 04              6242 	push	ar4
   1894 C0 05              6243 	push	ar5
   1896 C0 06              6244 	push	ar6
   1898 C0 00              6245 	push	ar0
   189A C0 01              6246 	push	ar1
   189C 74r01              6247 	mov	a,#__str_98
   189E C0 E0              6248 	push	acc
   18A0 74s11              6249 	mov	a,#(__str_98 >> 8)
   18A2 C0 E0              6250 	push	acc
                           6251 ;	genCall
   18A4 12s00r00           6252 	lcall	_printf_tiny
   18A7 15 81              6253 	dec	sp
   18A9 15 81              6254 	dec	sp
   18AB D0 01              6255 	pop	ar1
   18AD D0 00              6256 	pop	ar0
   18AF D0 06              6257 	pop	ar6
   18B1 D0 05              6258 	pop	ar5
   18B3 D0 04              6259 	pop	ar4
   18B5 D0 03              6260 	pop	ar3
   18B7 D0 02              6261 	pop	ar2
                           6262 ;	main.c:839: r++; //Incrementing an index to check if all characters in the string are matched
                           6263 ;	genPlus
   18B9 90s00rFA           6264 	mov	dptr,#_string_search_r_1_1
                           6265 ;     genPlusIncr
   18BC 74 01              6266 	mov	a,#0x01
                           6267 ;	Peephole 236.a	used r5 instead of ar5
   18BE 2D                 6268 	add	a,r5
   18BF F0                 6269 	movx	@dptr,a
                           6270 ;	Peephole 181	changed mov to clr
   18C0 E4                 6271 	clr	a
                           6272 ;	Peephole 236.b	used r6 instead of ar6
   18C1 3E                 6273 	addc	a,r6
   18C2 A3                 6274 	inc	dptr
   18C3 F0                 6275 	movx	@dptr,a
                           6276 ;	genIpop
   18C4 D0 01              6277 	pop	ar1
   18C6 D0 00              6278 	pop	ar0
   18C8 02s14rF8           6279 	ljmp	00123$
   18CB                    6280 00120$:
                           6281 ;	main.c:843: r=0; //If not matched then the string given by the user is again compared from the first character with the character in next LCD DDRAM address
                           6282 ;	genAssign
   18CB 90s00rFA           6283 	mov	dptr,#_string_search_r_1_1
   18CE E4                 6284 	clr	a
   18CF F0                 6285 	movx	@dptr,a
   18D0 A3                 6286 	inc	dptr
   18D1 F0                 6287 	movx	@dptr,a
   18D2 02s14rF8           6288 	ljmp	00123$
   18D5                    6289 00125$:
                           6290 ;	main.c:847: if(flag==0)//if search is finished an string is found
                           6291 ;	genAssign
   18D5 90s00r31           6292 	mov	dptr,#_flag
   18D8 E0                 6293 	movx	a,@dptr
   18D9 FD                 6294 	mov	r5,a
   18DA A3                 6295 	inc	dptr
   18DB E0                 6296 	movx	a,@dptr
                           6297 ;	genIfx
   18DC FE                 6298 	mov	r6,a
                           6299 ;	Peephole 135	removed redundant mov
   18DD 4D                 6300 	orl	a,r5
                           6301 ;	genIfxJump
   18DE 60 03              6302 	jz	00164$
   18E0 02s19r92           6303 	ljmp	00127$
   18E3                    6304 00164$:
                           6305 ;	main.c:849: searchcount++; //Increment the number of strings found
                           6306 ;	genPlus
                           6307 ;     genPlusIncr
   18E3 05*04              6308 	inc	_string_search_sloc2_1_0
   18E5 E4                 6309 	clr	a
   18E6 B5*04 02           6310 	cjne	a,_string_search_sloc2_1_0,00165$
   18E9 05*05              6311 	inc	(_string_search_sloc2_1_0 + 1)
   18EB                    6312 00165$:
                           6313 ;	main.c:850: permadd[searchcount]=tempadd[0]; //Obtain the address of the first character of the string
                           6314 ;	genPlus
   18EB E5*04              6315 	mov	a,_string_search_sloc2_1_0
   18ED 24rC7              6316 	add	a,#_string_search_permadd_1_1
   18EF FD                 6317 	mov	r5,a
   18F0 E5*05              6318 	mov	a,(_string_search_sloc2_1_0 + 1)
   18F2 34s00              6319 	addc	a,#(_string_search_permadd_1_1 >> 8)
   18F4 FE                 6320 	mov	r6,a
                           6321 ;	genPointerGet
                           6322 ;	genFarPointerGet
   18F5 90s00r95           6323 	mov	dptr,#_string_search_tempadd_1_1
   18F8 E0                 6324 	movx	a,@dptr
                           6325 ;	genPointerSet
                           6326 ;     genFarPointerSet
   18F9 FF                 6327 	mov	r7,a
   18FA 8D 82              6328 	mov	dpl,r5
   18FC 8E 83              6329 	mov	dph,r6
                           6330 ;	Peephole 136	removed redundant move
   18FE F0                 6331 	movx	@dptr,a
                           6332 ;	main.c:851: printf_tiny("******************************************Found the text********************************\r\n");
                           6333 ;	genIpush
   18FF C0 02              6334 	push	ar2
   1901 C0 03              6335 	push	ar3
   1903 C0 04              6336 	push	ar4
   1905 C0 05              6337 	push	ar5
   1907 C0 06              6338 	push	ar6
   1909 C0 00              6339 	push	ar0
   190B C0 01              6340 	push	ar1
   190D 74r0B              6341 	mov	a,#__str_99
   190F C0 E0              6342 	push	acc
   1911 74s11              6343 	mov	a,#(__str_99 >> 8)
   1913 C0 E0              6344 	push	acc
                           6345 ;	genCall
   1915 12s00r00           6346 	lcall	_printf_tiny
   1918 15 81              6347 	dec	sp
   191A 15 81              6348 	dec	sp
   191C D0 01              6349 	pop	ar1
   191E D0 00              6350 	pop	ar0
   1920 D0 06              6351 	pop	ar6
   1922 D0 05              6352 	pop	ar5
   1924 D0 04              6353 	pop	ar4
   1926 D0 03              6354 	pop	ar3
   1928 D0 02              6355 	pop	ar2
                           6356 ;	main.c:852: printf("******************************************Address of the string is: %02X********************************\r\n",permadd[searchcount]);
                           6357 ;	genPointerGet
                           6358 ;	genFarPointerGet
   192A 8D 82              6359 	mov	dpl,r5
   192C 8E 83              6360 	mov	dph,r6
   192E E0                 6361 	movx	a,@dptr
   192F FD                 6362 	mov	r5,a
                           6363 ;	genCast
   1930 7E 00              6364 	mov	r6,#0x00
                           6365 ;	genIpush
   1932 C0 02              6366 	push	ar2
   1934 C0 03              6367 	push	ar3
   1936 C0 04              6368 	push	ar4
   1938 C0 00              6369 	push	ar0
   193A C0 01              6370 	push	ar1
   193C C0 05              6371 	push	ar5
   193E C0 06              6372 	push	ar6
                           6373 ;	genIpush
   1940 74r66              6374 	mov	a,#__str_100
   1942 C0 E0              6375 	push	acc
   1944 74s11              6376 	mov	a,#(__str_100 >> 8)
   1946 C0 E0              6377 	push	acc
   1948 74 80              6378 	mov	a,#0x80
   194A C0 E0              6379 	push	acc
                           6380 ;	genCall
   194C 12s00r00           6381 	lcall	_printf
   194F E5 81              6382 	mov	a,sp
   1951 24 FB              6383 	add	a,#0xfb
   1953 F5 81              6384 	mov	sp,a
   1955 D0 01              6385 	pop	ar1
   1957 D0 00              6386 	pop	ar0
   1959 D0 04              6387 	pop	ar4
   195B D0 03              6388 	pop	ar3
   195D D0 02              6389 	pop	ar2
                           6390 ;	main.c:853: printf_tiny("**************************************Search count is %d**************************88\r\n",searchcount);
                           6391 ;	genIpush
   195F C0 02              6392 	push	ar2
   1961 C0 03              6393 	push	ar3
   1963 C0 04              6394 	push	ar4
   1965 C0 00              6395 	push	ar0
   1967 C0 01              6396 	push	ar1
   1969 C0*04              6397 	push	_string_search_sloc2_1_0
   196B C0*05              6398 	push	(_string_search_sloc2_1_0 + 1)
                           6399 ;	genIpush
   196D 74rD1              6400 	mov	a,#__str_101
   196F C0 E0              6401 	push	acc
   1971 74s11              6402 	mov	a,#(__str_101 >> 8)
   1973 C0 E0              6403 	push	acc
                           6404 ;	genCall
   1975 12s00r00           6405 	lcall	_printf_tiny
   1978 E5 81              6406 	mov	a,sp
   197A 24 FC              6407 	add	a,#0xfc
   197C F5 81              6408 	mov	sp,a
   197E D0 01              6409 	pop	ar1
   1980 D0 00              6410 	pop	ar0
   1982 D0 04              6411 	pop	ar4
   1984 D0 03              6412 	pop	ar3
   1986 D0 02              6413 	pop	ar2
                           6414 ;	main.c:854: r=0;
                           6415 ;	genAssign
   1988 90s00rFA           6416 	mov	dptr,#_string_search_r_1_1
   198B E4                 6417 	clr	a
   198C F0                 6418 	movx	@dptr,a
   198D A3                 6419 	inc	dptr
   198E F0                 6420 	movx	@dptr,a
                           6421 ;	main.c:855: goto back;
   198F 02s14rF8           6422 	ljmp	00123$
   1992                    6423 00127$:
                           6424 ;	main.c:860: time_value=TH2;
                           6425 ;	genCast
   1992 AA CD              6426 	mov	r2,_TH2
                           6427 ;	main.c:861: time_value= time_value<<8;
                           6428 ;	genLeftShift
                           6429 ;	genLeftShiftLiteral
                           6430 ;	genlshTwo
                           6431 ;	peephole 177.e	removed redundant move
   1994 8A 03              6432 	mov	ar3,r2
   1996 7A 00              6433 	mov	r2,#0x00
                           6434 ;	main.c:862: time_value|=TL2;
                           6435 ;	genCast
   1998 AC CC              6436 	mov	r4,_TL2
   199A 7D 00              6437 	mov	r5,#0x00
                           6438 ;	genOr
   199C 90s00r8F           6439 	mov	dptr,#_time_value
   199F EC                 6440 	mov	a,r4
   19A0 4A                 6441 	orl	a,r2
   19A1 F0                 6442 	movx	@dptr,a
   19A2 ED                 6443 	mov	a,r5
   19A3 4B                 6444 	orl	a,r3
   19A4 A3                 6445 	inc	dptr
   19A5 F0                 6446 	movx	@dptr,a
                           6447 ;	main.c:864: printf_tiny("Number of times interrupt is %d\r\n",t2flag);
                           6448 ;	genIpush
   19A6 90s00r8D           6449 	mov	dptr,#_t2flag
   19A9 E0                 6450 	movx	a,@dptr
   19AA C0 E0              6451 	push	acc
   19AC A3                 6452 	inc	dptr
   19AD E0                 6453 	movx	a,@dptr
   19AE C0 E0              6454 	push	acc
                           6455 ;	genIpush
   19B0 74r28              6456 	mov	a,#__str_102
   19B2 C0 E0              6457 	push	acc
   19B4 74s12              6458 	mov	a,#(__str_102 >> 8)
   19B6 C0 E0              6459 	push	acc
                           6460 ;	genCall
   19B8 12s00r00           6461 	lcall	_printf_tiny
   19BB E5 81              6462 	mov	a,sp
   19BD 24 FC              6463 	add	a,#0xfc
   19BF F5 81              6464 	mov	sp,a
                           6465 ;	main.c:865: printf_tiny("load value is %x\r\n",time_value);
                           6466 ;	genIpush
   19C1 90s00r8F           6467 	mov	dptr,#_time_value
   19C4 E0                 6468 	movx	a,@dptr
   19C5 C0 E0              6469 	push	acc
   19C7 A3                 6470 	inc	dptr
   19C8 E0                 6471 	movx	a,@dptr
   19C9 C0 E0              6472 	push	acc
                           6473 ;	genIpush
   19CB 74r4A              6474 	mov	a,#__str_103
   19CD C0 E0              6475 	push	acc
   19CF 74s12              6476 	mov	a,#(__str_103 >> 8)
   19D1 C0 E0              6477 	push	acc
                           6478 ;	genCall
   19D3 12s00r00           6479 	lcall	_printf_tiny
   19D6 E5 81              6480 	mov	a,sp
   19D8 24 FC              6481 	add	a,#0xfc
   19DA F5 81              6482 	mov	sp,a
                           6483 ;	main.c:867: time_value=(TIMEROVERFLOW_VALUE-time_value);
                           6484 ;	genAssign
   19DC 90s00r8F           6485 	mov	dptr,#_time_value
   19DF E0                 6486 	movx	a,@dptr
   19E0 FA                 6487 	mov	r2,a
   19E1 A3                 6488 	inc	dptr
   19E2 E0                 6489 	movx	a,@dptr
   19E3 FB                 6490 	mov	r3,a
                           6491 ;	genCast
                           6492 ;	genMinus
                           6493 ;	Peephole 3.a	changed mov to clr
                           6494 ;	Peephole 3.b	changed mov to clr
   19E4 E4                 6495 	clr	a
   19E5 FC                 6496 	mov	r4,a
   19E6 FD                 6497 	mov	r5,a
   19E7 C3                 6498 	clr	c
                           6499 ;	Peephole 236.l	used r2 instead of ar2
   19E8 9A                 6500 	subb	a,r2
   19E9 FA                 6501 	mov	r2,a
                           6502 ;	Peephole 181	changed mov to clr
   19EA E4                 6503 	clr	a
                           6504 ;	Peephole 236.l	used r3 instead of ar3
   19EB 9B                 6505 	subb	a,r3
   19EC FB                 6506 	mov	r3,a
   19ED 74 01              6507 	mov	a,#0x01
                           6508 ;	Peephole 236.l	used r4 instead of ar4
   19EF 9C                 6509 	subb	a,r4
   19F0 FC                 6510 	mov	r4,a
                           6511 ;	Peephole 181	changed mov to clr
   19F1 E4                 6512 	clr	a
                           6513 ;	Peephole 236.l	used r5 instead of ar5
   19F2 9D                 6514 	subb	a,r5
   19F3 FD                 6515 	mov	r5,a
                           6516 ;	genCast
   19F4 90s00r8F           6517 	mov	dptr,#_time_value
   19F7 EA                 6518 	mov	a,r2
   19F8 F0                 6519 	movx	@dptr,a
   19F9 A3                 6520 	inc	dptr
   19FA EB                 6521 	mov	a,r3
   19FB F0                 6522 	movx	@dptr,a
                           6523 ;	main.c:868: printf_tiny("load value is %x\r\n",time_value);
                           6524 ;	genIpush
   19FC 90s00r8F           6525 	mov	dptr,#_time_value
   19FF E0                 6526 	movx	a,@dptr
   1A00 C0 E0              6527 	push	acc
   1A02 A3                 6528 	inc	dptr
   1A03 E0                 6529 	movx	a,@dptr
   1A04 C0 E0              6530 	push	acc
                           6531 ;	genIpush
   1A06 74r4A              6532 	mov	a,#__str_103
   1A08 C0 E0              6533 	push	acc
   1A0A 74s12              6534 	mov	a,#(__str_103 >> 8)
   1A0C C0 E0              6535 	push	acc
                           6536 ;	genCall
   1A0E 12s00r00           6537 	lcall	_printf_tiny
   1A11 E5 81              6538 	mov	a,sp
   1A13 24 FC              6539 	add	a,#0xfc
   1A15 F5 81              6540 	mov	sp,a
                           6541 ;	main.c:869: time_value=(time_value*(1.085));
                           6542 ;	genAssign
   1A17 90s00r8F           6543 	mov	dptr,#_time_value
   1A1A E0                 6544 	movx	a,@dptr
   1A1B FA                 6545 	mov	r2,a
   1A1C A3                 6546 	inc	dptr
   1A1D E0                 6547 	movx	a,@dptr
   1A1E FB                 6548 	mov	r3,a
                           6549 ;	genCall
   1A1F 8A 82              6550 	mov	dpl,r2
   1A21 8B 83              6551 	mov	dph,r3
   1A23 12s00r00           6552 	lcall	___uint2fs
   1A26 AA 82              6553 	mov	r2,dpl
   1A28 AB 83              6554 	mov	r3,dph
   1A2A AC F0              6555 	mov	r4,b
   1A2C FD                 6556 	mov	r5,a
                           6557 ;	genIpush
   1A2D 74 48              6558 	mov	a,#0x48
   1A2F C0 E0              6559 	push	acc
   1A31 74 E1              6560 	mov	a,#0xE1
   1A33 C0 E0              6561 	push	acc
   1A35 74 8A              6562 	mov	a,#0x8A
   1A37 C0 E0              6563 	push	acc
   1A39 74 3F              6564 	mov	a,#0x3F
   1A3B C0 E0              6565 	push	acc
                           6566 ;	genCall
   1A3D 8A 82              6567 	mov	dpl,r2
   1A3F 8B 83              6568 	mov	dph,r3
   1A41 8C F0              6569 	mov	b,r4
   1A43 ED                 6570 	mov	a,r5
   1A44 12s00r00           6571 	lcall	___fsmul
   1A47 AA 82              6572 	mov	r2,dpl
   1A49 AB 83              6573 	mov	r3,dph
   1A4B AC F0              6574 	mov	r4,b
   1A4D FD                 6575 	mov	r5,a
   1A4E E5 81              6576 	mov	a,sp
   1A50 24 FC              6577 	add	a,#0xfc
   1A52 F5 81              6578 	mov	sp,a
                           6579 ;	genCall
   1A54 8A 82              6580 	mov	dpl,r2
   1A56 8B 83              6581 	mov	dph,r3
   1A58 8C F0              6582 	mov	b,r4
   1A5A ED                 6583 	mov	a,r5
   1A5B 12s00r00           6584 	lcall	___fs2uint
   1A5E E5 82              6585 	mov	a,dpl
   1A60 85 83 F0           6586 	mov	b,dph
                           6587 ;	genAssign
   1A63 90s00r8F           6588 	mov	dptr,#_time_value
   1A66 F0                 6589 	movx	@dptr,a
   1A67 A3                 6590 	inc	dptr
   1A68 E5 F0              6591 	mov	a,b
   1A6A F0                 6592 	movx	@dptr,a
                           6593 ;	main.c:870: time_value=time_value/1000;
                           6594 ;	genAssign
   1A6B 90s00r8F           6595 	mov	dptr,#_time_value
   1A6E E0                 6596 	movx	a,@dptr
   1A6F FA                 6597 	mov	r2,a
   1A70 A3                 6598 	inc	dptr
   1A71 E0                 6599 	movx	a,@dptr
   1A72 FB                 6600 	mov	r3,a
                           6601 ;	genAssign
   1A73 90s00r00           6602 	mov	dptr,#__divuint_PARM_2
   1A76 74 E8              6603 	mov	a,#0xE8
   1A78 F0                 6604 	movx	@dptr,a
   1A79 A3                 6605 	inc	dptr
   1A7A 74 03              6606 	mov	a,#0x03
   1A7C F0                 6607 	movx	@dptr,a
                           6608 ;	genCall
   1A7D 8A 82              6609 	mov	dpl,r2
   1A7F 8B 83              6610 	mov	dph,r3
   1A81 12s00r00           6611 	lcall	__divuint
   1A84 E5 82              6612 	mov	a,dpl
   1A86 85 83 F0           6613 	mov	b,dph
                           6614 ;	genAssign
   1A89 90s00r8F           6615 	mov	dptr,#_time_value
   1A8C F0                 6616 	movx	@dptr,a
   1A8D A3                 6617 	inc	dptr
   1A8E E5 F0              6618 	mov	a,b
   1A90 F0                 6619 	movx	@dptr,a
                           6620 ;	main.c:871: printf_tiny("time value is us is %d\r\n",time_value);
                           6621 ;	genIpush
   1A91 90s00r8F           6622 	mov	dptr,#_time_value
   1A94 E0                 6623 	movx	a,@dptr
   1A95 C0 E0              6624 	push	acc
   1A97 A3                 6625 	inc	dptr
   1A98 E0                 6626 	movx	a,@dptr
   1A99 C0 E0              6627 	push	acc
                           6628 ;	genIpush
   1A9B 74r5D              6629 	mov	a,#__str_104
   1A9D C0 E0              6630 	push	acc
   1A9F 74s12              6631 	mov	a,#(__str_104 >> 8)
   1AA1 C0 E0              6632 	push	acc
                           6633 ;	genCall
   1AA3 12s00r00           6634 	lcall	_printf_tiny
   1AA6 E5 81              6635 	mov	a,sp
   1AA8 24 FC              6636 	add	a,#0xfc
   1AAA F5 81              6637 	mov	sp,a
                           6638 ;	main.c:872: t2flag= t2flag*71.1;
                           6639 ;	genAssign
   1AAC 90s00r8D           6640 	mov	dptr,#_t2flag
   1AAF E0                 6641 	movx	a,@dptr
   1AB0 FA                 6642 	mov	r2,a
   1AB1 A3                 6643 	inc	dptr
   1AB2 E0                 6644 	movx	a,@dptr
   1AB3 FB                 6645 	mov	r3,a
                           6646 ;	genCall
   1AB4 8A 82              6647 	mov	dpl,r2
   1AB6 8B 83              6648 	mov	dph,r3
   1AB8 12s00r00           6649 	lcall	___uint2fs
   1ABB AA 82              6650 	mov	r2,dpl
   1ABD AB 83              6651 	mov	r3,dph
   1ABF AC F0              6652 	mov	r4,b
   1AC1 FD                 6653 	mov	r5,a
                           6654 ;	genIpush
   1AC2 74 33              6655 	mov	a,#0x33
   1AC4 C0 E0              6656 	push	acc
   1AC6 C0 E0              6657 	push	acc
   1AC8 74 8E              6658 	mov	a,#0x8E
   1ACA C0 E0              6659 	push	acc
   1ACC 74 42              6660 	mov	a,#0x42
   1ACE C0 E0              6661 	push	acc
                           6662 ;	genCall
   1AD0 8A 82              6663 	mov	dpl,r2
   1AD2 8B 83              6664 	mov	dph,r3
   1AD4 8C F0              6665 	mov	b,r4
   1AD6 ED                 6666 	mov	a,r5
   1AD7 12s00r00           6667 	lcall	___fsmul
   1ADA AA 82              6668 	mov	r2,dpl
   1ADC AB 83              6669 	mov	r3,dph
   1ADE AC F0              6670 	mov	r4,b
   1AE0 FD                 6671 	mov	r5,a
   1AE1 E5 81              6672 	mov	a,sp
   1AE3 24 FC              6673 	add	a,#0xfc
   1AE5 F5 81              6674 	mov	sp,a
                           6675 ;	genCall
   1AE7 8A 82              6676 	mov	dpl,r2
   1AE9 8B 83              6677 	mov	dph,r3
   1AEB 8C F0              6678 	mov	b,r4
   1AED ED                 6679 	mov	a,r5
   1AEE 12s00r00           6680 	lcall	___fs2uint
   1AF1 E5 82              6681 	mov	a,dpl
   1AF3 85 83 F0           6682 	mov	b,dph
                           6683 ;	genAssign
   1AF6 90s00r8D           6684 	mov	dptr,#_t2flag
   1AF9 F0                 6685 	movx	@dptr,a
   1AFA A3                 6686 	inc	dptr
   1AFB E5 F0              6687 	mov	a,b
   1AFD F0                 6688 	movx	@dptr,a
                           6689 ;	main.c:873: time_value= (time_value+t2flag);
                           6690 ;	genAssign
   1AFE 90s00r8D           6691 	mov	dptr,#_t2flag
   1B01 E0                 6692 	movx	a,@dptr
   1B02 FA                 6693 	mov	r2,a
   1B03 A3                 6694 	inc	dptr
   1B04 E0                 6695 	movx	a,@dptr
   1B05 FB                 6696 	mov	r3,a
                           6697 ;	genAssign
   1B06 90s00r8F           6698 	mov	dptr,#_time_value
   1B09 E0                 6699 	movx	a,@dptr
   1B0A FC                 6700 	mov	r4,a
   1B0B A3                 6701 	inc	dptr
   1B0C E0                 6702 	movx	a,@dptr
   1B0D FD                 6703 	mov	r5,a
                           6704 ;	genPlus
   1B0E 90s00r8F           6705 	mov	dptr,#_time_value
                           6706 ;	Peephole 236.g	used r2 instead of ar2
   1B11 EA                 6707 	mov	a,r2
                           6708 ;	Peephole 236.a	used r4 instead of ar4
   1B12 2C                 6709 	add	a,r4
   1B13 F0                 6710 	movx	@dptr,a
                           6711 ;	Peephole 236.g	used r3 instead of ar3
   1B14 EB                 6712 	mov	a,r3
                           6713 ;	Peephole 236.b	used r5 instead of ar5
   1B15 3D                 6714 	addc	a,r5
   1B16 A3                 6715 	inc	dptr
   1B17 F0                 6716 	movx	@dptr,a
                           6717 ;	main.c:874: printf_tiny("Number of times interrupt is %d\r\n",t2flag);
                           6718 ;	genIpush
   1B18 C0 02              6719 	push	ar2
   1B1A C0 03              6720 	push	ar3
                           6721 ;	genIpush
   1B1C 74r28              6722 	mov	a,#__str_102
   1B1E C0 E0              6723 	push	acc
   1B20 74s12              6724 	mov	a,#(__str_102 >> 8)
   1B22 C0 E0              6725 	push	acc
                           6726 ;	genCall
   1B24 12s00r00           6727 	lcall	_printf_tiny
   1B27 E5 81              6728 	mov	a,sp
   1B29 24 FC              6729 	add	a,#0xfc
   1B2B F5 81              6730 	mov	sp,a
                           6731 ;	main.c:875: printf_tiny("*******************************total time value is ms is %dms******************************\r\n",time_value);
                           6732 ;	genIpush
   1B2D 90s00r8F           6733 	mov	dptr,#_time_value
   1B30 E0                 6734 	movx	a,@dptr
   1B31 C0 E0              6735 	push	acc
   1B33 A3                 6736 	inc	dptr
   1B34 E0                 6737 	movx	a,@dptr
   1B35 C0 E0              6738 	push	acc
                           6739 ;	genIpush
   1B37 74r76              6740 	mov	a,#__str_105
   1B39 C0 E0              6741 	push	acc
   1B3B 74s12              6742 	mov	a,#(__str_105 >> 8)
   1B3D C0 E0              6743 	push	acc
                           6744 ;	genCall
   1B3F 12s00r00           6745 	lcall	_printf_tiny
   1B42 E5 81              6746 	mov	a,sp
   1B44 24 FC              6747 	add	a,#0xfc
   1B46 F5 81              6748 	mov	sp,a
                           6749 ;	main.c:876: time_value = time_value/1000;
                           6750 ;	genAssign
   1B48 90s00r8F           6751 	mov	dptr,#_time_value
   1B4B E0                 6752 	movx	a,@dptr
   1B4C FA                 6753 	mov	r2,a
   1B4D A3                 6754 	inc	dptr
   1B4E E0                 6755 	movx	a,@dptr
   1B4F FB                 6756 	mov	r3,a
                           6757 ;	genAssign
   1B50 90s00r00           6758 	mov	dptr,#__divuint_PARM_2
   1B53 74 E8              6759 	mov	a,#0xE8
   1B55 F0                 6760 	movx	@dptr,a
   1B56 A3                 6761 	inc	dptr
   1B57 74 03              6762 	mov	a,#0x03
   1B59 F0                 6763 	movx	@dptr,a
                           6764 ;	genCall
   1B5A 8A 82              6765 	mov	dpl,r2
   1B5C 8B 83              6766 	mov	dph,r3
   1B5E 12s00r00           6767 	lcall	__divuint
   1B61 E5 82              6768 	mov	a,dpl
   1B63 85 83 F0           6769 	mov	b,dph
                           6770 ;	genAssign
   1B66 90s00r8F           6771 	mov	dptr,#_time_value
   1B69 F0                 6772 	movx	@dptr,a
   1B6A A3                 6773 	inc	dptr
   1B6B E5 F0              6774 	mov	a,b
   1B6D F0                 6775 	movx	@dptr,a
                           6776 ;	main.c:877: printf_tiny("*******************************total time value is s is %ds**********************************\r\n",time_value);
                           6777 ;	genIpush
   1B6E 90s00r8F           6778 	mov	dptr,#_time_value
   1B71 E0                 6779 	movx	a,@dptr
   1B72 C0 E0              6780 	push	acc
   1B74 A3                 6781 	inc	dptr
   1B75 E0                 6782 	movx	a,@dptr
   1B76 C0 E0              6783 	push	acc
                           6784 ;	genIpush
   1B78 74rD4              6785 	mov	a,#__str_106
   1B7A C0 E0              6786 	push	acc
   1B7C 74s12              6787 	mov	a,#(__str_106 >> 8)
   1B7E C0 E0              6788 	push	acc
                           6789 ;	genCall
   1B80 12s00r00           6790 	lcall	_printf_tiny
   1B83 E5 81              6791 	mov	a,sp
   1B85 24 FC              6792 	add	a,#0xfc
   1B87 F5 81              6793 	mov	sp,a
                           6794 ;	Peephole 300	removed redundant label 00128$
   1B89 22                 6795 	ret
                           6796 ;------------------------------------------------------------
                           6797 ;Allocation info for local variables in function 'searchtimer_init'
                           6798 ;------------------------------------------------------------
                           6799 ;------------------------------------------------------------
                           6800 ;	main.c:882: void searchtimer_init()
                           6801 ;	-----------------------------------------
                           6802 ;	 function searchtimer_init
                           6803 ;	-----------------------------------------
   1B8A                    6804 _searchtimer_init:
                           6805 ;	main.c:884: T2MOD |= 0x00;  //Set Timer 2 to 16 bit Timer
                           6806 ;	genAssign
   1B8A 85 C9 C9           6807 	mov	_T2MOD,_T2MOD
                           6808 ;	main.c:885: TH2 =   0x00;  //load the counter value into the timer
                           6809 ;	genAssign
   1B8D 75 CD 00           6810 	mov	_TH2,#0x00
                           6811 ;	main.c:886: TL2 =   0x00;
                           6812 ;	genAssign
   1B90 75 CC 00           6813 	mov	_TL2,#0x00
                           6814 ;	main.c:887: IE  |= 0xA3;   //Enable Global interrupt, Timer 0 Interrupt ,External interrupt and Timer 2 Interrupt
                           6815 ;	genOr
   1B93 43 A8 A3           6816 	orl	_IE,#0xA3
                           6817 ;	Peephole 300	removed redundant label 00101$
   1B96 22                 6818 	ret
                           6819 	.area CSEG    (CODE)
                           6820 	.area CONST   (CODE)
   0000                    6821 __str_0:
   0000 0D                 6822 	.db 0x0D
   0001 0A                 6823 	.db 0x0A
   0002 2A 2A 2A 2A 2A 2A  6824 	.ascii "****************WELCOME***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 57 45
        4C 43 4F 4D 45 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0028 0D                 6825 	.db 0x0D
   0029 0A                 6826 	.db 0x0A
   002A 00                 6827 	.db 0x00
   002B                    6828 __str_1:
   002B 0D                 6829 	.db 0x0D
   002C 0A                 6830 	.db 0x0A
   002D 00                 6831 	.db 0x00
   002E                    6832 __str_2:
   002E 0D                 6833 	.db 0x0D
   002F 0A                 6834 	.db 0x0A
   0030 2A 2A 2A 2A 2A 2A  6835 	.ascii "******** MENU ********"
        2A 2A 20 4D 45 4E
        55 20 2A 2A 2A 2A
        2A 2A 2A 2A
   0046 0D                 6836 	.db 0x0D
   0047 0A                 6837 	.db 0x0A
   0048 00                 6838 	.db 0x00
   0049                    6839 __str_3:
   0049 2A 2A 2A 2A 2A 2A  6840 	.ascii "******** SELECT 'L' FOR LCD    ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 4C
        27 20 46 4F 52 20
        4C 43 44 20 20 20
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0073 0D                 6841 	.db 0x0D
   0074 0A                 6842 	.db 0x0A
   0075 00                 6843 	.db 0x00
   0076                    6844 __str_4:
   0076 2A 2A 2A 2A 2A 2A  6845 	.ascii "******** SELECT 'E' FOR EEPROM ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 45
        27 20 46 4F 52 20
        45 45 50 52 4F 4D
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   00A0 0D                 6846 	.db 0x0D
   00A1 0A                 6847 	.db 0x0A
   00A2 00                 6848 	.db 0x00
   00A3                    6849 __str_5:
   00A3 2A 2A 2A 2A 2A 2A  6850 	.ascii "******** SELECT 'C' FOR CLOCK   ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 43
        27 20 46 4F 52 20
        43 4C 4F 43 4B 20
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   00CE 0D                 6851 	.db 0x0D
   00CF 0A                 6852 	.db 0x0A
   00D0 00                 6853 	.db 0x00
   00D1                    6854 __str_6:
   00D1 2A 2A 2A 2A 2A 2A  6855 	.ascii "******** SELECT 'I' FOR IO EXPANDER   ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 49
        27 20 46 4F 52 20
        49 4F 20 45 58 50
        41 4E 44 45 52 20
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0102 0D                 6856 	.db 0x0D
   0103 0A                 6857 	.db 0x0A
   0104 00                 6858 	.db 0x00
   0105                    6859 __str_7:
   0105 54 68 65 20 63 6F  6860 	.ascii "The command you entered is"
        6D 6D 61 6E 64 20
        79 6F 75 20 65 6E
        74 65 72 65 64 20
        69 73
   011F 09                 6861 	.db 0x09
   0120 00                 6862 	.db 0x00
   0121                    6863 __str_8:
   0121 2A 2A 2A 2A 2A 2A  6864 	.ascii "************ LCD MENU **********"
        2A 2A 2A 2A 2A 2A
        20 4C 43 44 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0141 0D                 6865 	.db 0x0D
   0142 0A                 6866 	.db 0x0A
   0143 00                 6867 	.db 0x00
   0144                    6868 __str_9:
   0144 2A 2A 2A 2A 2A 2A  6869 	.ascii "********* SELECT 'C' for CGRAM DUMP ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        43 27 20 66 6F 72
        20 43 47 52 41 4D
        20 44 55 4D 50 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0173 0D                 6870 	.db 0x0D
   0174 0A                 6871 	.db 0x0A
   0175 00                 6872 	.db 0x00
   0176                    6873 __str_10:
   0176 2A 2A 2A 2A 2A 2A  6874 	.ascii "********* SELECT 'D' for DDRAM DUMP ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        44 27 20 66 6F 72
        20 44 44 52 41 4D
        20 44 55 4D 50 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   01A5 0D                 6875 	.db 0x0D
   01A6 0A                 6876 	.db 0x0A
   01A7 00                 6877 	.db 0x00
   01A8                    6878 __str_11:
   01A8 2A 2A 2A 2A 2A 2A  6879 	.ascii "********* SELECT 'P' for LCD PUT STRING  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        50 27 20 66 6F 72
        20 4C 43 44 20 50
        55 54 20 53 54 52
        49 4E 47 20 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   01DC 0D                 6880 	.db 0x0D
   01DD 0A                 6881 	.db 0x0A
   01DE 00                 6882 	.db 0x00
   01DF                    6883 __str_12:
   01DF 2A 2A 2A 2A 2A 2A  6884 	.ascii "********* SELECT 'L' for LCD CLEAR  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        4C 27 20 66 6F 72
        20 4C 43 44 20 43
        4C 45 41 52 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   020E 0D                 6885 	.db 0x0D
   020F 0A                 6886 	.db 0x0A
   0210 00                 6887 	.db 0x00
   0211                    6888 __str_13:
   0211 2A 2A 2A 2A 2A 2A  6889 	.ascii "********* SELECT 'R' for CUSTOM CHARACTER CREATE ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        43 52 45 41 54 45
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   024D 0D                 6890 	.db 0x0D
   024E 0A                 6891 	.db 0x0A
   024F 00                 6892 	.db 0x00
   0250                    6893 __str_14:
   0250 2A 2A 2A 2A 2A 2A  6894 	.ascii "********* SELECT 'H' for CUSTOM CHARACTER DISPLAY **********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        48 27 20 66 6F 72
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        44 49 53 50 4C 41
        59 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   028C 2A                 6895 	.ascii "*"
   028D 0D                 6896 	.db 0x0D
   028E 0A                 6897 	.db 0x0A
   028F 00                 6898 	.db 0x00
   0290                    6899 __str_15:
   0290 2A 2A 2A 2A 2A 2A  6900 	.ascii "********* SELECT 'F' for LCD FUN LOGO DISPLAY ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        46 27 20 66 6F 72
        20 4C 43 44 20 46
        55 4E 20 4C 4F 47
        4F 20 44 49 53 50
        4C 41 59 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   02C9 0D                 6901 	.db 0x0D
   02CA 0A                 6902 	.db 0x0A
   02CB 00                 6903 	.db 0x00
   02CC                    6904 __str_16:
   02CC 2A 2A 2A 2A 2A 2A  6905 	.ascii "********* SELECT 'S' for STRING SEARCH  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 53 54 52 49 4E
        47 20 53 45 41 52
        43 48 20 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   02FF 0D                 6906 	.db 0x0D
   0300 0A                 6907 	.db 0x0A
   0301 00                 6908 	.db 0x00
   0302                    6909 __str_17:
   0302 2A 2A 2A 2A 2A 2A  6910 	.ascii "********* SELECT 'M' for MAIN MENU  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        4D 27 20 66 6F 72
        20 4D 41 49 4E 20
        4D 45 4E 55 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0331 0D                 6911 	.db 0x0D
   0332 0A                 6912 	.db 0x0A
   0333 00                 6913 	.db 0x00
   0334                    6914 __str_18:
   0334 2A 2A 2A 2A 2A 2A  6915 	.ascii "************CGRAM DUMP MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        43 47 52 41 4D 20
        44 55 4D 50 20 4D
        4F 44 45 20 49 4E
        20 4C 43 44 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0363 0D                 6916 	.db 0x0D
   0364 0A                 6917 	.db 0x0A
   0365 00                 6918 	.db 0x00
   0366                    6919 __str_19:
   0366 2A 2A 2A 2A 2A 2A  6920 	.ascii "************DDRAM DUMP MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        44 44 52 41 4D 20
        44 55 4D 50 20 4D
        4F 44 45 20 49 4E
        20 4C 43 44 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0395 0D                 6921 	.db 0x0D
   0396 0A                 6922 	.db 0x0A
   0397 00                 6923 	.db 0x00
   0398                    6924 __str_20:
   0398 2A 2A 2A 2A 2A 2A  6925 	.ascii "************LCD PUT STRING*************"
        2A 2A 2A 2A 2A 2A
        4C 43 44 20 50 55
        54 20 53 54 52 49
        4E 47 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   03BF 0D                 6926 	.db 0x0D
   03C0 0A                 6927 	.db 0x0A
   03C1 00                 6928 	.db 0x00
   03C2                    6929 __str_21:
   03C2 45 53 44 20 4C 41  6930 	.ascii "ESD LAB"
        42
   03C9 00                 6931 	.db 0x00
   03CA                    6932 __str_22:
   03CA 2A 2A 2A 2A 2A 2A  6933 	.ascii "********Back to  Main Menu**********"
        2A 2A 42 61 63 6B
        20 74 6F 20 20 4D
        61 69 6E 20 4D 65
        6E 75 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   03EE 00                 6934 	.db 0x00
   03EF                    6935 __str_23:
   03EF 2A 2A 2A 2A 2A 2A  6936 	.ascii "************CLEAR LCD MODE IN LCD*************"
        2A 2A 2A 2A 2A 2A
        43 4C 45 41 52 20
        4C 43 44 20 4D 4F
        44 45 20 49 4E 20
        4C 43 44 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   041D 0D                 6937 	.db 0x0D
   041E 0A                 6938 	.db 0x0A
   041F 00                 6939 	.db 0x00
   0420                    6940 __str_24:
   0420 2A 2A 2A 2A 2A 2A  6941 	.ascii "******** CUSTOM CHARACTER DISPLAY MODE *********"
        2A 2A 20 43 55 53
        54 4F 4D 20 43 48
        41 52 41 43 54 45
        52 20 44 49 53 50
        4C 41 59 20 4D 4F
        44 45 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0450 00                 6942 	.db 0x00
   0451                    6943 __str_25:
   0451 2A 2A 2A 2A 2A 2A  6944 	.ascii "************ CUSTOM CHARACTER CREATE MODE *************"
        2A 2A 2A 2A 2A 2A
        20 43 55 53 54 4F
        4D 20 43 48 41 52
        41 43 54 45 52 20
        43 52 45 41 54 45
        20 4D 4F 44 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0488 0D                 6945 	.db 0x0D
   0489 0A                 6946 	.db 0x0A
   048A 00                 6947 	.db 0x00
   048B                    6948 __str_26:
   048B 2A 2A 2A 2A 2A 2A  6949 	.ascii "************ LCD FUN LOGO DISPLAY *************"
        2A 2A 2A 2A 2A 2A
        20 4C 43 44 20 46
        55 4E 20 4C 4F 47
        4F 20 44 49 53 50
        4C 41 59 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   04BA 0D                 6950 	.db 0x0D
   04BB 0A                 6951 	.db 0x0A
   04BC 00                 6952 	.db 0x00
   04BD                    6953 __str_27:
   04BD 2A 2A 2A 2A 2A 2A  6954 	.ascii "************ STRING SEARCH *************"
        2A 2A 2A 2A 2A 2A
        20 53 54 52 49 4E
        47 20 53 45 41 52
        43 48 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   04E5 0D                 6955 	.db 0x0D
   04E6 0A                 6956 	.db 0x0A
   04E7 00                 6957 	.db 0x00
   04E8                    6958 __str_28:
   04E8 50 6C 65 61 73 65  6959 	.ascii "Please enter a valid command"
        20 65 6E 74 65 72
        20 61 20 76 61 6C
        69 64 20 63 6F 6D
        6D 61 6E 64
   0504 0D                 6960 	.db 0x0D
   0505 0A                 6961 	.db 0x0A
   0506 00                 6962 	.db 0x00
   0507                    6963 __str_29:
   0507 2A 2A 2A 2A 2A 2A  6964 	.ascii "********* EEPROM MENU *********"
        2A 2A 2A 20 45 45
        50 52 4F 4D 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   0526 0D                 6965 	.db 0x0D
   0527 0A                 6966 	.db 0x0A
   0528 00                 6967 	.db 0x00
   0529                    6968 __str_30:
   0529 2A 2A 2A 2A 2A 2A  6969 	.ascii "********* SELECT 'W' for WRITE BYTE ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        57 27 20 66 6F 72
        20 57 52 49 54 45
        20 42 59 54 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   0558 0D                 6970 	.db 0x0D
   0559 0A                 6971 	.db 0x0A
   055A 00                 6972 	.db 0x00
   055B                    6973 __str_31:
   055B 2A 2A 2A 2A 2A 2A  6974 	.ascii "********* SELECT 'R' for READ BYTE  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 52 45 41 44 20
        42 59 54 45 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   058A 0D                 6975 	.db 0x0D
   058B 0A                 6976 	.db 0x0A
   058C 00                 6977 	.db 0x00
   058D                    6978 __str_32:
   058D 2A 2A 2A 2A 2A 2A  6979 	.ascii "********* SELECT 'H' for HEXDUMP    ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        48 27 20 66 6F 72
        20 48 45 58 44 55
        4D 50 20 20 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   05BC 0D                 6980 	.db 0x0D
   05BD 0A                 6981 	.db 0x0A
   05BE 00                 6982 	.db 0x00
   05BF                    6983 __str_33:
   05BF 2A 2A 2A 2A 2A 2A  6984 	.ascii "******** SELECT 'M' for MAIN MENU ***********"
        2A 2A 20 53 45 4C
        45 43 54 20 27 4D
        27 20 66 6F 72 20
        4D 41 49 4E 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   05EC 0D                 6985 	.db 0x0D
   05ED 0A                 6986 	.db 0x0A
   05EE 00                 6987 	.db 0x00
   05EF                    6988 __str_34:
   05EF 2A 2A 2A 2A 2A 2A  6989 	.ascii "***********WRITE BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 57
        52 49 54 45 20 42
        59 54 45 20 4D 4F
        44 45 20 49 4E 20
        45 45 50 52 4F 4D
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   061D 0D                 6990 	.db 0x0D
   061E 0A                 6991 	.db 0x0A
   061F 00                 6992 	.db 0x00
   0620                    6993 __str_35:
   0620 2A 2A 2A 2A 2A 2A  6994 	.ascii "***********READ BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 52
        45 41 44 20 42 59
        54 45 20 4D 4F 44
        45 20 49 4E 20 45
        45 50 52 4F 4D 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   064D 0D                 6995 	.db 0x0D
   064E 0A                 6996 	.db 0x0A
   064F 00                 6997 	.db 0x00
   0650                    6998 __str_36:
   0650 2A 2A 2A 2A 2A 2A  6999 	.ascii "***********HEXDUMP BYTE MODE IN EEPROM**********"
        2A 2A 2A 2A 2A 48
        45 58 44 55 4D 50
        20 42 59 54 45 20
        4D 4F 44 45 20 49
        4E 20 45 45 50 52
        4F 4D 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0680 0D                 7000 	.db 0x0D
   0681 0A                 7001 	.db 0x0A
   0682 00                 7002 	.db 0x00
   0683                    7003 __str_37:
   0683 2A 2A 2A 2A 2A 2A  7004 	.ascii "********Back to Main Menu**********"
        2A 2A 42 61 63 6B
        20 74 6F 20 4D 61
        69 6E 20 4D 65 6E
        75 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A
   06A6 00                 7005 	.db 0x00
   06A7                    7006 __str_38:
   06A7 2A 2A 2A 2A 2A 2A  7007 	.ascii "********* CLOCK MENU *********"
        2A 2A 2A 20 43 4C
        4F 43 4B 20 4D 45
        4E 55 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   06C5 0D                 7008 	.db 0x0D
   06C6 0A                 7009 	.db 0x0A
   06C7 00                 7010 	.db 0x00
   06C8                    7011 __str_39:
   06C8 2A 2A 2A 2A 2A 2A  7012 	.ascii "********* SELECT 'R' for CLOCK RESET ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 52 45 53 45 54
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   06F8 0D                 7013 	.db 0x0D
   06F9 0A                 7014 	.db 0x0A
   06FA 00                 7015 	.db 0x00
   06FB                    7016 __str_40:
   06FB 2A 2A 2A 2A 2A 2A  7017 	.ascii "********* SELECT 'S' for CLOCK STOP  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 53 54 4F 50 20
        20 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   072B 0D                 7018 	.db 0x0D
   072C 0A                 7019 	.db 0x0A
   072D 00                 7020 	.db 0x00
   072E                    7021 __str_41:
   072E 2A 2A 2A 2A 2A 2A  7022 	.ascii "********* SELECT 'T' for CLOCK RESTART   ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        54 27 20 66 6F 72
        20 43 4C 4F 43 4B
        20 52 45 53 54 41
        52 54 20 20 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0762 0D                 7023 	.db 0x0D
   0763 0A                 7024 	.db 0x0A
   0764 00                 7025 	.db 0x00
   0765                    7026 __str_42:
   0765 2A 2A 2A 2A 2A 2A  7027 	.ascii "*********** CLOCK RESET **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        52 45 53 45 54 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0787 0D                 7028 	.db 0x0D
   0788 0A                 7029 	.db 0x0A
   0789 00                 7030 	.db 0x00
   078A                    7031 __str_43:
   078A 2A 2A 2A 2A 2A 2A  7032 	.ascii "*********** CLOCK STOP **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        53 54 4F 50 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   07AB 0D                 7033 	.db 0x0D
   07AC 0A                 7034 	.db 0x0A
   07AD 00                 7035 	.db 0x00
   07AE                    7036 __str_44:
   07AE 2A 2A 2A 2A 2A 2A  7037 	.ascii "*********** CLOCK RESTART **********"
        2A 2A 2A 2A 2A 20
        43 4C 4F 43 4B 20
        52 45 53 54 41 52
        54 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   07D2 0D                 7038 	.db 0x0D
   07D3 0A                 7039 	.db 0x0A
   07D4 00                 7040 	.db 0x00
   07D5                    7041 __str_45:
   07D5 2A 2A 2A 2A 2A 2A  7042 	.ascii "********* I/O EXPANDER MENU *********"
        2A 2A 2A 20 49 2F
        4F 20 45 58 50 41
        4E 44 45 52 20 4D
        45 4E 55 20 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   07FA 0D                 7043 	.db 0x0D
   07FB 0A                 7044 	.db 0x0A
   07FC 00                 7045 	.db 0x00
   07FD                    7046 __str_46:
   07FD 2A 2A 2A 2A 2A 2A  7047 	.ascii "********* SELECT 'W' for I/O EXPANDER WRITE  ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        57 27 20 66 6F 72
        20 49 2F 4F 20 45
        58 50 41 4E 44 45
        52 20 57 52 49 54
        45 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   0835 0D                 7048 	.db 0x0D
   0836 0A                 7049 	.db 0x0A
   0837 00                 7050 	.db 0x00
   0838                    7051 __str_47:
   0838 2A 2A 2A 2A 2A 2A  7052 	.ascii "********* SELECT 'R' for I/O EXPANDER STATUS READ  *********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        52 27 20 66 6F 72
        20 49 2F 4F 20 45
        58 50 41 4E 44 45
        52 20 53 54 41 54
        55 53 20 52 45 41
        44 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   0874 2A 2A              7053 	.ascii "**"
   0876 0D                 7054 	.db 0x0D
   0877 0A                 7055 	.db 0x0A
   0878 00                 7056 	.db 0x00
   0879                    7057 __str_48:
   0879 2A 2A 2A 2A 2A 2A  7058 	.ascii "********* SELECT 'D' for I/O PORT PIN DIRECTION CHANGE   ***"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        44 27 20 66 6F 72
        20 49 2F 4F 20 50
        4F 52 54 20 50 49
        4E 20 44 49 52 45
        43 54 49 4F 4E 20
        43 48 41 4E 47 45
        20 20 20 2A 2A 2A
   08B5 2A 2A 2A 2A 2A 2A  7059 	.ascii "********"
        2A 2A
   08BD 0D                 7060 	.db 0x0D
   08BE 0A                 7061 	.db 0x0A
   08BF 00                 7062 	.db 0x00
   08C0                    7063 __str_49:
   08C0 2A 2A 2A 2A 2A 2A  7064 	.ascii "********* SELECT 'C' for I/O COUNTER RESET   ***********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        43 27 20 66 6F 72
        20 49 2F 4F 20 43
        4F 55 4E 54 45 52
        20 52 45 53 45 54
        20 20 20 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   08F8 0D                 7065 	.db 0x0D
   08F9 0A                 7066 	.db 0x0A
   08FA 00                 7067 	.db 0x00
   08FB                    7068 __str_50:
   08FB 2A 2A 2A 2A 2A 2A  7069 	.ascii "********* SELECT 'I' for I/O DISPLAY DIRECTION STATUS   ****"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        49 27 20 66 6F 72
        20 49 2F 4F 20 44
        49 53 50 4C 41 59
        20 44 49 52 45 43
        54 49 4F 4E 20 53
        54 41 54 55 53 20
        20 20 2A 2A 2A 2A
   0937 2A 2A 2A 2A 2A 2A  7070 	.ascii "*******"
        2A
   093E 0D                 7071 	.db 0x0D
   093F 0A                 7072 	.db 0x0A
   0940 00                 7073 	.db 0x00
   0941                    7074 __str_51:
   0941 2A 2A 2A 2A 2A 2A  7075 	.ascii "********* SELECT 'S' for I/O DISPLAY DATA STATUS  **********"
        2A 2A 2A 20 53 45
        4C 45 43 54 20 27
        53 27 20 66 6F 72
        20 49 2F 4F 20 44
        49 53 50 4C 41 59
        20 44 41 54 41 20
        53 54 41 54 55 53
        20 20 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   097D 2A                 7076 	.ascii "*"
   097E 0D                 7077 	.db 0x0D
   097F 0A                 7078 	.db 0x0A
   0980 00                 7079 	.db 0x00
   0981                    7080 __str_52:
   0981 2A 2A 2A 2A 2A 2A  7081 	.ascii "*********** I/O EXPANDER WRITE BYTE **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 45 58
        50 41 4E 44 45 52
        20 57 52 49 54 45
        20 42 59 54 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   09AF 0D                 7082 	.db 0x0D
   09B0 0A                 7083 	.db 0x0A
   09B1 00                 7084 	.db 0x00
   09B2                    7085 __str_53:
   09B2 45 6E 74 65 72 20  7086 	.ascii "Enter a output port pin number between 1 to 3 you want to wr"
        61 20 6F 75 74 70
        75 74 20 70 6F 72
        74 20 70 69 6E 20
        6E 75 6D 62 65 72
        20 62 65 74 77 65
        65 6E 20 31 20 74
        6F 20 33 20 79 6F
        75 20 77 61 6E 74
        20 74 6F 20 77 72
   09EE 69 74 65 20 74 6F  7087 	.ascii "ite to"
   09F4 0D                 7088 	.db 0x0D
   09F5 0A                 7089 	.db 0x0A
   09F6 00                 7090 	.db 0x00
   09F7                    7091 __str_54:
   09F7 54 68 65 20 70 69  7092 	.ascii "The pin you have selected is:"
        6E 20 79 6F 75 20
        68 61 76 65 20 73
        65 6C 65 63 74 65
        64 20 69 73 3A
   0A14 00                 7093 	.db 0x00
   0A15                    7094 __str_55:
   0A15 50 6C 65 61 73 65  7095 	.ascii "Please Enter a Output Pin between 1 to 3"
        20 45 6E 74 65 72
        20 61 20 4F 75 74
        70 75 74 20 50 69
        6E 20 62 65 74 77
        65 65 6E 20 31 20
        74 6F 20 33
   0A3D 0D                 7096 	.db 0x0D
   0A3E 0A                 7097 	.db 0x0A
   0A3F 00                 7098 	.db 0x00
   0A40                    7099 __str_56:
   0A40 0A                 7100 	.db 0x0A
   0A41 0A                 7101 	.db 0x0A
   0A42 0D                 7102 	.db 0x0D
   0A43 09                 7103 	.db 0x09
   0A44 20 53 65 6C 65 63  7104 	.ascii " Select a bit to write to the pin:  0. and  1. "
        74 20 61 20 62 69
        74 20 74 6F 20 77
        72 69 74 65 20 74
        6F 20 74 68 65 20
        70 69 6E 3A 20 20
        30 2E 20 61 6E 64
        20 20 31 2E 20
   0A73 0D                 7105 	.db 0x0D
   0A74 0A                 7106 	.db 0x0A
   0A75 09                 7107 	.db 0x09
   0A76 00                 7108 	.db 0x00
   0A77                    7109 __str_57:
   0A77 54 68 65 20 62 69  7110 	.ascii "The bit you have selected is:"
        74 20 79 6F 75 20
        68 61 76 65 20 73
        65 6C 65 63 74 65
        64 20 69 73 3A
   0A94 00                 7111 	.db 0x00
   0A95                    7112 __str_58:
   0A95 0A                 7113 	.db 0x0A
   0A96 0A                 7114 	.db 0x0A
   0A97 0D                 7115 	.db 0x0D
   0A98 20 2A 2D 45 52 52  7116 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0AA2 0A                 7117 	.db 0x0A
   0AA3 0D                 7118 	.db 0x0D
   0AA4 09                 7119 	.db 0x09
   0AA5 20 45 6E 74 65 72  7120 	.ascii " Enter a valid number between 0 or 1: "
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 6F 72 20 31
        3A 20
   0ACB 0D                 7121 	.db 0x0D
   0ACC 0A                 7122 	.db 0x0A
   0ACD 00                 7123 	.db 0x00
   0ACE                    7124 __str_59:
   0ACE 2A 2A 2A 2A 2A 2A  7125 	.ascii "*********** I/O EXPANDER READ BYTE  **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 45 58
        50 41 4E 44 45 52
        20 52 45 41 44 20
        42 59 54 45 20 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0AFC 0D                 7126 	.db 0x0D
   0AFD 0A                 7127 	.db 0x0A
   0AFE 00                 7128 	.db 0x00
   0AFF                    7129 __str_60:
   0AFF 54 68 65 20 73 74  7130 	.ascii "The status of I/O expander is %X "
        61 74 75 73 20 6F
        66 20 49 2F 4F 20
        65 78 70 61 6E 64
        65 72 20 69 73 20
        25 58 20
   0B20 00                 7131 	.db 0x00
   0B21                    7132 __str_61:
   0B21 2A 2A 2A 2A 2A 2A  7133 	.ascii "*********** I/O PORT PIN DIRECTION CHANGE **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 50 4F
        52 54 20 50 49 4E
        20 44 49 52 45 43
        54 49 4F 4E 20 43
        48 41 4E 47 45 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0B55 0D                 7134 	.db 0x0D
   0B56 0A                 7135 	.db 0x0A
   0B57 00                 7136 	.db 0x00
   0B58                    7137 __str_62:
   0B58 2A 2A 2A 2A 2A 2A  7138 	.ascii "*********** I/O COUNTER RESET **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 43 4F
        55 4E 54 45 52 20
        52 45 53 45 54 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0B80 0D                 7139 	.db 0x0D
   0B81 0A                 7140 	.db 0x0A
   0B82 00                 7141 	.db 0x00
   0B83                    7142 __str_63:
   0B83 2A 2A 2A 2A 2A 2A  7143 	.ascii "*********** I/O DISPLAY DIRECTION STATUS **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 44 49
        53 50 4C 41 59 20
        44 49 52 45 43 54
        49 4F 4E 20 53 54
        41 54 55 53 20 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0BB6 0D                 7144 	.db 0x0D
   0BB7 0A                 7145 	.db 0x0A
   0BB8 00                 7146 	.db 0x00
   0BB9                    7147 __str_64:
   0BB9 2A 2A 2A 2A 2A 2A  7148 	.ascii "*********** I/O DISPLAY DATA STATUS **********"
        2A 2A 2A 2A 2A 20
        49 2F 4F 20 44 49
        53 50 4C 41 59 20
        44 41 54 41 20 53
        54 41 54 55 53 20
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   0BE7 0D                 7149 	.db 0x0D
   0BE8 0A                 7150 	.db 0x0A
   0BE9 00                 7151 	.db 0x00
   0BEA                    7152 __str_65:
   0BEA 45 6E 74 65 72 20  7153 	.ascii "Enter a valid command"
        61 20 76 61 6C 69
        64 20 63 6F 6D 6D
        61 6E 64
   0BFF 0D                 7154 	.db 0x0D
   0C00 0A                 7155 	.db 0x0A
   0C01 00                 7156 	.db 0x00
   0C02                    7157 __str_66:
   0C02 0A                 7158 	.db 0x0A
   0C03 0A                 7159 	.db 0x0A
   0C04 0D                 7160 	.db 0x0D
   0C05 20 45 6E 74 65 72  7161 	.ascii " Enter Address in Hex in HHH format between 000 to 7FF"
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20 37 46 46
   0C3B 0D                 7162 	.db 0x0D
   0C3C 0A                 7163 	.db 0x0A
   0C3D 00                 7164 	.db 0x00
   0C3E                    7165 __str_67:
   0C3E 41 64 64 72 65 73  7166 	.ascii "Address Entered is: "
        73 20 45 6E 74 65
        72 65 64 20 69 73
        3A 20
   0C52 00                 7167 	.db 0x00
   0C53                    7168 __str_68:
   0C53 0A                 7169 	.db 0x0A
   0C54 0A                 7170 	.db 0x0A
   0C55 0D                 7171 	.db 0x0D
   0C56 20 2A 2D 45 52 52  7172 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0C60 09                 7173 	.db 0x09
   0C61 20 50 6C 65 61 73  7174 	.ascii " Please Enter valid Address between 000 and 7F"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 41 64 64 72
        65 73 73 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 61 6E
        64 20 37 46
   0C8F 46                 7175 	.ascii "F"
   0C90 0D                 7176 	.db 0x0D
   0C91 0A                 7177 	.db 0x0A
   0C92 20                 7178 	.ascii " "
   0C93 00                 7179 	.db 0x00
   0C94                    7180 __str_69:
   0C94 0A                 7181 	.db 0x0A
   0C95 0A                 7182 	.db 0x0A
   0C96 0D                 7183 	.db 0x0D
   0C97 20 45 6E 74 65 72  7184 	.ascii " Enter Data in Hex in HH format between 00 to FF: "
        20 44 61 74 61 20
        69 6E 20 48 65 78
        20 69 6E 20 48 48
        20 66 6F 72 6D 61
        74 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 46 46
        3A 20
   0CC9 00                 7185 	.db 0x00
   0CCA                    7186 __str_70:
   0CCA 44 61 74 61 20 45  7187 	.ascii "Data Entered is: "
        6E 74 65 72 65 64
        20 69 73 3A 20
   0CDB 00                 7188 	.db 0x00
   0CDC                    7189 __str_71:
   0CDC 0A                 7190 	.db 0x0A
   0CDD 0A                 7191 	.db 0x0A
   0CDE 0D                 7192 	.db 0x0D
   0CDF 20 2A 2D 45 52 52  7193 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0CE9 09                 7194 	.db 0x09
   0CEA 20 50 6C 65 61 73  7195 	.ascii " Please Enter valid data in Hex in HH format b"
        65 20 45 6E 74 65
        72 20 76 61 6C 69
        64 20 64 61 74 61
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 20 66 6F 72 6D
        61 74 20 62
   0D18 65 74 77 65 65 6E  7196 	.ascii "etween 00 to FF"
        20 30 30 20 74 6F
        20 46 46
   0D27 0D                 7197 	.db 0x0D
   0D28 0A                 7198 	.db 0x0A
   0D29 00                 7199 	.db 0x00
   0D2A                    7200 __str_72:
   0D2A 54 68 65 20 62 79  7201 	.ascii "The byte in the specified address is %x"
        74 65 20 69 6E 20
        74 68 65 20 73 70
        65 63 69 66 69 65
        64 20 61 64 64 72
        65 73 73 20 69 73
        20 25 78
   0D51 0D                 7202 	.db 0x0D
   0D52 0A                 7203 	.db 0x0A
   0D53 00                 7204 	.db 0x00
   0D54                    7205 __str_73:
   0D54 25 30 33 58 3A 20  7206 	.ascii "%03X: %02X"
        25 30 32 58
   0D5E 0D                 7207 	.db 0x0D
   0D5F 0A                 7208 	.db 0x0A
   0D60 00                 7209 	.db 0x00
   0D61                    7210 __str_74:
   0D61 0A                 7211 	.db 0x0A
   0D62 0A                 7212 	.db 0x0A
   0D63 0D                 7213 	.db 0x0D
   0D64 20 45 6E 74 65 72  7214 	.ascii " Enter start Address in Hex in HHH format between 000 to "
        20 73 74 61 72 74
        20 41 64 64 72 65
        73 73 20 69 6E 20
        48 65 78 20 69 6E
        20 48 48 48 20 66
        6F 72 6D 61 74 20
        62 65 74 77 65 65
        6E 20 30 30 30 20
        74 6F 20
   0D9D 37 46 46           7215 	.ascii "7FF"
   0DA0 0D                 7216 	.db 0x0D
   0DA1 0A                 7217 	.db 0x0A
   0DA2 00                 7218 	.db 0x00
   0DA3                    7219 __str_75:
   0DA3 0A                 7220 	.db 0x0A
   0DA4 0A                 7221 	.db 0x0A
   0DA5 0D                 7222 	.db 0x0D
   0DA6 20 45 6E 74 65 72  7223 	.ascii " Enter end Address in Hex in HHH format between 000 to 7F"
        20 65 6E 64 20 41
        64 64 72 65 73 73
        20 69 6E 20 48 65
        78 20 69 6E 20 48
        48 48 20 66 6F 72
        6D 61 74 20 62 65
        74 77 65 65 6E 20
        30 30 30 20 74 6F
        20 37 46
   0DDF 46                 7224 	.ascii "F"
   0DE0 0D                 7225 	.db 0x0D
   0DE1 0A                 7226 	.db 0x0A
   0DE2 00                 7227 	.db 0x00
   0DE3                    7228 __str_76:
   0DE3 0D                 7229 	.db 0x0D
   0DE4 0A                 7230 	.db 0x0A
   0DE5 2A 2A 2A 2A 2A 2A  7231 	.ascii "************Sequential Read************"
        2A 2A 2A 2A 2A 2A
        53 65 71 75 65 6E
        74 69 61 6C 20 52
        65 61 64 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0E0C 0D                 7232 	.db 0x0D
   0E0D 0A                 7233 	.db 0x0A
   0E0E 00                 7234 	.db 0x00
   0E0F                    7235 __str_77:
   0E0F 50 6C 65 61 73 65  7236 	.ascii "Please Enter a Higher End Address"
        20 45 6E 74 65 72
        20 61 20 48 69 67
        68 65 72 20 45 6E
        64 20 41 64 64 72
        65 73 73
   0E30 0D                 7237 	.db 0x0D
   0E31 0A                 7238 	.db 0x0A
   0E32 00                 7239 	.db 0x00
   0E33                    7240 __str_78:
   0E33 0A                 7241 	.db 0x0A
   0E34 0A                 7242 	.db 0x0A
   0E35 0D                 7243 	.db 0x0D
   0E36 09                 7244 	.db 0x09
   0E37 20 53 65 6C 65 63  7245 	.ascii " Select Character code between 0 to 7: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 3A 20
   0E5E 09                 7246 	.db 0x09
   0E5F 00                 7247 	.db 0x00
   0E60                    7248 __str_79:
   0E60 0A                 7249 	.db 0x0A
   0E61 0A                 7250 	.db 0x0A
   0E62 0D                 7251 	.db 0x0D
   0E63 20 2A 2D 45 52 52  7252 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0E6D 0A                 7253 	.db 0x0A
   0E6E 0D                 7254 	.db 0x0D
   0E6F 09                 7255 	.db 0x09
   0E70 20 45 6E 74 65 72  7256 	.ascii " Enter a valid number between 0 to 7"
        20 61 20 76 61 6C
        69 64 20 6E 75 6D
        62 65 72 20 62 65
        74 77 65 65 6E 20
        30 20 74 6F 20 37
   0E94 00                 7257 	.db 0x00
   0E95                    7258 __str_80:
   0E95 0A                 7259 	.db 0x0A
   0E96 0A                 7260 	.db 0x0A
   0E97 0D                 7261 	.db 0x0D
   0E98 09                 7262 	.db 0x09
   0E99 20 45 6E 74 65 72  7263 	.ascii " Enter pixel map in HEX in HH format from 00 to 1F: "
        20 70 69 78 65 6C
        20 6D 61 70 20 69
        6E 20 48 45 58 20
        69 6E 20 48 48 20
        66 6F 72 6D 61 74
        20 66 72 6F 6D 20
        30 30 20 74 6F 20
        31 46 3A 20
   0ECD 09                 7264 	.db 0x09
   0ECE 00                 7265 	.db 0x00
   0ECF                    7266 __str_81:
   0ECF 0A                 7267 	.db 0x0A
   0ED0 0D                 7268 	.db 0x0D
   0ED1 09                 7269 	.db 0x09
   0ED2 20 44 61 74 61 20  7270 	.ascii " Data in row number %d: "
        69 6E 20 72 6F 77
        20 6E 75 6D 62 65
        72 20 25 64 3A 20
   0EEA 09                 7271 	.db 0x09
   0EEB 00                 7272 	.db 0x00
   0EEC                    7273 __str_82:
   0EEC 0A                 7274 	.db 0x0A
   0EED 0A                 7275 	.db 0x0A
   0EEE 0D                 7276 	.db 0x0D
   0EEF 20 2A 2D 45 52 52  7277 	.ascii " *-ERROR-*"
        4F 52 2D 2A
   0EF9 0A                 7278 	.db 0x0A
   0EFA 0D                 7279 	.db 0x0D
   0EFB 09                 7280 	.db 0x09
   0EFC 20 45 6E 74 65 72  7281 	.ascii " Enter a valid HEX number between 00 to 1F i"
        20 61 20 76 61 6C
        69 64 20 48 45 58
        20 6E 75 6D 62 65
        72 20 62 65 74 77
        65 65 6E 20 30 30
        20 74 6F 20 31 46
        20 69
   0F28 6E 20 48 48 20 66  7282 	.ascii "n HH format:"
        6F 72 6D 61 74 3A
   0F34 09                 7283 	.db 0x09
   0F35 00                 7284 	.db 0x00
   0F36                    7285 __str_83:
   0F36 0A                 7286 	.db 0x0A
   0F37 0D                 7287 	.db 0x0D
   0F38 09                 7288 	.db 0x09
   0F39 09                 7289 	.db 0x09
   0F3A 20 20 20 20 20 20  7290 	.ascii "      "
   0F40 09                 7291 	.db 0x09
   0F41 31 32 33 34 35     7292 	.ascii "12345"
   0F46 00                 7293 	.db 0x00
   0F47                    7294 __str_84:
   0F47 0A                 7295 	.db 0x0A
   0F48 0D                 7296 	.db 0x0D
   0F49 09                 7297 	.db 0x09
   0F4A 09                 7298 	.db 0x09
   0F4B 52 4F 57 20 25 64  7299 	.ascii "ROW %d:"
        3A
   0F52 09                 7300 	.db 0x09
   0F53 00                 7301 	.db 0x00
   0F54                    7302 __str_85:
   0F54 25 63              7303 	.ascii "%c"
   0F56 00                 7304 	.db 0x00
   0F57                    7305 __str_86:
   0F57 0A                 7306 	.db 0x0A
   0F58 0A                 7307 	.db 0x0A
   0F59 0D                 7308 	.db 0x0D
   0F5A 09                 7309 	.db 0x09
   0F5B 20 53 65 6C 65 63  7310 	.ascii " Select Character code between 0 to 7 to display: "
        74 20 43 68 61 72
        61 63 74 65 72 20
        63 6F 64 65 20 62
        65 74 77 65 65 6E
        20 30 20 74 6F 20
        37 20 74 6F 20 64
        69 73 70 6C 61 79
        3A 20
   0F8D 09                 7311 	.db 0x09
   0F8E 00                 7312 	.db 0x00
   0F8F                    7313 __str_87:
   0F8F 50 25 64 20 70 69  7314 	.ascii "P%d pin is a input pin"
        6E 20 69 73 20 61
        20 69 6E 70 75 74
        20 70 69 6E
   0FA5 0D                 7315 	.db 0x0D
   0FA6 0A                 7316 	.db 0x0A
   0FA7 00                 7317 	.db 0x00
   0FA8                    7318 __str_88:
   0FA8 50 25 64 20 70 69  7319 	.ascii "P%d pin is a output pin"
        6E 20 69 73 20 61
        20 6F 75 74 70 75
        74 20 70 69 6E
   0FBF 0D                 7320 	.db 0x0D
   0FC0 0A                 7321 	.db 0x0A
   0FC1 00                 7322 	.db 0x00
   0FC2                    7323 __str_89:
   0FC2 44 61 74 61 20 61  7324 	.ascii "Data at Port Pin %d is %x"
        74 20 50 6F 72 74
        20 50 69 6E 20 25
        64 20 69 73 20 25
        78
   0FDB 0D                 7325 	.db 0x0D
   0FDC 0A                 7326 	.db 0x0A
   0FDD 00                 7327 	.db 0x00
   0FDE                    7328 __str_90:
   0FDE 45 6E 74 65 72 20  7329 	.ascii "Enter the string you want to search"
        74 68 65 20 73 74
        72 69 6E 67 20 79
        6F 75 20 77 61 6E
        74 20 74 6F 20 73
        65 61 72 63 68
   1001 0D                 7330 	.db 0x0D
   1002 0A                 7331 	.db 0x0A
   1003 00                 7332 	.db 0x00
   1004                    7333 __str_91:
   1004 54 68 65 20 73 74  7334 	.ascii "The string you want to search is: "
        72 69 6E 67 20 79
        6F 75 20 77 61 6E
        74 20 74 6F 20 73
        65 61 72 63 68 20
        69 73 3A 20
   1026 00                 7335 	.db 0x00
   1027                    7336 __str_92:
   1027 4C 65 6E 67 74 68  7337 	.ascii "Length of the string to search is %d"
        20 6F 66 20 74 68
        65 20 73 74 72 69
        6E 67 20 74 6F 20
        73 65 61 72 63 68
        20 69 73 20 25 64
   104B 0D                 7338 	.db 0x0D
   104C 0A                 7339 	.db 0x0A
   104D 00                 7340 	.db 0x00
   104E                    7341 __str_93:
   104E 2A 2A 2A 2A 2A 2A  7342 	.ascii "********************************Search is finished**********"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 53 65 61 72
        63 68 20 69 73 20
        66 69 6E 69 73 68
        65 64 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
   108A 2A 2A 2A 2A 2A 2A  7343 	.ascii "*******************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   109D 0D                 7344 	.db 0x0D
   109E 0A                 7345 	.db 0x0A
   109F 00                 7346 	.db 0x00
   10A0                    7347 __str_94:
   10A0 52 65 61 64 20 63  7348 	.ascii "Read character: "
        68 61 72 61 63 74
        65 72 3A 20
   10B0 00                 7349 	.db 0x00
   10B1                    7350 __str_95:
   10B1 41 64 64 72 65 73  7351 	.ascii "Address captured is %x"
        73 20 63 61 70 74
        75 72 65 64 20 69
        73 20 25 78
   10C7 0D                 7352 	.db 0x0D
   10C8 0A                 7353 	.db 0x0A
   10C9 00                 7354 	.db 0x00
   10CA                    7355 __str_96:
   10CA 41 64 64 72 65 73  7356 	.ascii "Address captured is %d"
        73 20 63 61 70 74
        75 72 65 64 20 69
        73 20 25 64
   10E0 0D                 7357 	.db 0x0D
   10E1 0A                 7358 	.db 0x0A
   10E2 00                 7359 	.db 0x00
   10E3                    7360 __str_97:
   10E3 74 65 6D 70 20 41  7361 	.ascii "temp Address captured is %x"
        64 64 72 65 73 73
        20 63 61 70 74 75
        72 65 64 20 69 73
        20 25 78
   10FE 0D                 7362 	.db 0x0D
   10FF 0A                 7363 	.db 0x0A
   1100 00                 7364 	.db 0x00
   1101                    7365 __str_98:
   1101 4D 41 54 43 48 45  7366 	.ascii "MATCHED"
        44
   1108 0D                 7367 	.db 0x0D
   1109 0A                 7368 	.db 0x0A
   110A 00                 7369 	.db 0x00
   110B                    7370 __str_99:
   110B 2A 2A 2A 2A 2A 2A  7371 	.ascii "******************************************Found the text****"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        46 6F 75 6E 64 20
        74 68 65 20 74 65
        78 74 2A 2A 2A 2A
   1147 2A 2A 2A 2A 2A 2A  7372 	.ascii "****************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A
   1163 0D                 7373 	.db 0x0D
   1164 0A                 7374 	.db 0x0A
   1165 00                 7375 	.db 0x00
   1166                    7376 __str_100:
   1166 2A 2A 2A 2A 2A 2A  7377 	.ascii "******************************************Address of the str"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        41 64 64 72 65 73
        73 20 6F 66 20 74
        68 65 20 73 74 72
   11A2 69 6E 67 20 69 73  7378 	.ascii "ing is: %02X********************************"
        3A 20 25 30 32 58
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A
   11CE 0D                 7379 	.db 0x0D
   11CF 0A                 7380 	.db 0x0A
   11D0 00                 7381 	.db 0x00
   11D1                    7382 __str_101:
   11D1 2A 2A 2A 2A 2A 2A  7383 	.ascii "**************************************Search count is %d****"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 53 65 61 72
        63 68 20 63 6F 75
        6E 74 20 69 73 20
        25 64 2A 2A 2A 2A
   120D 2A 2A 2A 2A 2A 2A  7384 	.ascii "**********************88"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 38 38
   1225 0D                 7385 	.db 0x0D
   1226 0A                 7386 	.db 0x0A
   1227 00                 7387 	.db 0x00
   1228                    7388 __str_102:
   1228 4E 75 6D 62 65 72  7389 	.ascii "Number of times interrupt is %d"
        20 6F 66 20 74 69
        6D 65 73 20 69 6E
        74 65 72 72 75 70
        74 20 69 73 20 25
        64
   1247 0D                 7390 	.db 0x0D
   1248 0A                 7391 	.db 0x0A
   1249 00                 7392 	.db 0x00
   124A                    7393 __str_103:
   124A 6C 6F 61 64 20 76  7394 	.ascii "load value is %x"
        61 6C 75 65 20 69
        73 20 25 78
   125A 0D                 7395 	.db 0x0D
   125B 0A                 7396 	.db 0x0A
   125C 00                 7397 	.db 0x00
   125D                    7398 __str_104:
   125D 74 69 6D 65 20 76  7399 	.ascii "time value is us is %d"
        61 6C 75 65 20 69
        73 20 75 73 20 69
        73 20 25 64
   1273 0D                 7400 	.db 0x0D
   1274 0A                 7401 	.db 0x0A
   1275 00                 7402 	.db 0x00
   1276                    7403 __str_105:
   1276 2A 2A 2A 2A 2A 2A  7404 	.ascii "*******************************total time value is ms is %dm"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 74 6F 74 61 6C
        20 74 69 6D 65 20
        76 61 6C 75 65 20
        69 73 20 6D 73 20
        69 73 20 25 64 6D
   12B2 73 2A 2A 2A 2A 2A  7405 	.ascii "s******************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A
   12D1 0D                 7406 	.db 0x0D
   12D2 0A                 7407 	.db 0x0A
   12D3 00                 7408 	.db 0x00
   12D4                    7409 __str_106:
   12D4 2A 2A 2A 2A 2A 2A  7410 	.ascii "*******************************total time value is s is %ds*"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 74 6F 74 61 6C
        20 74 69 6D 65 20
        76 61 6C 75 65 20
        69 73 20 73 20 69
        73 20 25 64 73 2A
   1310 2A 2A 2A 2A 2A 2A  7411 	.ascii "*********************************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   1331 0D                 7412 	.db 0x0D
   1332 0A                 7413 	.db 0x0A
   1333 00                 7414 	.db 0x00
   1334                    7415 __str_107:
   1334 30 31 32           7416 	.ascii "012"
   1337 00                 7417 	.db 0x00
   1338                    7418 __str_108:
   1338 45 4D 42 45 44 44  7419 	.ascii "EMBEDDED SYSTEM DESIGN LAB 4 REQUIRED ELEMENTS"
        45 44 20 53 59 53
        54 45 4D 20 44 45
        53 49 47 4E 20 4C
        41 42 20 34 20 52
        45 51 55 49 52 45
        44 20 45 4C 45 4D
        45 4E 54 53
   1366 00                 7420 	.db 0x00
                           7421 	.area XINIT   (CODE)
   0000                    7422 __xinit__name:
   0000 30 31 32           7423 	.ascii "012"
   0003                    7424 __xinit__str:
   0003 45 4D 42 45 44 44  7425 	.ascii "EMBEDDED SYSTEM DESIGN LAB 4 REQUIRED ELEMENTS"
        45 44 20 53 59 53
        54 45 4D 20 44 45
        53 49 47 4E 20 4C
        41 42 20 34 20 52
        45 51 55 49 52 45
        44 20 45 4C 45 4D
        45 4E 54 53
   0031 00                 7426 	.db 0x00
   0032 00                 7427 	.db 0x00
   0033 00                 7428 	.db 0x00
   0034 00                 7429 	.db 0x00
   0035                    7430 __xinit__time:
   0035 00                 7431 	.db #0x00
   0036                    7432 __xinit__timers:
   0036 00 00              7433 	.byte #0x00,#0x00
   0038                    7434 __xinit__io_counter:
   0038 00 00              7435 	.byte #0x00,#0x00
